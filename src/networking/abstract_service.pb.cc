// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: abstract_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "abstract_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace peloton {
namespace networking {

namespace {

const ::google::protobuf::Descriptor* WorkFragment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkFragment_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryEstimate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryEstimate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionInitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionInitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionInitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionInitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionWorkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionWorkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionWorkResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionWorkResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionPrefetchResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionPrefetchResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionPrefetchAcknowledgement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionPrefetchAcknowledgement_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionMapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionMapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionMapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionMapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionReduceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionReduceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionReduceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionReduceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionReduceResponse_ReduceResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionReduceResponse_ReduceResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionPrepareRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionPrepareRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionPrepareResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionPrepareResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionFinishRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionFinishRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionFinishResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionFinishResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionRedirectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionRedirectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionRedirectResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionRedirectResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionDebugRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionDebugRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionDebugResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionDebugResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitializeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitializeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitializeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitializeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShutdownPrepareRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShutdownPrepareRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShutdownPrepareResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShutdownPrepareResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShutdownRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShutdownRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShutdownResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShutdownResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartbeatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartbeatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartbeatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartbeatResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnevictDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnevictDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnevictDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnevictDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeSyncRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeSyncRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeSyncResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeSyncResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryPlanExecRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPlanExecRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryPlanExecResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPlanExecResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Status_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* AbstractPelotonService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_abstract_5fservice_2eproto() {
  protobuf_AddDesc_abstract_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "abstract_service.proto");
  GOOGLE_CHECK(file != NULL);
  WorkFragment_descriptor_ = file->message_type(0);
  static const int WorkFragment_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, fragment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, input_dep_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, output_dep_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, param_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, stmt_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, stmt_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, stmt_ignore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, read_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, needs_input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, last_fragment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, prefetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, force_),
  };
  WorkFragment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkFragment_descriptor_,
      WorkFragment::default_instance_,
      WorkFragment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkFragment));
  WorkResult_descriptor_ = file->message_type(1);
  static const int WorkResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResult, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResult, dep_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResult, dep_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResult, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResult, error_),
  };
  WorkResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkResult_descriptor_,
      WorkResult::default_instance_,
      WorkResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkResult));
  QueryEstimate_descriptor_ = file->message_type(2);
  static const int QueryEstimate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEstimate, stmt_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEstimate, stmt_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEstimate, time_estimate_),
  };
  QueryEstimate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryEstimate_descriptor_,
      QueryEstimate::default_instance_,
      QueryEstimate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEstimate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEstimate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryEstimate));
  TransactionInitRequest_descriptor_ = file->message_type(3);
  static const int TransactionInitRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, last_transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, base_partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, procedure_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, partitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, proc_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, prefetch_fragments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, prefetch_params_),
  };
  TransactionInitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionInitRequest_descriptor_,
      TransactionInitRequest::default_instance_,
      TransactionInitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionInitRequest));
  TransactionInitResponse_descriptor_ = file->message_type(4);
  static const int TransactionInitResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitResponse, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitResponse, partitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitResponse, reject_partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitResponse, reject_transaction_id_),
  };
  TransactionInitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionInitResponse_descriptor_,
      TransactionInitResponse::default_instance_,
      TransactionInitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionInitResponse));
  TransactionWorkRequest_descriptor_ = file->message_type(5);
  static const int TransactionWorkRequest_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, last_transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, source_partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, fragments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, procedure_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, attached_dep_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, attached_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, done_partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, proc_params_),
  };
  TransactionWorkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionWorkRequest_descriptor_,
      TransactionWorkRequest::default_instance_,
      TransactionWorkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionWorkRequest));
  TransactionWorkResponse_descriptor_ = file->message_type(6);
  static const int TransactionWorkResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkResponse, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkResponse, results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkResponse, status_),
  };
  TransactionWorkResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionWorkResponse_descriptor_,
      TransactionWorkResponse::default_instance_,
      TransactionWorkResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionWorkResponse));
  TransactionPrefetchResult_descriptor_ = file->message_type(7);
  static const int TransactionPrefetchResult_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, last_transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, source_partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, stmt_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, fragment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, param_hash_),
  };
  TransactionPrefetchResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionPrefetchResult_descriptor_,
      TransactionPrefetchResult::default_instance_,
      TransactionPrefetchResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionPrefetchResult));
  TransactionPrefetchAcknowledgement_descriptor_ = file->message_type(8);
  static const int TransactionPrefetchAcknowledgement_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchAcknowledgement, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchAcknowledgement, target_partition_),
  };
  TransactionPrefetchAcknowledgement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionPrefetchAcknowledgement_descriptor_,
      TransactionPrefetchAcknowledgement::default_instance_,
      TransactionPrefetchAcknowledgement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchAcknowledgement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchAcknowledgement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionPrefetchAcknowledgement));
  TransactionMapRequest_descriptor_ = file->message_type(9);
  static const int TransactionMapRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, last_transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, client_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, base_partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, procedure_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, params_),
  };
  TransactionMapRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionMapRequest_descriptor_,
      TransactionMapRequest::default_instance_,
      TransactionMapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionMapRequest));
  TransactionMapResponse_descriptor_ = file->message_type(10);
  static const int TransactionMapResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapResponse, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapResponse, partitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapResponse, status_),
  };
  TransactionMapResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionMapResponse_descriptor_,
      TransactionMapResponse::default_instance_,
      TransactionMapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionMapResponse));
  TransactionReduceRequest_descriptor_ = file->message_type(11);
  static const int TransactionReduceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceRequest, transaction_id_),
  };
  TransactionReduceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionReduceRequest_descriptor_,
      TransactionReduceRequest::default_instance_,
      TransactionReduceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionReduceRequest));
  TransactionReduceResponse_descriptor_ = file->message_type(12);
  static const int TransactionReduceResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse, results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse, status_),
  };
  TransactionReduceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionReduceResponse_descriptor_,
      TransactionReduceResponse::default_instance_,
      TransactionReduceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionReduceResponse));
  TransactionReduceResponse_ReduceResult_descriptor_ = TransactionReduceResponse_descriptor_->nested_type(0);
  static const int TransactionReduceResponse_ReduceResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse_ReduceResult, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse_ReduceResult, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse_ReduceResult, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse_ReduceResult, error_),
  };
  TransactionReduceResponse_ReduceResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionReduceResponse_ReduceResult_descriptor_,
      TransactionReduceResponse_ReduceResult::default_instance_,
      TransactionReduceResponse_ReduceResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse_ReduceResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse_ReduceResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionReduceResponse_ReduceResult));
  TransactionPrepareRequest_descriptor_ = file->message_type(13);
  static const int TransactionPrepareRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareRequest, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareRequest, partitions_),
  };
  TransactionPrepareRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionPrepareRequest_descriptor_,
      TransactionPrepareRequest::default_instance_,
      TransactionPrepareRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionPrepareRequest));
  TransactionPrepareResponse_descriptor_ = file->message_type(14);
  static const int TransactionPrepareResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareResponse, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareResponse, partitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareResponse, status_),
  };
  TransactionPrepareResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionPrepareResponse_descriptor_,
      TransactionPrepareResponse::default_instance_,
      TransactionPrepareResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionPrepareResponse));
  TransactionFinishRequest_descriptor_ = file->message_type(15);
  static const int TransactionFinishRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishRequest, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishRequest, partitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishRequest, status_),
  };
  TransactionFinishRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionFinishRequest_descriptor_,
      TransactionFinishRequest::default_instance_,
      TransactionFinishRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionFinishRequest));
  TransactionFinishResponse_descriptor_ = file->message_type(16);
  static const int TransactionFinishResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishResponse, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishResponse, partitions_),
  };
  TransactionFinishResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionFinishResponse_descriptor_,
      TransactionFinishResponse::default_instance_,
      TransactionFinishResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionFinishResponse));
  TransactionRedirectRequest_descriptor_ = file->message_type(17);
  static const int TransactionRedirectRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectRequest, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectRequest, work_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectRequest, orig_txn_id_),
  };
  TransactionRedirectRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionRedirectRequest_descriptor_,
      TransactionRedirectRequest::default_instance_,
      TransactionRedirectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionRedirectRequest));
  TransactionRedirectResponse_descriptor_ = file->message_type(18);
  static const int TransactionRedirectResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectResponse, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectResponse, output_),
  };
  TransactionRedirectResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionRedirectResponse_descriptor_,
      TransactionRedirectResponse::default_instance_,
      TransactionRedirectResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionRedirectResponse));
  TransactionDebugRequest_descriptor_ = file->message_type(19);
  static const int TransactionDebugRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugRequest, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugRequest, transaction_id_),
  };
  TransactionDebugRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionDebugRequest_descriptor_,
      TransactionDebugRequest::default_instance_,
      TransactionDebugRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionDebugRequest));
  TransactionDebugResponse_descriptor_ = file->message_type(20);
  static const int TransactionDebugResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugResponse, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugResponse, debug_),
  };
  TransactionDebugResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionDebugResponse_descriptor_,
      TransactionDebugResponse::default_instance_,
      TransactionDebugResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionDebugResponse));
  SendDataRequest_descriptor_ = file->message_type(21);
  static const int SendDataRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataRequest, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataRequest, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataRequest, dep_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataRequest, data_),
  };
  SendDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendDataRequest_descriptor_,
      SendDataRequest::default_instance_,
      SendDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendDataRequest));
  SendDataResponse_descriptor_ = file->message_type(22);
  static const int SendDataResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataResponse, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataResponse, partitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataResponse, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataResponse, status_),
  };
  SendDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendDataResponse_descriptor_,
      SendDataResponse::default_instance_,
      SendDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendDataResponse));
  InitializeRequest_descriptor_ = file->message_type(23);
  static const int InitializeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeRequest, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeRequest, instance_id_),
  };
  InitializeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitializeRequest_descriptor_,
      InitializeRequest::default_instance_,
      InitializeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitializeRequest));
  InitializeResponse_descriptor_ = file->message_type(24);
  static const int InitializeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeResponse, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeResponse, status_),
  };
  InitializeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitializeResponse_descriptor_,
      InitializeResponse::default_instance_,
      InitializeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitializeResponse));
  ShutdownPrepareRequest_descriptor_ = file->message_type(25);
  static const int ShutdownPrepareRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownPrepareRequest, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownPrepareRequest, error_),
  };
  ShutdownPrepareRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShutdownPrepareRequest_descriptor_,
      ShutdownPrepareRequest::default_instance_,
      ShutdownPrepareRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownPrepareRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownPrepareRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShutdownPrepareRequest));
  ShutdownPrepareResponse_descriptor_ = file->message_type(26);
  static const int ShutdownPrepareResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownPrepareResponse, sender_site_),
  };
  ShutdownPrepareResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShutdownPrepareResponse_descriptor_,
      ShutdownPrepareResponse::default_instance_,
      ShutdownPrepareResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownPrepareResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownPrepareResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShutdownPrepareResponse));
  ShutdownRequest_descriptor_ = file->message_type(27);
  static const int ShutdownRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownRequest, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownRequest, exit_status_),
  };
  ShutdownRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShutdownRequest_descriptor_,
      ShutdownRequest::default_instance_,
      ShutdownRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShutdownRequest));
  ShutdownResponse_descriptor_ = file->message_type(28);
  static const int ShutdownResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownResponse, sender_site_),
  };
  ShutdownResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShutdownResponse_descriptor_,
      ShutdownResponse::default_instance_,
      ShutdownResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShutdownResponse));
  HeartbeatRequest_descriptor_ = file->message_type(29);
  static const int HeartbeatRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, last_transaction_id_),
  };
  HeartbeatRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartbeatRequest_descriptor_,
      HeartbeatRequest::default_instance_,
      HeartbeatRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartbeatRequest));
  HeartbeatResponse_descriptor_ = file->message_type(30);
  static const int HeartbeatResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, status_),
  };
  HeartbeatResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartbeatResponse_descriptor_,
      HeartbeatResponse::default_instance_,
      HeartbeatResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartbeatResponse));
  UnevictDataRequest_descriptor_ = file->message_type(31);
  static const int UnevictDataRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, block_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, tuple_offsets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, new_transaction_id_),
  };
  UnevictDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnevictDataRequest_descriptor_,
      UnevictDataRequest::default_instance_,
      UnevictDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnevictDataRequest));
  UnevictDataResponse_descriptor_ = file->message_type(32);
  static const int UnevictDataResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataResponse, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataResponse, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataResponse, partition_id_),
  };
  UnevictDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnevictDataResponse_descriptor_,
      UnevictDataResponse::default_instance_,
      UnevictDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnevictDataResponse));
  TimeSyncRequest_descriptor_ = file->message_type(33);
  static const int TimeSyncRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncRequest, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncRequest, t0_s_),
  };
  TimeSyncRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeSyncRequest_descriptor_,
      TimeSyncRequest::default_instance_,
      TimeSyncRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeSyncRequest));
  TimeSyncResponse_descriptor_ = file->message_type(34);
  static const int TimeSyncResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncResponse, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncResponse, t0_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncResponse, t0_r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncResponse, t1_s_),
  };
  TimeSyncResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeSyncResponse_descriptor_,
      TimeSyncResponse::default_instance_,
      TimeSyncResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeSyncResponse));
  QueryPlanExecRequest_descriptor_ = file->message_type(35);
  static const int QueryPlanExecRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlanExecRequest, plan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlanExecRequest, param_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlanExecRequest, param_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlanExecRequest, plan_),
  };
  QueryPlanExecRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryPlanExecRequest_descriptor_,
      QueryPlanExecRequest::default_instance_,
      QueryPlanExecRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlanExecRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlanExecRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryPlanExecRequest));
  QueryPlanExecResponse_descriptor_ = file->message_type(36);
  static const int QueryPlanExecResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlanExecResponse, tuple_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlanExecResponse, tile_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlanExecResponse, result_),
  };
  QueryPlanExecResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryPlanExecResponse_descriptor_,
      QueryPlanExecResponse::default_instance_,
      QueryPlanExecResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlanExecResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlanExecResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryPlanExecResponse));
  Status_descriptor_ = file->enum_type(0);
  AbstractPelotonService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_abstract_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkFragment_descriptor_, &WorkFragment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkResult_descriptor_, &WorkResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryEstimate_descriptor_, &QueryEstimate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionInitRequest_descriptor_, &TransactionInitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionInitResponse_descriptor_, &TransactionInitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionWorkRequest_descriptor_, &TransactionWorkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionWorkResponse_descriptor_, &TransactionWorkResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionPrefetchResult_descriptor_, &TransactionPrefetchResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionPrefetchAcknowledgement_descriptor_, &TransactionPrefetchAcknowledgement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionMapRequest_descriptor_, &TransactionMapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionMapResponse_descriptor_, &TransactionMapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionReduceRequest_descriptor_, &TransactionReduceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionReduceResponse_descriptor_, &TransactionReduceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionReduceResponse_ReduceResult_descriptor_, &TransactionReduceResponse_ReduceResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionPrepareRequest_descriptor_, &TransactionPrepareRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionPrepareResponse_descriptor_, &TransactionPrepareResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionFinishRequest_descriptor_, &TransactionFinishRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionFinishResponse_descriptor_, &TransactionFinishResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionRedirectRequest_descriptor_, &TransactionRedirectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionRedirectResponse_descriptor_, &TransactionRedirectResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionDebugRequest_descriptor_, &TransactionDebugRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionDebugResponse_descriptor_, &TransactionDebugResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendDataRequest_descriptor_, &SendDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendDataResponse_descriptor_, &SendDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitializeRequest_descriptor_, &InitializeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitializeResponse_descriptor_, &InitializeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShutdownPrepareRequest_descriptor_, &ShutdownPrepareRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShutdownPrepareResponse_descriptor_, &ShutdownPrepareResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShutdownRequest_descriptor_, &ShutdownRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShutdownResponse_descriptor_, &ShutdownResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartbeatRequest_descriptor_, &HeartbeatRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartbeatResponse_descriptor_, &HeartbeatResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnevictDataRequest_descriptor_, &UnevictDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnevictDataResponse_descriptor_, &UnevictDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeSyncRequest_descriptor_, &TimeSyncRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeSyncResponse_descriptor_, &TimeSyncResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryPlanExecRequest_descriptor_, &QueryPlanExecRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryPlanExecResponse_descriptor_, &QueryPlanExecResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_abstract_5fservice_2eproto() {
  delete WorkFragment::default_instance_;
  delete WorkFragment_reflection_;
  delete WorkResult::default_instance_;
  delete WorkResult_reflection_;
  delete QueryEstimate::default_instance_;
  delete QueryEstimate_reflection_;
  delete TransactionInitRequest::default_instance_;
  delete TransactionInitRequest_reflection_;
  delete TransactionInitResponse::default_instance_;
  delete TransactionInitResponse_reflection_;
  delete TransactionWorkRequest::default_instance_;
  delete TransactionWorkRequest_reflection_;
  delete TransactionWorkResponse::default_instance_;
  delete TransactionWorkResponse_reflection_;
  delete TransactionPrefetchResult::default_instance_;
  delete TransactionPrefetchResult_reflection_;
  delete TransactionPrefetchAcknowledgement::default_instance_;
  delete TransactionPrefetchAcknowledgement_reflection_;
  delete TransactionMapRequest::default_instance_;
  delete TransactionMapRequest_reflection_;
  delete TransactionMapResponse::default_instance_;
  delete TransactionMapResponse_reflection_;
  delete TransactionReduceRequest::default_instance_;
  delete TransactionReduceRequest_reflection_;
  delete TransactionReduceResponse::default_instance_;
  delete TransactionReduceResponse_reflection_;
  delete TransactionReduceResponse_ReduceResult::default_instance_;
  delete TransactionReduceResponse_ReduceResult_reflection_;
  delete TransactionPrepareRequest::default_instance_;
  delete TransactionPrepareRequest_reflection_;
  delete TransactionPrepareResponse::default_instance_;
  delete TransactionPrepareResponse_reflection_;
  delete TransactionFinishRequest::default_instance_;
  delete TransactionFinishRequest_reflection_;
  delete TransactionFinishResponse::default_instance_;
  delete TransactionFinishResponse_reflection_;
  delete TransactionRedirectRequest::default_instance_;
  delete TransactionRedirectRequest_reflection_;
  delete TransactionRedirectResponse::default_instance_;
  delete TransactionRedirectResponse_reflection_;
  delete TransactionDebugRequest::default_instance_;
  delete TransactionDebugRequest_reflection_;
  delete TransactionDebugResponse::default_instance_;
  delete TransactionDebugResponse_reflection_;
  delete SendDataRequest::default_instance_;
  delete SendDataRequest_reflection_;
  delete SendDataResponse::default_instance_;
  delete SendDataResponse_reflection_;
  delete InitializeRequest::default_instance_;
  delete InitializeRequest_reflection_;
  delete InitializeResponse::default_instance_;
  delete InitializeResponse_reflection_;
  delete ShutdownPrepareRequest::default_instance_;
  delete ShutdownPrepareRequest_reflection_;
  delete ShutdownPrepareResponse::default_instance_;
  delete ShutdownPrepareResponse_reflection_;
  delete ShutdownRequest::default_instance_;
  delete ShutdownRequest_reflection_;
  delete ShutdownResponse::default_instance_;
  delete ShutdownResponse_reflection_;
  delete HeartbeatRequest::default_instance_;
  delete HeartbeatRequest_reflection_;
  delete HeartbeatResponse::default_instance_;
  delete HeartbeatResponse_reflection_;
  delete UnevictDataRequest::default_instance_;
  delete UnevictDataRequest_reflection_;
  delete UnevictDataResponse::default_instance_;
  delete UnevictDataResponse_reflection_;
  delete TimeSyncRequest::default_instance_;
  delete TimeSyncRequest_reflection_;
  delete TimeSyncResponse::default_instance_;
  delete TimeSyncResponse_reflection_;
  delete QueryPlanExecRequest::default_instance_;
  delete QueryPlanExecRequest_reflection_;
  delete QueryPlanExecResponse::default_instance_;
  delete QueryPlanExecResponse_reflection_;
}

void protobuf_AddDesc_abstract_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026abstract_service.proto\022\022peloton.networ"
    "king\"\322\002\n\014WorkFragment\022\024\n\014partition_id\030\001 "
    "\002(\005\022\027\n\013fragment_id\030\002 \003(\005B\002\020\001\022\030\n\014input_de"
    "p_id\030\003 \003(\005B\002\020\001\022\031\n\routput_dep_id\030\004 \003(\005B\002\020"
    "\001\022\027\n\013param_index\030\005 \003(\005B\002\020\001\022\030\n\014stmt_count"
    "er\030\006 \003(\005B\002\020\001\022\026\n\nstmt_index\030\007 \003(\005B\002\020\001\022\027\n\013"
    "stmt_ignore\030\010 \003(\010B\002\020\001\022\021\n\tread_only\030\t \002(\010"
    "\022\032\n\013needs_input\030\n \001(\010:\005false\022\034\n\rlast_fra"
    "gment\030\013 \001(\010:\005false\022\027\n\010prefetch\030\014 \001(\010:\005fa"
    "lse\022\024\n\005force\030\r \001(\010:\005false\"\203\001\n\nWorkResult"
    "\022\024\n\014partition_id\030\001 \002(\005\022\022\n\006dep_id\030\002 \003(\005B\002"
    "\020\001\022\020\n\010dep_data\030\003 \003(\014\022*\n\006status\030\004 \002(\0162\032.p"
    "eloton.networking.Status\022\r\n\005error\030\005 \001(\014\""
    "W\n\rQueryEstimate\022\024\n\010stmt_ids\030\001 \003(\005B\002\020\001\022\031"
    "\n\rstmt_counters\030\002 \003(\005B\002\020\001\022\025\n\rtime_estima"
    "te\030\003 \001(\005\"\377\001\n\026TransactionInitRequest\022\033\n\023l"
    "ast_transaction_id\030\001 \001(\003\022\026\n\016transaction_"
    "id\030\002 \002(\003\022\026\n\016base_partition\030\003 \002(\005\022\024\n\014proc"
    "edure_id\030\004 \002(\005\022\026\n\npartitions\030\005 \003(\005B\002\020\001\022\023"
    "\n\013proc_params\030\006 \001(\014\022<\n\022prefetch_fragment"
    "s\030\007 \003(\0132 .peloton.networking.WorkFragmen"
    "t\022\027\n\017prefetch_params\030\010 \003(\014\"\256\001\n\027Transacti"
    "onInitResponse\022\026\n\016transaction_id\030\001 \002(\003\022\026"
    "\n\npartitions\030\002 \003(\005B\002\020\001\022*\n\006status\030\003 \002(\0162\032"
    ".peloton.networking.Status\022\030\n\020reject_par"
    "tition\030\004 \001(\005\022\035\n\025reject_transaction_id\030\005 "
    "\001(\003\"\247\002\n\026TransactionWorkRequest\022\033\n\023last_t"
    "ransaction_id\030\001 \001(\003\022\026\n\016transaction_id\030\002 "
    "\002(\003\022\030\n\020source_partition\030\003 \002(\005\0223\n\tfragmen"
    "ts\030\004 \003(\0132 .peloton.networking.WorkFragme"
    "nt\022\024\n\014procedure_id\030\005 \002(\005\022\016\n\006params\030\006 \003(\014"
    "\022\033\n\017attached_dep_id\030\007 \003(\005B\002\020\001\022\025\n\rattache"
    "d_data\030\010 \003(\014\022\032\n\016done_partition\030\t \003(\005B\002\020\001"
    "\022\023\n\013proc_params\030\n \001(\014\"\216\001\n\027TransactionWor"
    "kResponse\022\026\n\016transaction_id\030\001 \002(\003\022/\n\007res"
    "ults\030\002 \003(\0132\036.peloton.networking.WorkResu"
    "lt\022*\n\006status\030\003 \002(\0162\032.peloton.networking."
    "Status\"\221\002\n\031TransactionPrefetchResult\022\033\n\023"
    "last_transaction_id\030\001 \001(\003\022\026\n\016transaction"
    "_id\030\002 \002(\003\022\030\n\020source_partition\030\003 \002(\005\022.\n\006r"
    "esult\030\004 \002(\0132\036.peloton.networking.WorkRes"
    "ult\022*\n\006status\030\005 \002(\0162\032.peloton.networking"
    ".Status\022\030\n\014stmt_counter\030\006 \003(\005B\002\020\001\022\027\n\013fra"
    "gment_id\030\007 \003(\005B\002\020\001\022\026\n\nparam_hash\030\010 \003(\005B\002"
    "\020\001\"V\n\"TransactionPrefetchAcknowledgement"
    "\022\026\n\016transaction_id\030\001 \002(\003\022\030\n\020target_parti"
    "tion\030\002 \002(\005\"\241\001\n\025TransactionMapRequest\022\033\n\023"
    "last_transaction_id\030\001 \001(\003\022\026\n\016transaction"
    "_id\030\002 \002(\003\022\025\n\rclient_handle\030\003 \002(\003\022\026\n\016base"
    "_partition\030\004 \002(\005\022\024\n\014procedure_id\030\005 \002(\005\022\016"
    "\n\006params\030\006 \002(\014\"t\n\026TransactionMapResponse"
    "\022\026\n\016transaction_id\030\001 \002(\003\022\026\n\npartitions\030\002"
    " \003(\005B\002\020\001\022*\n\006status\030\003 \002(\0162\032.peloton.netwo"
    "rking.Status\"2\n\030TransactionReduceRequest"
    "\022\026\n\016transaction_id\030\001 \002(\003\"\242\002\n\031Transaction"
    "ReduceResponse\022\026\n\016transaction_id\030\001 \002(\003\022K"
    "\n\007results\030\002 \003(\0132:.peloton.networking.Tra"
    "nsactionReduceResponse.ReduceResult\022*\n\006s"
    "tatus\030\003 \002(\0162\032.peloton.networking.Status\032"
    "t\n\014ReduceResult\022\024\n\014partition_id\030\001 \002(\005\022\014\n"
    "\004data\030\002 \002(\014\022*\n\006status\030\003 \002(\0162\032.peloton.ne"
    "tworking.Status\022\024\n\005error\030\004 \001(\010:\005false\"K\n"
    "\031TransactionPrepareRequest\022\026\n\016transactio"
    "n_id\030\001 \002(\003\022\026\n\npartitions\030\002 \003(\005B\002\020\001\"x\n\032Tr"
    "ansactionPrepareResponse\022\026\n\016transaction_"
    "id\030\001 \002(\003\022\026\n\npartitions\030\002 \003(\005B\002\020\001\022*\n\006stat"
    "us\030\003 \002(\0162\032.peloton.networking.Status\"v\n\030"
    "TransactionFinishRequest\022\026\n\016transaction_"
    "id\030\001 \002(\003\022\026\n\npartitions\030\002 \003(\005B\002\020\001\022*\n\006stat"
    "us\030\003 \002(\0162\032.peloton.networking.Status\"K\n\031"
    "TransactionFinishResponse\022\026\n\016transaction"
    "_id\030\001 \002(\003\022\026\n\npartitions\030\002 \003(\005B\002\020\001\"T\n\032Tra"
    "nsactionRedirectRequest\022\023\n\013sender_site\030\001"
    " \002(\005\022\014\n\004work\030\002 \002(\014\022\023\n\013orig_txn_id\030\003 \001(\003\""
    "B\n\033TransactionRedirectResponse\022\023\n\013sender"
    "_site\030\001 \002(\005\022\016\n\006output\030\002 \002(\014\"F\n\027Transacti"
    "onDebugRequest\022\023\n\013sender_site\030\001 \002(\005\022\026\n\016t"
    "ransaction_id\030\002 \002(\003\"j\n\030TransactionDebugR"
    "esponse\022\023\n\013sender_site\030\001 \002(\005\022*\n\006status\030\002"
    " \002(\0162\032.peloton.networking.Status\022\r\n\005debu"
    "g\030\003 \002(\t\"`\n\017SendDataRequest\022\026\n\016transactio"
    "n_id\030\001 \002(\003\022\023\n\013sender_site\030\002 \002(\005\022\022\n\006dep_i"
    "d\030\003 \003(\005B\002\020\001\022\014\n\004data\030\004 \003(\014\"\203\001\n\020SendDataRe"
    "sponse\022\026\n\016transaction_id\030\001 \002(\003\022\026\n\npartit"
    "ions\030\002 \003(\005B\002\020\001\022\023\n\013sender_site\030\003 \002(\005\022*\n\006s"
    "tatus\030\004 \002(\0162\032.peloton.networking.Status\""
    "=\n\021InitializeRequest\022\023\n\013sender_site\030\001 \002("
    "\005\022\023\n\013instance_id\030\002 \002(\003\"U\n\022InitializeResp"
    "onse\022\023\n\013sender_site\030\001 \002(\005\022*\n\006status\030\002 \002("
    "\0162\032.peloton.networking.Status\"<\n\026Shutdow"
    "nPrepareRequest\022\023\n\013sender_site\030\001 \002(\005\022\r\n\005"
    "error\030\002 \001(\014\".\n\027ShutdownPrepareResponse\022\023"
    "\n\013sender_site\030\001 \002(\005\";\n\017ShutdownRequest\022\023"
    "\n\013sender_site\030\001 \002(\005\022\023\n\013exit_status\030\002 \002(\005"
    "\"\'\n\020ShutdownResponse\022\023\n\013sender_site\030\001 \002("
    "\005\"D\n\020HeartbeatRequest\022\023\n\013sender_site\030\001 \002"
    "(\005\022\033\n\023last_transaction_id\030\002 \002(\003\"T\n\021Heart"
    "beatResponse\022\023\n\013sender_site\030\001 \002(\005\022*\n\006sta"
    "tus\030\002 \002(\0162\032.peloton.networking.Status\"\267\001"
    "\n\022UnevictDataRequest\022\023\n\013sender_site\030\001 \002("
    "\005\022\026\n\016transaction_id\030\002 \002(\003\022\024\n\014partition_i"
    "d\030\003 \002(\005\022\020\n\010table_id\030\004 \002(\005\022\025\n\tblock_ids\030\005"
    " \003(\005B\002\020\001\022\031\n\rtuple_offsets\030\006 \003(\005B\002\020\001\022\032\n\022n"
    "ew_transaction_id\030\007 \002(\003\"\204\001\n\023UnevictDataR"
    "esponse\022\023\n\013sender_site\030\001 \002(\005\022*\n\006status\030\002"
    " \002(\0162\032.peloton.networking.Status\022\026\n\016tran"
    "saction_id\030\003 \002(\003\022\024\n\014partition_id\030\004 \002(\005\"4"
    "\n\017TimeSyncRequest\022\023\n\013sender_site\030\001 \002(\005\022\014"
    "\n\004t0_s\030\002 \002(\003\"Q\n\020TimeSyncResponse\022\023\n\013send"
    "er_site\030\001 \002(\005\022\014\n\004t0_s\030\002 \002(\003\022\014\n\004t0_r\030\003 \002("
    "\003\022\014\n\004t1_s\030\004 \002(\003\"^\n\024QueryPlanExecRequest\022"
    "\021\n\tplan_type\030\001 \002(\005\022\021\n\tparam_num\030\002 \001(\005\022\022\n"
    "\nparam_list\030\003 \001(\014\022\014\n\004plan\030\004 \002(\014\"P\n\025Query"
    "PlanExecResponse\022\023\n\013tuple_count\030\001 \002(\005\022\022\n"
    "\ntile_count\030\002 \001(\005\022\016\n\006result\030\003 \003(\014*\320\001\n\006St"
    "atus\022\006\n\002OK\020\000\022\016\n\nABORT_USER\020\001\022\022\n\016ABORT_GR"
    "ACEFUL\020\002\022\024\n\020ABORT_UNEXPECTED\020\003\022\031\n\025ABORT_"
    "CONNECTION_LOST\020\004\022\024\n\020ABORT_MISPREDICT\020\005\022"
    "\021\n\rABORT_RESTART\020\006\022\020\n\014ABORT_REJECT\020\007\022\027\n\023"
    "ABORT_EVICTEDACCESS\020\010\022\025\n\021ABORT_SPECULATI"
    "VE\020\t2\201\016\n\026AbstractPelotonService\022j\n\017Trans"
    "actionInit\022*.peloton.networking.Transact"
    "ionInitRequest\032+.peloton.networking.Tran"
    "sactionInitResponse\022j\n\017TransactionWork\022*"
    ".peloton.networking.TransactionWorkReque"
    "st\032+.peloton.networking.TransactionWorkR"
    "esponse\022|\n\023TransactionPrefetch\022-.peloton"
    ".networking.TransactionPrefetchResult\0326."
    "peloton.networking.TransactionPrefetchAc"
    "knowledgement\022g\n\016TransactionMap\022).peloto"
    "n.networking.TransactionMapRequest\032*.pel"
    "oton.networking.TransactionMapResponse\022p"
    "\n\021TransactionReduce\022,.peloton.networking"
    ".TransactionReduceRequest\032-.peloton.netw"
    "orking.TransactionReduceResponse\022s\n\022Tran"
    "sactionPrepare\022-.peloton.networking.Tran"
    "sactionPrepareRequest\032..peloton.networki"
    "ng.TransactionPrepareResponse\022p\n\021Transac"
    "tionFinish\022,.peloton.networking.Transact"
    "ionFinishRequest\032-.peloton.networking.Tr"
    "ansactionFinishResponse\022v\n\023TransactionRe"
    "direct\022..peloton.networking.TransactionR"
    "edirectRequest\032/.peloton.networking.Tran"
    "sactionRedirectResponse\022m\n\020TransactionDe"
    "bug\022+.peloton.networking.TransactionDebu"
    "gRequest\032,.peloton.networking.Transactio"
    "nDebugResponse\022U\n\010SendData\022#.peloton.net"
    "working.SendDataRequest\032$.peloton.networ"
    "king.SendDataResponse\022[\n\nInitialize\022%.pe"
    "loton.networking.InitializeRequest\032&.pel"
    "oton.networking.InitializeResponse\022j\n\017Sh"
    "utdownPrepare\022*.peloton.networking.Shutd"
    "ownPrepareRequest\032+.peloton.networking.S"
    "hutdownPrepareResponse\022U\n\010Shutdown\022#.pel"
    "oton.networking.ShutdownRequest\032$.peloto"
    "n.networking.ShutdownResponse\022X\n\tHeartbe"
    "at\022$.peloton.networking.HeartbeatRequest"
    "\032%.peloton.networking.HeartbeatResponse\022"
    "^\n\013UnevictData\022&.peloton.networking.Unev"
    "ictDataRequest\032\'.peloton.networking.Unev"
    "ictDataResponse\022U\n\010TimeSync\022#.peloton.ne"
    "tworking.TimeSyncRequest\032$.peloton.netwo"
    "rking.TimeSyncResponse\022`\n\tQueryPlan\022(.pe"
    "loton.networking.QueryPlanExecRequest\032)."
    "peloton.networking.QueryPlanExecResponse"
    "B\003\200\001\001", 6605);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "abstract_service.proto", &protobuf_RegisterTypes);
  WorkFragment::default_instance_ = new WorkFragment();
  WorkResult::default_instance_ = new WorkResult();
  QueryEstimate::default_instance_ = new QueryEstimate();
  TransactionInitRequest::default_instance_ = new TransactionInitRequest();
  TransactionInitResponse::default_instance_ = new TransactionInitResponse();
  TransactionWorkRequest::default_instance_ = new TransactionWorkRequest();
  TransactionWorkResponse::default_instance_ = new TransactionWorkResponse();
  TransactionPrefetchResult::default_instance_ = new TransactionPrefetchResult();
  TransactionPrefetchAcknowledgement::default_instance_ = new TransactionPrefetchAcknowledgement();
  TransactionMapRequest::default_instance_ = new TransactionMapRequest();
  TransactionMapResponse::default_instance_ = new TransactionMapResponse();
  TransactionReduceRequest::default_instance_ = new TransactionReduceRequest();
  TransactionReduceResponse::default_instance_ = new TransactionReduceResponse();
  TransactionReduceResponse_ReduceResult::default_instance_ = new TransactionReduceResponse_ReduceResult();
  TransactionPrepareRequest::default_instance_ = new TransactionPrepareRequest();
  TransactionPrepareResponse::default_instance_ = new TransactionPrepareResponse();
  TransactionFinishRequest::default_instance_ = new TransactionFinishRequest();
  TransactionFinishResponse::default_instance_ = new TransactionFinishResponse();
  TransactionRedirectRequest::default_instance_ = new TransactionRedirectRequest();
  TransactionRedirectResponse::default_instance_ = new TransactionRedirectResponse();
  TransactionDebugRequest::default_instance_ = new TransactionDebugRequest();
  TransactionDebugResponse::default_instance_ = new TransactionDebugResponse();
  SendDataRequest::default_instance_ = new SendDataRequest();
  SendDataResponse::default_instance_ = new SendDataResponse();
  InitializeRequest::default_instance_ = new InitializeRequest();
  InitializeResponse::default_instance_ = new InitializeResponse();
  ShutdownPrepareRequest::default_instance_ = new ShutdownPrepareRequest();
  ShutdownPrepareResponse::default_instance_ = new ShutdownPrepareResponse();
  ShutdownRequest::default_instance_ = new ShutdownRequest();
  ShutdownResponse::default_instance_ = new ShutdownResponse();
  HeartbeatRequest::default_instance_ = new HeartbeatRequest();
  HeartbeatResponse::default_instance_ = new HeartbeatResponse();
  UnevictDataRequest::default_instance_ = new UnevictDataRequest();
  UnevictDataResponse::default_instance_ = new UnevictDataResponse();
  TimeSyncRequest::default_instance_ = new TimeSyncRequest();
  TimeSyncResponse::default_instance_ = new TimeSyncResponse();
  QueryPlanExecRequest::default_instance_ = new QueryPlanExecRequest();
  QueryPlanExecResponse::default_instance_ = new QueryPlanExecResponse();
  WorkFragment::default_instance_->InitAsDefaultInstance();
  WorkResult::default_instance_->InitAsDefaultInstance();
  QueryEstimate::default_instance_->InitAsDefaultInstance();
  TransactionInitRequest::default_instance_->InitAsDefaultInstance();
  TransactionInitResponse::default_instance_->InitAsDefaultInstance();
  TransactionWorkRequest::default_instance_->InitAsDefaultInstance();
  TransactionWorkResponse::default_instance_->InitAsDefaultInstance();
  TransactionPrefetchResult::default_instance_->InitAsDefaultInstance();
  TransactionPrefetchAcknowledgement::default_instance_->InitAsDefaultInstance();
  TransactionMapRequest::default_instance_->InitAsDefaultInstance();
  TransactionMapResponse::default_instance_->InitAsDefaultInstance();
  TransactionReduceRequest::default_instance_->InitAsDefaultInstance();
  TransactionReduceResponse::default_instance_->InitAsDefaultInstance();
  TransactionReduceResponse_ReduceResult::default_instance_->InitAsDefaultInstance();
  TransactionPrepareRequest::default_instance_->InitAsDefaultInstance();
  TransactionPrepareResponse::default_instance_->InitAsDefaultInstance();
  TransactionFinishRequest::default_instance_->InitAsDefaultInstance();
  TransactionFinishResponse::default_instance_->InitAsDefaultInstance();
  TransactionRedirectRequest::default_instance_->InitAsDefaultInstance();
  TransactionRedirectResponse::default_instance_->InitAsDefaultInstance();
  TransactionDebugRequest::default_instance_->InitAsDefaultInstance();
  TransactionDebugResponse::default_instance_->InitAsDefaultInstance();
  SendDataRequest::default_instance_->InitAsDefaultInstance();
  SendDataResponse::default_instance_->InitAsDefaultInstance();
  InitializeRequest::default_instance_->InitAsDefaultInstance();
  InitializeResponse::default_instance_->InitAsDefaultInstance();
  ShutdownPrepareRequest::default_instance_->InitAsDefaultInstance();
  ShutdownPrepareResponse::default_instance_->InitAsDefaultInstance();
  ShutdownRequest::default_instance_->InitAsDefaultInstance();
  ShutdownResponse::default_instance_->InitAsDefaultInstance();
  HeartbeatRequest::default_instance_->InitAsDefaultInstance();
  HeartbeatResponse::default_instance_->InitAsDefaultInstance();
  UnevictDataRequest::default_instance_->InitAsDefaultInstance();
  UnevictDataResponse::default_instance_->InitAsDefaultInstance();
  TimeSyncRequest::default_instance_->InitAsDefaultInstance();
  TimeSyncResponse::default_instance_->InitAsDefaultInstance();
  QueryPlanExecRequest::default_instance_->InitAsDefaultInstance();
  QueryPlanExecResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_abstract_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_abstract_5fservice_2eproto {
  StaticDescriptorInitializer_abstract_5fservice_2eproto() {
    protobuf_AddDesc_abstract_5fservice_2eproto();
  }
} static_descriptor_initializer_abstract_5fservice_2eproto_;
const ::google::protobuf::EnumDescriptor* Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}
bool Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int WorkFragment::kPartitionIdFieldNumber;
const int WorkFragment::kFragmentIdFieldNumber;
const int WorkFragment::kInputDepIdFieldNumber;
const int WorkFragment::kOutputDepIdFieldNumber;
const int WorkFragment::kParamIndexFieldNumber;
const int WorkFragment::kStmtCounterFieldNumber;
const int WorkFragment::kStmtIndexFieldNumber;
const int WorkFragment::kStmtIgnoreFieldNumber;
const int WorkFragment::kReadOnlyFieldNumber;
const int WorkFragment::kNeedsInputFieldNumber;
const int WorkFragment::kLastFragmentFieldNumber;
const int WorkFragment::kPrefetchFieldNumber;
const int WorkFragment::kForceFieldNumber;
#endif  // !_MSC_VER

WorkFragment::WorkFragment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkFragment::InitAsDefaultInstance() {
}

WorkFragment::WorkFragment(const WorkFragment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkFragment::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = 0;
  read_only_ = false;
  needs_input_ = false;
  last_fragment_ = false;
  prefetch_ = false;
  force_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkFragment::~WorkFragment() {
  SharedDtor();
}

void WorkFragment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorkFragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkFragment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkFragment_descriptor_;
}

const WorkFragment& WorkFragment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

WorkFragment* WorkFragment::default_instance_ = NULL;

WorkFragment* WorkFragment::New() const {
  return new WorkFragment;
}

void WorkFragment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    partition_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    read_only_ = false;
    needs_input_ = false;
    last_fragment_ = false;
    prefetch_ = false;
    force_ = false;
  }
  fragment_id_.Clear();
  input_dep_id_.Clear();
  output_dep_id_.Clear();
  param_index_.Clear();
  stmt_counter_.Clear();
  stmt_index_.Clear();
  stmt_ignore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkFragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 partition_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_id_)));
          set_has_partition_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fragment_id;
        break;
      }

      // repeated int32 fragment_id = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fragment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fragment_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_fragment_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_input_dep_id;
        break;
      }

      // repeated int32 input_dep_id = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input_dep_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_input_dep_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_input_dep_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_output_dep_id;
        break;
      }

      // repeated int32 output_dep_id = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output_dep_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_output_dep_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34, input, this->mutable_output_dep_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_param_index;
        break;
      }

      // repeated int32 param_index = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_param_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42, input, this->mutable_param_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stmt_counter;
        break;
      }

      // repeated int32 stmt_counter = 6 [packed = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stmt_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stmt_counter())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50, input, this->mutable_stmt_counter())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_stmt_index;
        break;
      }

      // repeated int32 stmt_index = 7 [packed = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stmt_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stmt_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58, input, this->mutable_stmt_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_stmt_ignore;
        break;
      }

      // repeated bool stmt_ignore = 8 [packed = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stmt_ignore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_stmt_ignore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 66, input, this->mutable_stmt_ignore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_read_only;
        break;
      }

      // required bool read_only = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_only_)));
          set_has_read_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_needs_input;
        break;
      }

      // optional bool needs_input = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needs_input:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_input_)));
          set_has_needs_input();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_last_fragment;
        break;
      }

      // optional bool last_fragment = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_fragment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_fragment_)));
          set_has_last_fragment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_prefetch;
        break;
      }

      // optional bool prefetch = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prefetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prefetch_)));
          set_has_prefetch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_force;
        break;
      }

      // optional bool force = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkFragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->partition_id(), output);
  }

  // repeated int32 fragment_id = 2 [packed = true];
  if (this->fragment_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_fragment_id_cached_byte_size_);
  }
  for (int i = 0; i < this->fragment_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->fragment_id(i), output);
  }

  // repeated int32 input_dep_id = 3 [packed = true];
  if (this->input_dep_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_input_dep_id_cached_byte_size_);
  }
  for (int i = 0; i < this->input_dep_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->input_dep_id(i), output);
  }

  // repeated int32 output_dep_id = 4 [packed = true];
  if (this->output_dep_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_output_dep_id_cached_byte_size_);
  }
  for (int i = 0; i < this->output_dep_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->output_dep_id(i), output);
  }

  // repeated int32 param_index = 5 [packed = true];
  if (this->param_index_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_param_index_cached_byte_size_);
  }
  for (int i = 0; i < this->param_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->param_index(i), output);
  }

  // repeated int32 stmt_counter = 6 [packed = true];
  if (this->stmt_counter_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_stmt_counter_cached_byte_size_);
  }
  for (int i = 0; i < this->stmt_counter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->stmt_counter(i), output);
  }

  // repeated int32 stmt_index = 7 [packed = true];
  if (this->stmt_index_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_stmt_index_cached_byte_size_);
  }
  for (int i = 0; i < this->stmt_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->stmt_index(i), output);
  }

  // repeated bool stmt_ignore = 8 [packed = true];
  if (this->stmt_ignore_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_stmt_ignore_cached_byte_size_);
  }
  for (int i = 0; i < this->stmt_ignore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->stmt_ignore(i), output);
  }

  // required bool read_only = 9;
  if (has_read_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->read_only(), output);
  }

  // optional bool needs_input = 10 [default = false];
  if (has_needs_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->needs_input(), output);
  }

  // optional bool last_fragment = 11 [default = false];
  if (has_last_fragment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->last_fragment(), output);
  }

  // optional bool prefetch = 12 [default = false];
  if (has_prefetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->prefetch(), output);
  }

  // optional bool force = 13 [default = false];
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->force(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkFragment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->partition_id(), target);
  }

  // repeated int32 fragment_id = 2 [packed = true];
  if (this->fragment_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _fragment_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->fragment_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->fragment_id(i), target);
  }

  // repeated int32 input_dep_id = 3 [packed = true];
  if (this->input_dep_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _input_dep_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->input_dep_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->input_dep_id(i), target);
  }

  // repeated int32 output_dep_id = 4 [packed = true];
  if (this->output_dep_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _output_dep_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->output_dep_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->output_dep_id(i), target);
  }

  // repeated int32 param_index = 5 [packed = true];
  if (this->param_index_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _param_index_cached_byte_size_, target);
  }
  for (int i = 0; i < this->param_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->param_index(i), target);
  }

  // repeated int32 stmt_counter = 6 [packed = true];
  if (this->stmt_counter_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _stmt_counter_cached_byte_size_, target);
  }
  for (int i = 0; i < this->stmt_counter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->stmt_counter(i), target);
  }

  // repeated int32 stmt_index = 7 [packed = true];
  if (this->stmt_index_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _stmt_index_cached_byte_size_, target);
  }
  for (int i = 0; i < this->stmt_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->stmt_index(i), target);
  }

  // repeated bool stmt_ignore = 8 [packed = true];
  if (this->stmt_ignore_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _stmt_ignore_cached_byte_size_, target);
  }
  for (int i = 0; i < this->stmt_ignore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->stmt_ignore(i), target);
  }

  // required bool read_only = 9;
  if (has_read_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->read_only(), target);
  }

  // optional bool needs_input = 10 [default = false];
  if (has_needs_input()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->needs_input(), target);
  }

  // optional bool last_fragment = 11 [default = false];
  if (has_last_fragment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->last_fragment(), target);
  }

  // optional bool prefetch = 12 [default = false];
  if (has_prefetch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->prefetch(), target);
  }

  // optional bool force = 13 [default = false];
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->force(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkFragment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partition_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool read_only = 9;
    if (has_read_only()) {
      total_size += 1 + 1;
    }

    // optional bool needs_input = 10 [default = false];
    if (has_needs_input()) {
      total_size += 1 + 1;
    }

    // optional bool last_fragment = 11 [default = false];
    if (has_last_fragment()) {
      total_size += 1 + 1;
    }

    // optional bool prefetch = 12 [default = false];
    if (has_prefetch()) {
      total_size += 1 + 1;
    }

    // optional bool force = 13 [default = false];
    if (has_force()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 fragment_id = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->fragment_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fragment_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fragment_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 input_dep_id = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->input_dep_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->input_dep_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _input_dep_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 output_dep_id = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->output_dep_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->output_dep_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _output_dep_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 param_index = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->param_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->param_index(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _param_index_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 stmt_counter = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->stmt_counter_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stmt_counter(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stmt_counter_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 stmt_index = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->stmt_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stmt_index(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stmt_index_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool stmt_ignore = 8 [packed = true];
  {
    int data_size = 0;
    data_size = 1 * this->stmt_ignore_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stmt_ignore_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkFragment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkFragment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkFragment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkFragment::MergeFrom(const WorkFragment& from) {
  GOOGLE_CHECK_NE(&from, this);
  fragment_id_.MergeFrom(from.fragment_id_);
  input_dep_id_.MergeFrom(from.input_dep_id_);
  output_dep_id_.MergeFrom(from.output_dep_id_);
  param_index_.MergeFrom(from.param_index_);
  stmt_counter_.MergeFrom(from.stmt_counter_);
  stmt_index_.MergeFrom(from.stmt_index_);
  stmt_ignore_.MergeFrom(from.stmt_ignore_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      set_partition_id(from.partition_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_read_only()) {
      set_read_only(from.read_only());
    }
    if (from.has_needs_input()) {
      set_needs_input(from.needs_input());
    }
    if (from.has_last_fragment()) {
      set_last_fragment(from.last_fragment());
    }
    if (from.has_prefetch()) {
      set_prefetch(from.prefetch());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkFragment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkFragment::CopyFrom(const WorkFragment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkFragment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000101) != 0x00000101) return false;

  return true;
}

void WorkFragment::Swap(WorkFragment* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    fragment_id_.Swap(&other->fragment_id_);
    input_dep_id_.Swap(&other->input_dep_id_);
    output_dep_id_.Swap(&other->output_dep_id_);
    param_index_.Swap(&other->param_index_);
    stmt_counter_.Swap(&other->stmt_counter_);
    stmt_index_.Swap(&other->stmt_index_);
    stmt_ignore_.Swap(&other->stmt_ignore_);
    std::swap(read_only_, other->read_only_);
    std::swap(needs_input_, other->needs_input_);
    std::swap(last_fragment_, other->last_fragment_);
    std::swap(prefetch_, other->prefetch_);
    std::swap(force_, other->force_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkFragment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkFragment_descriptor_;
  metadata.reflection = WorkFragment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkResult::kPartitionIdFieldNumber;
const int WorkResult::kDepIdFieldNumber;
const int WorkResult::kDepDataFieldNumber;
const int WorkResult::kStatusFieldNumber;
const int WorkResult::kErrorFieldNumber;
#endif  // !_MSC_VER

WorkResult::WorkResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkResult::InitAsDefaultInstance() {
}

WorkResult::WorkResult(const WorkResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkResult::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = 0;
  status_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkResult::~WorkResult() {
  SharedDtor();
}

void WorkResult::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void WorkResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkResult_descriptor_;
}

const WorkResult& WorkResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

WorkResult* WorkResult::default_instance_ = NULL;

WorkResult* WorkResult::New() const {
  return new WorkResult;
}

void WorkResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    partition_id_ = 0;
    status_ = 0;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
  }
  dep_id_.Clear();
  dep_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 partition_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_id_)));
          set_has_partition_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dep_id;
        break;
      }

      // repeated int32 dep_id = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dep_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dep_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_dep_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dep_data;
        break;
      }

      // repeated bytes dep_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dep_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_dep_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dep_data;
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required .peloton.networking.Status status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_error;
        break;
      }

      // optional bytes error = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->partition_id(), output);
  }

  // repeated int32 dep_id = 2 [packed = true];
  if (this->dep_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dep_id_cached_byte_size_);
  }
  for (int i = 0; i < this->dep_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->dep_id(i), output);
  }

  // repeated bytes dep_data = 3;
  for (int i = 0; i < this->dep_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->dep_data(i), output);
  }

  // required .peloton.networking.Status status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // optional bytes error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->partition_id(), target);
  }

  // repeated int32 dep_id = 2 [packed = true];
  if (this->dep_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dep_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dep_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->dep_id(i), target);
  }

  // repeated bytes dep_data = 3;
  for (int i = 0; i < this->dep_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->dep_data(i), target);
  }

  // required .peloton.networking.Status status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // optional bytes error = 5;
  if (has_error()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partition_id());
    }

    // required .peloton.networking.Status status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional bytes error = 5;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->error());
    }

  }
  // repeated int32 dep_id = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->dep_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dep_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dep_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bytes dep_data = 3;
  total_size += 1 * this->dep_data_size();
  for (int i = 0; i < this->dep_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->dep_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkResult::MergeFrom(const WorkResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  dep_id_.MergeFrom(from.dep_id_);
  dep_data_.MergeFrom(from.dep_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      set_partition_id(from.partition_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkResult::CopyFrom(const WorkResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void WorkResult::Swap(WorkResult* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    dep_id_.Swap(&other->dep_id_);
    dep_data_.Swap(&other->dep_data_);
    std::swap(status_, other->status_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkResult_descriptor_;
  metadata.reflection = WorkResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryEstimate::kStmtIdsFieldNumber;
const int QueryEstimate::kStmtCountersFieldNumber;
const int QueryEstimate::kTimeEstimateFieldNumber;
#endif  // !_MSC_VER

QueryEstimate::QueryEstimate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryEstimate::InitAsDefaultInstance() {
}

QueryEstimate::QueryEstimate(const QueryEstimate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryEstimate::SharedCtor() {
  _cached_size_ = 0;
  time_estimate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryEstimate::~QueryEstimate() {
  SharedDtor();
}

void QueryEstimate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryEstimate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryEstimate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryEstimate_descriptor_;
}

const QueryEstimate& QueryEstimate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

QueryEstimate* QueryEstimate::default_instance_ = NULL;

QueryEstimate* QueryEstimate::New() const {
  return new QueryEstimate;
}

void QueryEstimate::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    time_estimate_ = 0;
  }
  stmt_ids_.Clear();
  stmt_counters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryEstimate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 stmt_ids = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stmt_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_stmt_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stmt_counters;
        break;
      }

      // repeated int32 stmt_counters = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stmt_counters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stmt_counters())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_stmt_counters())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_estimate;
        break;
      }

      // optional int32 time_estimate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_estimate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_estimate_)));
          set_has_time_estimate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryEstimate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 stmt_ids = 1 [packed = true];
  if (this->stmt_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_stmt_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->stmt_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->stmt_ids(i), output);
  }

  // repeated int32 stmt_counters = 2 [packed = true];
  if (this->stmt_counters_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_stmt_counters_cached_byte_size_);
  }
  for (int i = 0; i < this->stmt_counters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->stmt_counters(i), output);
  }

  // optional int32 time_estimate = 3;
  if (has_time_estimate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time_estimate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryEstimate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 stmt_ids = 1 [packed = true];
  if (this->stmt_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _stmt_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->stmt_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->stmt_ids(i), target);
  }

  // repeated int32 stmt_counters = 2 [packed = true];
  if (this->stmt_counters_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _stmt_counters_cached_byte_size_, target);
  }
  for (int i = 0; i < this->stmt_counters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->stmt_counters(i), target);
  }

  // optional int32 time_estimate = 3;
  if (has_time_estimate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time_estimate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryEstimate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 time_estimate = 3;
    if (has_time_estimate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_estimate());
    }

  }
  // repeated int32 stmt_ids = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->stmt_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stmt_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stmt_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 stmt_counters = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->stmt_counters_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stmt_counters(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stmt_counters_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryEstimate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryEstimate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryEstimate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryEstimate::MergeFrom(const QueryEstimate& from) {
  GOOGLE_CHECK_NE(&from, this);
  stmt_ids_.MergeFrom(from.stmt_ids_);
  stmt_counters_.MergeFrom(from.stmt_counters_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_time_estimate()) {
      set_time_estimate(from.time_estimate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryEstimate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryEstimate::CopyFrom(const QueryEstimate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryEstimate::IsInitialized() const {

  return true;
}

void QueryEstimate::Swap(QueryEstimate* other) {
  if (other != this) {
    stmt_ids_.Swap(&other->stmt_ids_);
    stmt_counters_.Swap(&other->stmt_counters_);
    std::swap(time_estimate_, other->time_estimate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryEstimate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryEstimate_descriptor_;
  metadata.reflection = QueryEstimate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionInitRequest::kLastTransactionIdFieldNumber;
const int TransactionInitRequest::kTransactionIdFieldNumber;
const int TransactionInitRequest::kBasePartitionFieldNumber;
const int TransactionInitRequest::kProcedureIdFieldNumber;
const int TransactionInitRequest::kPartitionsFieldNumber;
const int TransactionInitRequest::kProcParamsFieldNumber;
const int TransactionInitRequest::kPrefetchFragmentsFieldNumber;
const int TransactionInitRequest::kPrefetchParamsFieldNumber;
#endif  // !_MSC_VER

TransactionInitRequest::TransactionInitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionInitRequest::InitAsDefaultInstance() {
}

TransactionInitRequest::TransactionInitRequest(const TransactionInitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionInitRequest::SharedCtor() {
  _cached_size_ = 0;
  last_transaction_id_ = GOOGLE_LONGLONG(0);
  transaction_id_ = GOOGLE_LONGLONG(0);
  base_partition_ = 0;
  procedure_id_ = 0;
  proc_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionInitRequest::~TransactionInitRequest() {
  SharedDtor();
}

void TransactionInitRequest::SharedDtor() {
  if (proc_params_ != &::google::protobuf::internal::kEmptyString) {
    delete proc_params_;
  }
  if (this != default_instance_) {
  }
}

void TransactionInitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionInitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionInitRequest_descriptor_;
}

const TransactionInitRequest& TransactionInitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionInitRequest* TransactionInitRequest::default_instance_ = NULL;

TransactionInitRequest* TransactionInitRequest::New() const {
  return new TransactionInitRequest;
}

void TransactionInitRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_transaction_id_ = GOOGLE_LONGLONG(0);
    transaction_id_ = GOOGLE_LONGLONG(0);
    base_partition_ = 0;
    procedure_id_ = 0;
    if (has_proc_params()) {
      if (proc_params_ != &::google::protobuf::internal::kEmptyString) {
        proc_params_->clear();
      }
    }
  }
  partitions_.Clear();
  prefetch_fragments_.Clear();
  prefetch_params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionInitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_transaction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_transaction_id_)));
          set_has_last_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_transaction_id;
        break;
      }

      // required int64 transaction_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_base_partition;
        break;
      }

      // required int32 base_partition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_partition_)));
          set_has_base_partition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_procedure_id;
        break;
      }

      // required int32 procedure_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_procedure_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &procedure_id_)));
          set_has_procedure_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_partitions;
        break;
      }

      // repeated int32 partitions = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42, input, this->mutable_partitions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_proc_params;
        break;
      }

      // optional bytes proc_params = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proc_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proc_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_prefetch_fragments;
        break;
      }

      // repeated .peloton.networking.WorkFragment prefetch_fragments = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prefetch_fragments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prefetch_fragments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_prefetch_fragments;
        if (input->ExpectTag(66)) goto parse_prefetch_params;
        break;
      }

      // repeated bytes prefetch_params = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prefetch_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_prefetch_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_prefetch_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionInitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 last_transaction_id = 1;
  if (has_last_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_transaction_id(), output);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->transaction_id(), output);
  }

  // required int32 base_partition = 3;
  if (has_base_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->base_partition(), output);
  }

  // required int32 procedure_id = 4;
  if (has_procedure_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->procedure_id(), output);
  }

  // repeated int32 partitions = 5 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_partitions_cached_byte_size_);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  // optional bytes proc_params = 6;
  if (has_proc_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->proc_params(), output);
  }

  // repeated .peloton.networking.WorkFragment prefetch_fragments = 7;
  for (int i = 0; i < this->prefetch_fragments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->prefetch_fragments(i), output);
  }

  // repeated bytes prefetch_params = 8;
  for (int i = 0; i < this->prefetch_params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->prefetch_params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionInitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 last_transaction_id = 1;
  if (has_last_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_transaction_id(), target);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->transaction_id(), target);
  }

  // required int32 base_partition = 3;
  if (has_base_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->base_partition(), target);
  }

  // required int32 procedure_id = 4;
  if (has_procedure_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->procedure_id(), target);
  }

  // repeated int32 partitions = 5 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _partitions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions(i), target);
  }

  // optional bytes proc_params = 6;
  if (has_proc_params()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->proc_params(), target);
  }

  // repeated .peloton.networking.WorkFragment prefetch_fragments = 7;
  for (int i = 0; i < this->prefetch_fragments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->prefetch_fragments(i), target);
  }

  // repeated bytes prefetch_params = 8;
  for (int i = 0; i < this->prefetch_params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(8, this->prefetch_params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionInitRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 last_transaction_id = 1;
    if (has_last_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_transaction_id());
    }

    // required int64 transaction_id = 2;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transaction_id());
    }

    // required int32 base_partition = 3;
    if (has_base_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_partition());
    }

    // required int32 procedure_id = 4;
    if (has_procedure_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->procedure_id());
    }

    // optional bytes proc_params = 6;
    if (has_proc_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->proc_params());
    }

  }
  // repeated int32 partitions = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->partitions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->partitions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .peloton.networking.WorkFragment prefetch_fragments = 7;
  total_size += 1 * this->prefetch_fragments_size();
  for (int i = 0; i < this->prefetch_fragments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prefetch_fragments(i));
  }

  // repeated bytes prefetch_params = 8;
  total_size += 1 * this->prefetch_params_size();
  for (int i = 0; i < this->prefetch_params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->prefetch_params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionInitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionInitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionInitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionInitRequest::MergeFrom(const TransactionInitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  partitions_.MergeFrom(from.partitions_);
  prefetch_fragments_.MergeFrom(from.prefetch_fragments_);
  prefetch_params_.MergeFrom(from.prefetch_params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_transaction_id()) {
      set_last_transaction_id(from.last_transaction_id());
    }
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_base_partition()) {
      set_base_partition(from.base_partition());
    }
    if (from.has_procedure_id()) {
      set_procedure_id(from.procedure_id());
    }
    if (from.has_proc_params()) {
      set_proc_params(from.proc_params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionInitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionInitRequest::CopyFrom(const TransactionInitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionInitRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  for (int i = 0; i < prefetch_fragments_size(); i++) {
    if (!this->prefetch_fragments(i).IsInitialized()) return false;
  }
  return true;
}

void TransactionInitRequest::Swap(TransactionInitRequest* other) {
  if (other != this) {
    std::swap(last_transaction_id_, other->last_transaction_id_);
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(base_partition_, other->base_partition_);
    std::swap(procedure_id_, other->procedure_id_);
    partitions_.Swap(&other->partitions_);
    std::swap(proc_params_, other->proc_params_);
    prefetch_fragments_.Swap(&other->prefetch_fragments_);
    prefetch_params_.Swap(&other->prefetch_params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionInitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionInitRequest_descriptor_;
  metadata.reflection = TransactionInitRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionInitResponse::kTransactionIdFieldNumber;
const int TransactionInitResponse::kPartitionsFieldNumber;
const int TransactionInitResponse::kStatusFieldNumber;
const int TransactionInitResponse::kRejectPartitionFieldNumber;
const int TransactionInitResponse::kRejectTransactionIdFieldNumber;
#endif  // !_MSC_VER

TransactionInitResponse::TransactionInitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionInitResponse::InitAsDefaultInstance() {
}

TransactionInitResponse::TransactionInitResponse(const TransactionInitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionInitResponse::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  reject_partition_ = 0;
  reject_transaction_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionInitResponse::~TransactionInitResponse() {
  SharedDtor();
}

void TransactionInitResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionInitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionInitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionInitResponse_descriptor_;
}

const TransactionInitResponse& TransactionInitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionInitResponse* TransactionInitResponse::default_instance_ = NULL;

TransactionInitResponse* TransactionInitResponse::New() const {
  return new TransactionInitResponse;
}

void TransactionInitResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transaction_id_ = GOOGLE_LONGLONG(0);
    status_ = 0;
    reject_partition_ = 0;
    reject_transaction_id_ = GOOGLE_LONGLONG(0);
  }
  partitions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionInitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_partitions;
        break;
      }

      // repeated int32 partitions = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_partitions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .peloton.networking.Status status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reject_partition;
        break;
      }

      // optional int32 reject_partition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reject_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reject_partition_)));
          set_has_reject_partition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reject_transaction_id;
        break;
      }

      // optional int64 reject_transaction_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reject_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reject_transaction_id_)));
          set_has_reject_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionInitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_partitions_cached_byte_size_);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  // required .peloton.networking.Status status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // optional int32 reject_partition = 4;
  if (has_reject_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reject_partition(), output);
  }

  // optional int64 reject_transaction_id = 5;
  if (has_reject_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->reject_transaction_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionInitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _partitions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions(i), target);
  }

  // required .peloton.networking.Status status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // optional int32 reject_partition = 4;
  if (has_reject_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reject_partition(), target);
  }

  // optional int64 reject_transaction_id = 5;
  if (has_reject_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->reject_transaction_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionInitResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 transaction_id = 1;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transaction_id());
    }

    // required .peloton.networking.Status status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int32 reject_partition = 4;
    if (has_reject_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reject_partition());
    }

    // optional int64 reject_transaction_id = 5;
    if (has_reject_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reject_transaction_id());
    }

  }
  // repeated int32 partitions = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->partitions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->partitions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionInitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionInitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionInitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionInitResponse::MergeFrom(const TransactionInitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  partitions_.MergeFrom(from.partitions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_reject_partition()) {
      set_reject_partition(from.reject_partition());
    }
    if (from.has_reject_transaction_id()) {
      set_reject_transaction_id(from.reject_transaction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionInitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionInitResponse::CopyFrom(const TransactionInitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionInitResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void TransactionInitResponse::Swap(TransactionInitResponse* other) {
  if (other != this) {
    std::swap(transaction_id_, other->transaction_id_);
    partitions_.Swap(&other->partitions_);
    std::swap(status_, other->status_);
    std::swap(reject_partition_, other->reject_partition_);
    std::swap(reject_transaction_id_, other->reject_transaction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionInitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionInitResponse_descriptor_;
  metadata.reflection = TransactionInitResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionWorkRequest::kLastTransactionIdFieldNumber;
const int TransactionWorkRequest::kTransactionIdFieldNumber;
const int TransactionWorkRequest::kSourcePartitionFieldNumber;
const int TransactionWorkRequest::kFragmentsFieldNumber;
const int TransactionWorkRequest::kProcedureIdFieldNumber;
const int TransactionWorkRequest::kParamsFieldNumber;
const int TransactionWorkRequest::kAttachedDepIdFieldNumber;
const int TransactionWorkRequest::kAttachedDataFieldNumber;
const int TransactionWorkRequest::kDonePartitionFieldNumber;
const int TransactionWorkRequest::kProcParamsFieldNumber;
#endif  // !_MSC_VER

TransactionWorkRequest::TransactionWorkRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionWorkRequest::InitAsDefaultInstance() {
}

TransactionWorkRequest::TransactionWorkRequest(const TransactionWorkRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionWorkRequest::SharedCtor() {
  _cached_size_ = 0;
  last_transaction_id_ = GOOGLE_LONGLONG(0);
  transaction_id_ = GOOGLE_LONGLONG(0);
  source_partition_ = 0;
  procedure_id_ = 0;
  proc_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionWorkRequest::~TransactionWorkRequest() {
  SharedDtor();
}

void TransactionWorkRequest::SharedDtor() {
  if (proc_params_ != &::google::protobuf::internal::kEmptyString) {
    delete proc_params_;
  }
  if (this != default_instance_) {
  }
}

void TransactionWorkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionWorkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionWorkRequest_descriptor_;
}

const TransactionWorkRequest& TransactionWorkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionWorkRequest* TransactionWorkRequest::default_instance_ = NULL;

TransactionWorkRequest* TransactionWorkRequest::New() const {
  return new TransactionWorkRequest;
}

void TransactionWorkRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_transaction_id_ = GOOGLE_LONGLONG(0);
    transaction_id_ = GOOGLE_LONGLONG(0);
    source_partition_ = 0;
    procedure_id_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_proc_params()) {
      if (proc_params_ != &::google::protobuf::internal::kEmptyString) {
        proc_params_->clear();
      }
    }
  }
  fragments_.Clear();
  params_.Clear();
  attached_dep_id_.Clear();
  attached_data_.Clear();
  done_partition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionWorkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_transaction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_transaction_id_)));
          set_has_last_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_transaction_id;
        break;
      }

      // required int64 transaction_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_source_partition;
        break;
      }

      // required int32 source_partition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_partition_)));
          set_has_source_partition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fragments;
        break;
      }

      // repeated .peloton.networking.WorkFragment fragments = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fragments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fragments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fragments;
        if (input->ExpectTag(40)) goto parse_procedure_id;
        break;
      }

      // required int32 procedure_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_procedure_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &procedure_id_)));
          set_has_procedure_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_params;
        break;
      }

      // repeated bytes params = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_params;
        if (input->ExpectTag(58)) goto parse_attached_dep_id;
        break;
      }

      // repeated int32 attached_dep_id = 7 [packed = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attached_dep_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attached_dep_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58, input, this->mutable_attached_dep_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_attached_data;
        break;
      }

      // repeated bytes attached_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attached_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_attached_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_attached_data;
        if (input->ExpectTag(74)) goto parse_done_partition;
        break;
      }

      // repeated int32 done_partition = 9 [packed = true];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_done_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_done_partition())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74, input, this->mutable_done_partition())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_proc_params;
        break;
      }

      // optional bytes proc_params = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proc_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proc_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionWorkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 last_transaction_id = 1;
  if (has_last_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_transaction_id(), output);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->transaction_id(), output);
  }

  // required int32 source_partition = 3;
  if (has_source_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->source_partition(), output);
  }

  // repeated .peloton.networking.WorkFragment fragments = 4;
  for (int i = 0; i < this->fragments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fragments(i), output);
  }

  // required int32 procedure_id = 5;
  if (has_procedure_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->procedure_id(), output);
  }

  // repeated bytes params = 6;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->params(i), output);
  }

  // repeated int32 attached_dep_id = 7 [packed = true];
  if (this->attached_dep_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_attached_dep_id_cached_byte_size_);
  }
  for (int i = 0; i < this->attached_dep_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->attached_dep_id(i), output);
  }

  // repeated bytes attached_data = 8;
  for (int i = 0; i < this->attached_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->attached_data(i), output);
  }

  // repeated int32 done_partition = 9 [packed = true];
  if (this->done_partition_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_done_partition_cached_byte_size_);
  }
  for (int i = 0; i < this->done_partition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->done_partition(i), output);
  }

  // optional bytes proc_params = 10;
  if (has_proc_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->proc_params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionWorkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 last_transaction_id = 1;
  if (has_last_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_transaction_id(), target);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->transaction_id(), target);
  }

  // required int32 source_partition = 3;
  if (has_source_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->source_partition(), target);
  }

  // repeated .peloton.networking.WorkFragment fragments = 4;
  for (int i = 0; i < this->fragments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fragments(i), target);
  }

  // required int32 procedure_id = 5;
  if (has_procedure_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->procedure_id(), target);
  }

  // repeated bytes params = 6;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(6, this->params(i), target);
  }

  // repeated int32 attached_dep_id = 7 [packed = true];
  if (this->attached_dep_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _attached_dep_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->attached_dep_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->attached_dep_id(i), target);
  }

  // repeated bytes attached_data = 8;
  for (int i = 0; i < this->attached_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(8, this->attached_data(i), target);
  }

  // repeated int32 done_partition = 9 [packed = true];
  if (this->done_partition_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _done_partition_cached_byte_size_, target);
  }
  for (int i = 0; i < this->done_partition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->done_partition(i), target);
  }

  // optional bytes proc_params = 10;
  if (has_proc_params()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->proc_params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionWorkRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 last_transaction_id = 1;
    if (has_last_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_transaction_id());
    }

    // required int64 transaction_id = 2;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transaction_id());
    }

    // required int32 source_partition = 3;
    if (has_source_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_partition());
    }

    // required int32 procedure_id = 5;
    if (has_procedure_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->procedure_id());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional bytes proc_params = 10;
    if (has_proc_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->proc_params());
    }

  }
  // repeated .peloton.networking.WorkFragment fragments = 4;
  total_size += 1 * this->fragments_size();
  for (int i = 0; i < this->fragments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fragments(i));
  }

  // repeated bytes params = 6;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->params(i));
  }

  // repeated int32 attached_dep_id = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->attached_dep_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->attached_dep_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _attached_dep_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bytes attached_data = 8;
  total_size += 1 * this->attached_data_size();
  for (int i = 0; i < this->attached_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->attached_data(i));
  }

  // repeated int32 done_partition = 9 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->done_partition_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->done_partition(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _done_partition_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionWorkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionWorkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionWorkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionWorkRequest::MergeFrom(const TransactionWorkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  fragments_.MergeFrom(from.fragments_);
  params_.MergeFrom(from.params_);
  attached_dep_id_.MergeFrom(from.attached_dep_id_);
  attached_data_.MergeFrom(from.attached_data_);
  done_partition_.MergeFrom(from.done_partition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_transaction_id()) {
      set_last_transaction_id(from.last_transaction_id());
    }
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_source_partition()) {
      set_source_partition(from.source_partition());
    }
    if (from.has_procedure_id()) {
      set_procedure_id(from.procedure_id());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_proc_params()) {
      set_proc_params(from.proc_params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionWorkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionWorkRequest::CopyFrom(const TransactionWorkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionWorkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000016) != 0x00000016) return false;

  for (int i = 0; i < fragments_size(); i++) {
    if (!this->fragments(i).IsInitialized()) return false;
  }
  return true;
}

void TransactionWorkRequest::Swap(TransactionWorkRequest* other) {
  if (other != this) {
    std::swap(last_transaction_id_, other->last_transaction_id_);
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(source_partition_, other->source_partition_);
    fragments_.Swap(&other->fragments_);
    std::swap(procedure_id_, other->procedure_id_);
    params_.Swap(&other->params_);
    attached_dep_id_.Swap(&other->attached_dep_id_);
    attached_data_.Swap(&other->attached_data_);
    done_partition_.Swap(&other->done_partition_);
    std::swap(proc_params_, other->proc_params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionWorkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionWorkRequest_descriptor_;
  metadata.reflection = TransactionWorkRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionWorkResponse::kTransactionIdFieldNumber;
const int TransactionWorkResponse::kResultsFieldNumber;
const int TransactionWorkResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

TransactionWorkResponse::TransactionWorkResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionWorkResponse::InitAsDefaultInstance() {
}

TransactionWorkResponse::TransactionWorkResponse(const TransactionWorkResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionWorkResponse::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionWorkResponse::~TransactionWorkResponse() {
  SharedDtor();
}

void TransactionWorkResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionWorkResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionWorkResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionWorkResponse_descriptor_;
}

const TransactionWorkResponse& TransactionWorkResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionWorkResponse* TransactionWorkResponse::default_instance_ = NULL;

TransactionWorkResponse* TransactionWorkResponse::New() const {
  return new TransactionWorkResponse;
}

void TransactionWorkResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transaction_id_ = GOOGLE_LONGLONG(0);
    status_ = 0;
  }
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionWorkResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_results;
        break;
      }

      // repeated .peloton.networking.WorkResult results = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_results;
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .peloton.networking.Status status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionWorkResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated .peloton.networking.WorkResult results = 2;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(i), output);
  }

  // required .peloton.networking.Status status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionWorkResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated .peloton.networking.WorkResult results = 2;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->results(i), target);
  }

  // required .peloton.networking.Status status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionWorkResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 transaction_id = 1;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transaction_id());
    }

    // required .peloton.networking.Status status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated .peloton.networking.WorkResult results = 2;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionWorkResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionWorkResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionWorkResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionWorkResponse::MergeFrom(const TransactionWorkResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionWorkResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionWorkResponse::CopyFrom(const TransactionWorkResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionWorkResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  for (int i = 0; i < results_size(); i++) {
    if (!this->results(i).IsInitialized()) return false;
  }
  return true;
}

void TransactionWorkResponse::Swap(TransactionWorkResponse* other) {
  if (other != this) {
    std::swap(transaction_id_, other->transaction_id_);
    results_.Swap(&other->results_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionWorkResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionWorkResponse_descriptor_;
  metadata.reflection = TransactionWorkResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionPrefetchResult::kLastTransactionIdFieldNumber;
const int TransactionPrefetchResult::kTransactionIdFieldNumber;
const int TransactionPrefetchResult::kSourcePartitionFieldNumber;
const int TransactionPrefetchResult::kResultFieldNumber;
const int TransactionPrefetchResult::kStatusFieldNumber;
const int TransactionPrefetchResult::kStmtCounterFieldNumber;
const int TransactionPrefetchResult::kFragmentIdFieldNumber;
const int TransactionPrefetchResult::kParamHashFieldNumber;
#endif  // !_MSC_VER

TransactionPrefetchResult::TransactionPrefetchResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionPrefetchResult::InitAsDefaultInstance() {
  result_ = const_cast< ::peloton::networking::WorkResult*>(&::peloton::networking::WorkResult::default_instance());
}

TransactionPrefetchResult::TransactionPrefetchResult(const TransactionPrefetchResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionPrefetchResult::SharedCtor() {
  _cached_size_ = 0;
  last_transaction_id_ = GOOGLE_LONGLONG(0);
  transaction_id_ = GOOGLE_LONGLONG(0);
  source_partition_ = 0;
  result_ = NULL;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionPrefetchResult::~TransactionPrefetchResult() {
  SharedDtor();
}

void TransactionPrefetchResult::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void TransactionPrefetchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionPrefetchResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionPrefetchResult_descriptor_;
}

const TransactionPrefetchResult& TransactionPrefetchResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionPrefetchResult* TransactionPrefetchResult::default_instance_ = NULL;

TransactionPrefetchResult* TransactionPrefetchResult::New() const {
  return new TransactionPrefetchResult;
}

void TransactionPrefetchResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_transaction_id_ = GOOGLE_LONGLONG(0);
    transaction_id_ = GOOGLE_LONGLONG(0);
    source_partition_ = 0;
    if (has_result()) {
      if (result_ != NULL) result_->::peloton::networking::WorkResult::Clear();
    }
    status_ = 0;
  }
  stmt_counter_.Clear();
  fragment_id_.Clear();
  param_hash_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionPrefetchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_transaction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_transaction_id_)));
          set_has_last_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_transaction_id;
        break;
      }

      // required int64 transaction_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_source_partition;
        break;
      }

      // required int32 source_partition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_partition_)));
          set_has_source_partition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_result;
        break;
      }

      // required .peloton.networking.WorkResult result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required .peloton.networking.Status status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stmt_counter;
        break;
      }

      // repeated int32 stmt_counter = 6 [packed = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stmt_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stmt_counter())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50, input, this->mutable_stmt_counter())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fragment_id;
        break;
      }

      // repeated int32 fragment_id = 7 [packed = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fragment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fragment_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58, input, this->mutable_fragment_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_param_hash;
        break;
      }

      // repeated int32 param_hash = 8 [packed = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_param_hash())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 66, input, this->mutable_param_hash())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionPrefetchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 last_transaction_id = 1;
  if (has_last_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_transaction_id(), output);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->transaction_id(), output);
  }

  // required int32 source_partition = 3;
  if (has_source_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->source_partition(), output);
  }

  // required .peloton.networking.WorkResult result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->result(), output);
  }

  // required .peloton.networking.Status status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // repeated int32 stmt_counter = 6 [packed = true];
  if (this->stmt_counter_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_stmt_counter_cached_byte_size_);
  }
  for (int i = 0; i < this->stmt_counter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->stmt_counter(i), output);
  }

  // repeated int32 fragment_id = 7 [packed = true];
  if (this->fragment_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_fragment_id_cached_byte_size_);
  }
  for (int i = 0; i < this->fragment_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->fragment_id(i), output);
  }

  // repeated int32 param_hash = 8 [packed = true];
  if (this->param_hash_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_param_hash_cached_byte_size_);
  }
  for (int i = 0; i < this->param_hash_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->param_hash(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionPrefetchResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 last_transaction_id = 1;
  if (has_last_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_transaction_id(), target);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->transaction_id(), target);
  }

  // required int32 source_partition = 3;
  if (has_source_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->source_partition(), target);
  }

  // required .peloton.networking.WorkResult result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->result(), target);
  }

  // required .peloton.networking.Status status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // repeated int32 stmt_counter = 6 [packed = true];
  if (this->stmt_counter_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _stmt_counter_cached_byte_size_, target);
  }
  for (int i = 0; i < this->stmt_counter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->stmt_counter(i), target);
  }

  // repeated int32 fragment_id = 7 [packed = true];
  if (this->fragment_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _fragment_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->fragment_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->fragment_id(i), target);
  }

  // repeated int32 param_hash = 8 [packed = true];
  if (this->param_hash_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _param_hash_cached_byte_size_, target);
  }
  for (int i = 0; i < this->param_hash_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->param_hash(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionPrefetchResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 last_transaction_id = 1;
    if (has_last_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_transaction_id());
    }

    // required int64 transaction_id = 2;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transaction_id());
    }

    // required int32 source_partition = 3;
    if (has_source_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_partition());
    }

    // required .peloton.networking.WorkResult result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // required .peloton.networking.Status status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated int32 stmt_counter = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->stmt_counter_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stmt_counter(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stmt_counter_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 fragment_id = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->fragment_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fragment_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fragment_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 param_hash = 8 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->param_hash_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->param_hash(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _param_hash_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionPrefetchResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionPrefetchResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionPrefetchResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionPrefetchResult::MergeFrom(const TransactionPrefetchResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  stmt_counter_.MergeFrom(from.stmt_counter_);
  fragment_id_.MergeFrom(from.fragment_id_);
  param_hash_.MergeFrom(from.param_hash_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_transaction_id()) {
      set_last_transaction_id(from.last_transaction_id());
    }
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_source_partition()) {
      set_source_partition(from.source_partition());
    }
    if (from.has_result()) {
      mutable_result()->::peloton::networking::WorkResult::MergeFrom(from.result());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionPrefetchResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionPrefetchResult::CopyFrom(const TransactionPrefetchResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionPrefetchResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void TransactionPrefetchResult::Swap(TransactionPrefetchResult* other) {
  if (other != this) {
    std::swap(last_transaction_id_, other->last_transaction_id_);
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(source_partition_, other->source_partition_);
    std::swap(result_, other->result_);
    std::swap(status_, other->status_);
    stmt_counter_.Swap(&other->stmt_counter_);
    fragment_id_.Swap(&other->fragment_id_);
    param_hash_.Swap(&other->param_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionPrefetchResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionPrefetchResult_descriptor_;
  metadata.reflection = TransactionPrefetchResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionPrefetchAcknowledgement::kTransactionIdFieldNumber;
const int TransactionPrefetchAcknowledgement::kTargetPartitionFieldNumber;
#endif  // !_MSC_VER

TransactionPrefetchAcknowledgement::TransactionPrefetchAcknowledgement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionPrefetchAcknowledgement::InitAsDefaultInstance() {
}

TransactionPrefetchAcknowledgement::TransactionPrefetchAcknowledgement(const TransactionPrefetchAcknowledgement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionPrefetchAcknowledgement::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  target_partition_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionPrefetchAcknowledgement::~TransactionPrefetchAcknowledgement() {
  SharedDtor();
}

void TransactionPrefetchAcknowledgement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionPrefetchAcknowledgement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionPrefetchAcknowledgement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionPrefetchAcknowledgement_descriptor_;
}

const TransactionPrefetchAcknowledgement& TransactionPrefetchAcknowledgement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionPrefetchAcknowledgement* TransactionPrefetchAcknowledgement::default_instance_ = NULL;

TransactionPrefetchAcknowledgement* TransactionPrefetchAcknowledgement::New() const {
  return new TransactionPrefetchAcknowledgement;
}

void TransactionPrefetchAcknowledgement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transaction_id_ = GOOGLE_LONGLONG(0);
    target_partition_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionPrefetchAcknowledgement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_partition;
        break;
      }

      // required int32 target_partition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_partition_)));
          set_has_target_partition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionPrefetchAcknowledgement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // required int32 target_partition = 2;
  if (has_target_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->target_partition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionPrefetchAcknowledgement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // required int32 target_partition = 2;
  if (has_target_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->target_partition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionPrefetchAcknowledgement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 transaction_id = 1;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transaction_id());
    }

    // required int32 target_partition = 2;
    if (has_target_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_partition());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionPrefetchAcknowledgement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionPrefetchAcknowledgement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionPrefetchAcknowledgement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionPrefetchAcknowledgement::MergeFrom(const TransactionPrefetchAcknowledgement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_target_partition()) {
      set_target_partition(from.target_partition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionPrefetchAcknowledgement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionPrefetchAcknowledgement::CopyFrom(const TransactionPrefetchAcknowledgement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionPrefetchAcknowledgement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TransactionPrefetchAcknowledgement::Swap(TransactionPrefetchAcknowledgement* other) {
  if (other != this) {
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(target_partition_, other->target_partition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionPrefetchAcknowledgement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionPrefetchAcknowledgement_descriptor_;
  metadata.reflection = TransactionPrefetchAcknowledgement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionMapRequest::kLastTransactionIdFieldNumber;
const int TransactionMapRequest::kTransactionIdFieldNumber;
const int TransactionMapRequest::kClientHandleFieldNumber;
const int TransactionMapRequest::kBasePartitionFieldNumber;
const int TransactionMapRequest::kProcedureIdFieldNumber;
const int TransactionMapRequest::kParamsFieldNumber;
#endif  // !_MSC_VER

TransactionMapRequest::TransactionMapRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionMapRequest::InitAsDefaultInstance() {
}

TransactionMapRequest::TransactionMapRequest(const TransactionMapRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionMapRequest::SharedCtor() {
  _cached_size_ = 0;
  last_transaction_id_ = GOOGLE_LONGLONG(0);
  transaction_id_ = GOOGLE_LONGLONG(0);
  client_handle_ = GOOGLE_LONGLONG(0);
  base_partition_ = 0;
  procedure_id_ = 0;
  params_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionMapRequest::~TransactionMapRequest() {
  SharedDtor();
}

void TransactionMapRequest::SharedDtor() {
  if (params_ != &::google::protobuf::internal::kEmptyString) {
    delete params_;
  }
  if (this != default_instance_) {
  }
}

void TransactionMapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionMapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionMapRequest_descriptor_;
}

const TransactionMapRequest& TransactionMapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionMapRequest* TransactionMapRequest::default_instance_ = NULL;

TransactionMapRequest* TransactionMapRequest::New() const {
  return new TransactionMapRequest;
}

void TransactionMapRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_transaction_id_ = GOOGLE_LONGLONG(0);
    transaction_id_ = GOOGLE_LONGLONG(0);
    client_handle_ = GOOGLE_LONGLONG(0);
    base_partition_ = 0;
    procedure_id_ = 0;
    if (has_params()) {
      if (params_ != &::google::protobuf::internal::kEmptyString) {
        params_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionMapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_transaction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_transaction_id_)));
          set_has_last_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_transaction_id;
        break;
      }

      // required int64 transaction_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_client_handle;
        break;
      }

      // required int64 client_handle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_handle_)));
          set_has_client_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_base_partition;
        break;
      }

      // required int32 base_partition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_partition_)));
          set_has_base_partition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_procedure_id;
        break;
      }

      // required int32 procedure_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_procedure_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &procedure_id_)));
          set_has_procedure_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_params;
        break;
      }

      // required bytes params = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionMapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 last_transaction_id = 1;
  if (has_last_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_transaction_id(), output);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->transaction_id(), output);
  }

  // required int64 client_handle = 3;
  if (has_client_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->client_handle(), output);
  }

  // required int32 base_partition = 4;
  if (has_base_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->base_partition(), output);
  }

  // required int32 procedure_id = 5;
  if (has_procedure_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->procedure_id(), output);
  }

  // required bytes params = 6;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionMapRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 last_transaction_id = 1;
  if (has_last_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_transaction_id(), target);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->transaction_id(), target);
  }

  // required int64 client_handle = 3;
  if (has_client_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->client_handle(), target);
  }

  // required int32 base_partition = 4;
  if (has_base_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->base_partition(), target);
  }

  // required int32 procedure_id = 5;
  if (has_procedure_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->procedure_id(), target);
  }

  // required bytes params = 6;
  if (has_params()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionMapRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 last_transaction_id = 1;
    if (has_last_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_transaction_id());
    }

    // required int64 transaction_id = 2;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transaction_id());
    }

    // required int64 client_handle = 3;
    if (has_client_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->client_handle());
    }

    // required int32 base_partition = 4;
    if (has_base_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_partition());
    }

    // required int32 procedure_id = 5;
    if (has_procedure_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->procedure_id());
    }

    // required bytes params = 6;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionMapRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionMapRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionMapRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionMapRequest::MergeFrom(const TransactionMapRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_transaction_id()) {
      set_last_transaction_id(from.last_transaction_id());
    }
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_client_handle()) {
      set_client_handle(from.client_handle());
    }
    if (from.has_base_partition()) {
      set_base_partition(from.base_partition());
    }
    if (from.has_procedure_id()) {
      set_procedure_id(from.procedure_id());
    }
    if (from.has_params()) {
      set_params(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionMapRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionMapRequest::CopyFrom(const TransactionMapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionMapRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;

  return true;
}

void TransactionMapRequest::Swap(TransactionMapRequest* other) {
  if (other != this) {
    std::swap(last_transaction_id_, other->last_transaction_id_);
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(client_handle_, other->client_handle_);
    std::swap(base_partition_, other->base_partition_);
    std::swap(procedure_id_, other->procedure_id_);
    std::swap(params_, other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionMapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionMapRequest_descriptor_;
  metadata.reflection = TransactionMapRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionMapResponse::kTransactionIdFieldNumber;
const int TransactionMapResponse::kPartitionsFieldNumber;
const int TransactionMapResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

TransactionMapResponse::TransactionMapResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionMapResponse::InitAsDefaultInstance() {
}

TransactionMapResponse::TransactionMapResponse(const TransactionMapResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionMapResponse::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionMapResponse::~TransactionMapResponse() {
  SharedDtor();
}

void TransactionMapResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionMapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionMapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionMapResponse_descriptor_;
}

const TransactionMapResponse& TransactionMapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionMapResponse* TransactionMapResponse::default_instance_ = NULL;

TransactionMapResponse* TransactionMapResponse::New() const {
  return new TransactionMapResponse;
}

void TransactionMapResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transaction_id_ = GOOGLE_LONGLONG(0);
    status_ = 0;
  }
  partitions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionMapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_partitions;
        break;
      }

      // repeated int32 partitions = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_partitions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .peloton.networking.Status status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionMapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_partitions_cached_byte_size_);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  // required .peloton.networking.Status status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionMapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _partitions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions(i), target);
  }

  // required .peloton.networking.Status status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionMapResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 transaction_id = 1;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transaction_id());
    }

    // required .peloton.networking.Status status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated int32 partitions = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->partitions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->partitions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionMapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionMapResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionMapResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionMapResponse::MergeFrom(const TransactionMapResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  partitions_.MergeFrom(from.partitions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionMapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionMapResponse::CopyFrom(const TransactionMapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionMapResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void TransactionMapResponse::Swap(TransactionMapResponse* other) {
  if (other != this) {
    std::swap(transaction_id_, other->transaction_id_);
    partitions_.Swap(&other->partitions_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionMapResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionMapResponse_descriptor_;
  metadata.reflection = TransactionMapResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionReduceRequest::kTransactionIdFieldNumber;
#endif  // !_MSC_VER

TransactionReduceRequest::TransactionReduceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionReduceRequest::InitAsDefaultInstance() {
}

TransactionReduceRequest::TransactionReduceRequest(const TransactionReduceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionReduceRequest::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionReduceRequest::~TransactionReduceRequest() {
  SharedDtor();
}

void TransactionReduceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionReduceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionReduceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionReduceRequest_descriptor_;
}

const TransactionReduceRequest& TransactionReduceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionReduceRequest* TransactionReduceRequest::default_instance_ = NULL;

TransactionReduceRequest* TransactionReduceRequest::New() const {
  return new TransactionReduceRequest;
}

void TransactionReduceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transaction_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionReduceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionReduceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionReduceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionReduceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 transaction_id = 1;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transaction_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionReduceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionReduceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionReduceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionReduceRequest::MergeFrom(const TransactionReduceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionReduceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionReduceRequest::CopyFrom(const TransactionReduceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionReduceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TransactionReduceRequest::Swap(TransactionReduceRequest* other) {
  if (other != this) {
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionReduceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionReduceRequest_descriptor_;
  metadata.reflection = TransactionReduceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionReduceResponse_ReduceResult::kPartitionIdFieldNumber;
const int TransactionReduceResponse_ReduceResult::kDataFieldNumber;
const int TransactionReduceResponse_ReduceResult::kStatusFieldNumber;
const int TransactionReduceResponse_ReduceResult::kErrorFieldNumber;
#endif  // !_MSC_VER

TransactionReduceResponse_ReduceResult::TransactionReduceResponse_ReduceResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionReduceResponse_ReduceResult::InitAsDefaultInstance() {
}

TransactionReduceResponse_ReduceResult::TransactionReduceResponse_ReduceResult(const TransactionReduceResponse_ReduceResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionReduceResponse_ReduceResult::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  error_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionReduceResponse_ReduceResult::~TransactionReduceResponse_ReduceResult() {
  SharedDtor();
}

void TransactionReduceResponse_ReduceResult::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void TransactionReduceResponse_ReduceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionReduceResponse_ReduceResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionReduceResponse_ReduceResult_descriptor_;
}

const TransactionReduceResponse_ReduceResult& TransactionReduceResponse_ReduceResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionReduceResponse_ReduceResult* TransactionReduceResponse_ReduceResult::default_instance_ = NULL;

TransactionReduceResponse_ReduceResult* TransactionReduceResponse_ReduceResult::New() const {
  return new TransactionReduceResponse_ReduceResult;
}

void TransactionReduceResponse_ReduceResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    partition_id_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    status_ = 0;
    error_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionReduceResponse_ReduceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 partition_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_id_)));
          set_has_partition_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .peloton.networking.Status status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error;
        break;
      }

      // optional bool error = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionReduceResponse_ReduceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->partition_id(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  // required .peloton.networking.Status status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // optional bool error = 4 [default = false];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionReduceResponse_ReduceResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->partition_id(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // required .peloton.networking.Status status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // optional bool error = 4 [default = false];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionReduceResponse_ReduceResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partition_id());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // required .peloton.networking.Status status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional bool error = 4 [default = false];
    if (has_error()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionReduceResponse_ReduceResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionReduceResponse_ReduceResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionReduceResponse_ReduceResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionReduceResponse_ReduceResult::MergeFrom(const TransactionReduceResponse_ReduceResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      set_partition_id(from.partition_id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionReduceResponse_ReduceResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionReduceResponse_ReduceResult::CopyFrom(const TransactionReduceResponse_ReduceResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionReduceResponse_ReduceResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TransactionReduceResponse_ReduceResult::Swap(TransactionReduceResponse_ReduceResult* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    std::swap(data_, other->data_);
    std::swap(status_, other->status_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionReduceResponse_ReduceResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionReduceResponse_ReduceResult_descriptor_;
  metadata.reflection = TransactionReduceResponse_ReduceResult_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TransactionReduceResponse::kTransactionIdFieldNumber;
const int TransactionReduceResponse::kResultsFieldNumber;
const int TransactionReduceResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

TransactionReduceResponse::TransactionReduceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionReduceResponse::InitAsDefaultInstance() {
}

TransactionReduceResponse::TransactionReduceResponse(const TransactionReduceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionReduceResponse::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionReduceResponse::~TransactionReduceResponse() {
  SharedDtor();
}

void TransactionReduceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionReduceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionReduceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionReduceResponse_descriptor_;
}

const TransactionReduceResponse& TransactionReduceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionReduceResponse* TransactionReduceResponse::default_instance_ = NULL;

TransactionReduceResponse* TransactionReduceResponse::New() const {
  return new TransactionReduceResponse;
}

void TransactionReduceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transaction_id_ = GOOGLE_LONGLONG(0);
    status_ = 0;
  }
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionReduceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_results;
        break;
      }

      // repeated .peloton.networking.TransactionReduceResponse.ReduceResult results = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_results;
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .peloton.networking.Status status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionReduceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated .peloton.networking.TransactionReduceResponse.ReduceResult results = 2;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(i), output);
  }

  // required .peloton.networking.Status status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionReduceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated .peloton.networking.TransactionReduceResponse.ReduceResult results = 2;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->results(i), target);
  }

  // required .peloton.networking.Status status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionReduceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 transaction_id = 1;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transaction_id());
    }

    // required .peloton.networking.Status status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated .peloton.networking.TransactionReduceResponse.ReduceResult results = 2;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionReduceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionReduceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionReduceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionReduceResponse::MergeFrom(const TransactionReduceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionReduceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionReduceResponse::CopyFrom(const TransactionReduceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionReduceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  for (int i = 0; i < results_size(); i++) {
    if (!this->results(i).IsInitialized()) return false;
  }
  return true;
}

void TransactionReduceResponse::Swap(TransactionReduceResponse* other) {
  if (other != this) {
    std::swap(transaction_id_, other->transaction_id_);
    results_.Swap(&other->results_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionReduceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionReduceResponse_descriptor_;
  metadata.reflection = TransactionReduceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionPrepareRequest::kTransactionIdFieldNumber;
const int TransactionPrepareRequest::kPartitionsFieldNumber;
#endif  // !_MSC_VER

TransactionPrepareRequest::TransactionPrepareRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionPrepareRequest::InitAsDefaultInstance() {
}

TransactionPrepareRequest::TransactionPrepareRequest(const TransactionPrepareRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionPrepareRequest::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionPrepareRequest::~TransactionPrepareRequest() {
  SharedDtor();
}

void TransactionPrepareRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionPrepareRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionPrepareRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionPrepareRequest_descriptor_;
}

const TransactionPrepareRequest& TransactionPrepareRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionPrepareRequest* TransactionPrepareRequest::default_instance_ = NULL;

TransactionPrepareRequest* TransactionPrepareRequest::New() const {
  return new TransactionPrepareRequest;
}

void TransactionPrepareRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transaction_id_ = GOOGLE_LONGLONG(0);
  }
  partitions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionPrepareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_partitions;
        break;
      }

      // repeated int32 partitions = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_partitions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionPrepareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_partitions_cached_byte_size_);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionPrepareRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _partitions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionPrepareRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 transaction_id = 1;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transaction_id());
    }

  }
  // repeated int32 partitions = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->partitions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->partitions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionPrepareRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionPrepareRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionPrepareRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionPrepareRequest::MergeFrom(const TransactionPrepareRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  partitions_.MergeFrom(from.partitions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionPrepareRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionPrepareRequest::CopyFrom(const TransactionPrepareRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionPrepareRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TransactionPrepareRequest::Swap(TransactionPrepareRequest* other) {
  if (other != this) {
    std::swap(transaction_id_, other->transaction_id_);
    partitions_.Swap(&other->partitions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionPrepareRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionPrepareRequest_descriptor_;
  metadata.reflection = TransactionPrepareRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionPrepareResponse::kTransactionIdFieldNumber;
const int TransactionPrepareResponse::kPartitionsFieldNumber;
const int TransactionPrepareResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

TransactionPrepareResponse::TransactionPrepareResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionPrepareResponse::InitAsDefaultInstance() {
}

TransactionPrepareResponse::TransactionPrepareResponse(const TransactionPrepareResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionPrepareResponse::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionPrepareResponse::~TransactionPrepareResponse() {
  SharedDtor();
}

void TransactionPrepareResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionPrepareResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionPrepareResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionPrepareResponse_descriptor_;
}

const TransactionPrepareResponse& TransactionPrepareResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionPrepareResponse* TransactionPrepareResponse::default_instance_ = NULL;

TransactionPrepareResponse* TransactionPrepareResponse::New() const {
  return new TransactionPrepareResponse;
}

void TransactionPrepareResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transaction_id_ = GOOGLE_LONGLONG(0);
    status_ = 0;
  }
  partitions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionPrepareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_partitions;
        break;
      }

      // repeated int32 partitions = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_partitions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .peloton.networking.Status status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionPrepareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_partitions_cached_byte_size_);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  // required .peloton.networking.Status status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionPrepareResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _partitions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions(i), target);
  }

  // required .peloton.networking.Status status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionPrepareResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 transaction_id = 1;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transaction_id());
    }

    // required .peloton.networking.Status status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated int32 partitions = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->partitions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->partitions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionPrepareResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionPrepareResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionPrepareResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionPrepareResponse::MergeFrom(const TransactionPrepareResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  partitions_.MergeFrom(from.partitions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionPrepareResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionPrepareResponse::CopyFrom(const TransactionPrepareResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionPrepareResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void TransactionPrepareResponse::Swap(TransactionPrepareResponse* other) {
  if (other != this) {
    std::swap(transaction_id_, other->transaction_id_);
    partitions_.Swap(&other->partitions_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionPrepareResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionPrepareResponse_descriptor_;
  metadata.reflection = TransactionPrepareResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionFinishRequest::kTransactionIdFieldNumber;
const int TransactionFinishRequest::kPartitionsFieldNumber;
const int TransactionFinishRequest::kStatusFieldNumber;
#endif  // !_MSC_VER

TransactionFinishRequest::TransactionFinishRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionFinishRequest::InitAsDefaultInstance() {
}

TransactionFinishRequest::TransactionFinishRequest(const TransactionFinishRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionFinishRequest::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionFinishRequest::~TransactionFinishRequest() {
  SharedDtor();
}

void TransactionFinishRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionFinishRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionFinishRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionFinishRequest_descriptor_;
}

const TransactionFinishRequest& TransactionFinishRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionFinishRequest* TransactionFinishRequest::default_instance_ = NULL;

TransactionFinishRequest* TransactionFinishRequest::New() const {
  return new TransactionFinishRequest;
}

void TransactionFinishRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transaction_id_ = GOOGLE_LONGLONG(0);
    status_ = 0;
  }
  partitions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionFinishRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_partitions;
        break;
      }

      // repeated int32 partitions = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_partitions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .peloton.networking.Status status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionFinishRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_partitions_cached_byte_size_);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  // required .peloton.networking.Status status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionFinishRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _partitions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions(i), target);
  }

  // required .peloton.networking.Status status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionFinishRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 transaction_id = 1;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transaction_id());
    }

    // required .peloton.networking.Status status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated int32 partitions = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->partitions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->partitions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionFinishRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionFinishRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionFinishRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionFinishRequest::MergeFrom(const TransactionFinishRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  partitions_.MergeFrom(from.partitions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionFinishRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionFinishRequest::CopyFrom(const TransactionFinishRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionFinishRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void TransactionFinishRequest::Swap(TransactionFinishRequest* other) {
  if (other != this) {
    std::swap(transaction_id_, other->transaction_id_);
    partitions_.Swap(&other->partitions_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionFinishRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionFinishRequest_descriptor_;
  metadata.reflection = TransactionFinishRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionFinishResponse::kTransactionIdFieldNumber;
const int TransactionFinishResponse::kPartitionsFieldNumber;
#endif  // !_MSC_VER

TransactionFinishResponse::TransactionFinishResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionFinishResponse::InitAsDefaultInstance() {
}

TransactionFinishResponse::TransactionFinishResponse(const TransactionFinishResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionFinishResponse::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionFinishResponse::~TransactionFinishResponse() {
  SharedDtor();
}

void TransactionFinishResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionFinishResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionFinishResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionFinishResponse_descriptor_;
}

const TransactionFinishResponse& TransactionFinishResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionFinishResponse* TransactionFinishResponse::default_instance_ = NULL;

TransactionFinishResponse* TransactionFinishResponse::New() const {
  return new TransactionFinishResponse;
}

void TransactionFinishResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transaction_id_ = GOOGLE_LONGLONG(0);
  }
  partitions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionFinishResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_partitions;
        break;
      }

      // repeated int32 partitions = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_partitions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionFinishResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_partitions_cached_byte_size_);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionFinishResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _partitions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionFinishResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 transaction_id = 1;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transaction_id());
    }

  }
  // repeated int32 partitions = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->partitions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->partitions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionFinishResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionFinishResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionFinishResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionFinishResponse::MergeFrom(const TransactionFinishResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  partitions_.MergeFrom(from.partitions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionFinishResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionFinishResponse::CopyFrom(const TransactionFinishResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionFinishResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TransactionFinishResponse::Swap(TransactionFinishResponse* other) {
  if (other != this) {
    std::swap(transaction_id_, other->transaction_id_);
    partitions_.Swap(&other->partitions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionFinishResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionFinishResponse_descriptor_;
  metadata.reflection = TransactionFinishResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionRedirectRequest::kSenderSiteFieldNumber;
const int TransactionRedirectRequest::kWorkFieldNumber;
const int TransactionRedirectRequest::kOrigTxnIdFieldNumber;
#endif  // !_MSC_VER

TransactionRedirectRequest::TransactionRedirectRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionRedirectRequest::InitAsDefaultInstance() {
}

TransactionRedirectRequest::TransactionRedirectRequest(const TransactionRedirectRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionRedirectRequest::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  work_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orig_txn_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionRedirectRequest::~TransactionRedirectRequest() {
  SharedDtor();
}

void TransactionRedirectRequest::SharedDtor() {
  if (work_ != &::google::protobuf::internal::kEmptyString) {
    delete work_;
  }
  if (this != default_instance_) {
  }
}

void TransactionRedirectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionRedirectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionRedirectRequest_descriptor_;
}

const TransactionRedirectRequest& TransactionRedirectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionRedirectRequest* TransactionRedirectRequest::default_instance_ = NULL;

TransactionRedirectRequest* TransactionRedirectRequest::New() const {
  return new TransactionRedirectRequest;
}

void TransactionRedirectRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sender_site_ = 0;
    if (has_work()) {
      if (work_ != &::google::protobuf::internal::kEmptyString) {
        work_->clear();
      }
    }
    orig_txn_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionRedirectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_work;
        break;
      }

      // required bytes work = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_work:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_work()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_orig_txn_id;
        break;
      }

      // optional int64 orig_txn_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orig_txn_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orig_txn_id_)));
          set_has_orig_txn_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionRedirectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required bytes work = 2;
  if (has_work()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->work(), output);
  }

  // optional int64 orig_txn_id = 3;
  if (has_orig_txn_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->orig_txn_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionRedirectRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required bytes work = 2;
  if (has_work()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->work(), target);
  }

  // optional int64 orig_txn_id = 3;
  if (has_orig_txn_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->orig_txn_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionRedirectRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sender_site = 1;
    if (has_sender_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_site());
    }

    // required bytes work = 2;
    if (has_work()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->work());
    }

    // optional int64 orig_txn_id = 3;
    if (has_orig_txn_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orig_txn_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionRedirectRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionRedirectRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionRedirectRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionRedirectRequest::MergeFrom(const TransactionRedirectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_work()) {
      set_work(from.work());
    }
    if (from.has_orig_txn_id()) {
      set_orig_txn_id(from.orig_txn_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionRedirectRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionRedirectRequest::CopyFrom(const TransactionRedirectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionRedirectRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TransactionRedirectRequest::Swap(TransactionRedirectRequest* other) {
  if (other != this) {
    std::swap(sender_site_, other->sender_site_);
    std::swap(work_, other->work_);
    std::swap(orig_txn_id_, other->orig_txn_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionRedirectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionRedirectRequest_descriptor_;
  metadata.reflection = TransactionRedirectRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionRedirectResponse::kSenderSiteFieldNumber;
const int TransactionRedirectResponse::kOutputFieldNumber;
#endif  // !_MSC_VER

TransactionRedirectResponse::TransactionRedirectResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionRedirectResponse::InitAsDefaultInstance() {
}

TransactionRedirectResponse::TransactionRedirectResponse(const TransactionRedirectResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionRedirectResponse::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  output_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionRedirectResponse::~TransactionRedirectResponse() {
  SharedDtor();
}

void TransactionRedirectResponse::SharedDtor() {
  if (output_ != &::google::protobuf::internal::kEmptyString) {
    delete output_;
  }
  if (this != default_instance_) {
  }
}

void TransactionRedirectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionRedirectResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionRedirectResponse_descriptor_;
}

const TransactionRedirectResponse& TransactionRedirectResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionRedirectResponse* TransactionRedirectResponse::default_instance_ = NULL;

TransactionRedirectResponse* TransactionRedirectResponse::New() const {
  return new TransactionRedirectResponse;
}

void TransactionRedirectResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sender_site_ = 0;
    if (has_output()) {
      if (output_ != &::google::protobuf::internal::kEmptyString) {
        output_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionRedirectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_output;
        break;
      }

      // required bytes output = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionRedirectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required bytes output = 2;
  if (has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->output(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionRedirectResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required bytes output = 2;
  if (has_output()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->output(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionRedirectResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sender_site = 1;
    if (has_sender_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_site());
    }

    // required bytes output = 2;
    if (has_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->output());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionRedirectResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionRedirectResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionRedirectResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionRedirectResponse::MergeFrom(const TransactionRedirectResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_output()) {
      set_output(from.output());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionRedirectResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionRedirectResponse::CopyFrom(const TransactionRedirectResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionRedirectResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TransactionRedirectResponse::Swap(TransactionRedirectResponse* other) {
  if (other != this) {
    std::swap(sender_site_, other->sender_site_);
    std::swap(output_, other->output_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionRedirectResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionRedirectResponse_descriptor_;
  metadata.reflection = TransactionRedirectResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionDebugRequest::kSenderSiteFieldNumber;
const int TransactionDebugRequest::kTransactionIdFieldNumber;
#endif  // !_MSC_VER

TransactionDebugRequest::TransactionDebugRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionDebugRequest::InitAsDefaultInstance() {
}

TransactionDebugRequest::TransactionDebugRequest(const TransactionDebugRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionDebugRequest::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionDebugRequest::~TransactionDebugRequest() {
  SharedDtor();
}

void TransactionDebugRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionDebugRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionDebugRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionDebugRequest_descriptor_;
}

const TransactionDebugRequest& TransactionDebugRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionDebugRequest* TransactionDebugRequest::default_instance_ = NULL;

TransactionDebugRequest* TransactionDebugRequest::New() const {
  return new TransactionDebugRequest;
}

void TransactionDebugRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sender_site_ = 0;
    transaction_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionDebugRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_transaction_id;
        break;
      }

      // required int64 transaction_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionDebugRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->transaction_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionDebugRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->transaction_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionDebugRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sender_site = 1;
    if (has_sender_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_site());
    }

    // required int64 transaction_id = 2;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transaction_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionDebugRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionDebugRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionDebugRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionDebugRequest::MergeFrom(const TransactionDebugRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionDebugRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionDebugRequest::CopyFrom(const TransactionDebugRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionDebugRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TransactionDebugRequest::Swap(TransactionDebugRequest* other) {
  if (other != this) {
    std::swap(sender_site_, other->sender_site_);
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionDebugRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionDebugRequest_descriptor_;
  metadata.reflection = TransactionDebugRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionDebugResponse::kSenderSiteFieldNumber;
const int TransactionDebugResponse::kStatusFieldNumber;
const int TransactionDebugResponse::kDebugFieldNumber;
#endif  // !_MSC_VER

TransactionDebugResponse::TransactionDebugResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionDebugResponse::InitAsDefaultInstance() {
}

TransactionDebugResponse::TransactionDebugResponse(const TransactionDebugResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionDebugResponse::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  status_ = 0;
  debug_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionDebugResponse::~TransactionDebugResponse() {
  SharedDtor();
}

void TransactionDebugResponse::SharedDtor() {
  if (debug_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_;
  }
  if (this != default_instance_) {
  }
}

void TransactionDebugResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionDebugResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionDebugResponse_descriptor_;
}

const TransactionDebugResponse& TransactionDebugResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionDebugResponse* TransactionDebugResponse::default_instance_ = NULL;

TransactionDebugResponse* TransactionDebugResponse::New() const {
  return new TransactionDebugResponse;
}

void TransactionDebugResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sender_site_ = 0;
    status_ = 0;
    if (has_debug()) {
      if (debug_ != &::google::protobuf::internal::kEmptyString) {
        debug_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionDebugResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .peloton.networking.Status status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_debug;
        break;
      }

      // required string debug = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug().data(), this->debug().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionDebugResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required .peloton.networking.Status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required string debug = 3;
  if (has_debug()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug().data(), this->debug().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->debug(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionDebugResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required .peloton.networking.Status status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // required string debug = 3;
  if (has_debug()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug().data(), this->debug().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->debug(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionDebugResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sender_site = 1;
    if (has_sender_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_site());
    }

    // required .peloton.networking.Status status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required string debug = 3;
    if (has_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionDebugResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionDebugResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionDebugResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionDebugResponse::MergeFrom(const TransactionDebugResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_debug()) {
      set_debug(from.debug());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionDebugResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionDebugResponse::CopyFrom(const TransactionDebugResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionDebugResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TransactionDebugResponse::Swap(TransactionDebugResponse* other) {
  if (other != this) {
    std::swap(sender_site_, other->sender_site_);
    std::swap(status_, other->status_);
    std::swap(debug_, other->debug_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionDebugResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionDebugResponse_descriptor_;
  metadata.reflection = TransactionDebugResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendDataRequest::kTransactionIdFieldNumber;
const int SendDataRequest::kSenderSiteFieldNumber;
const int SendDataRequest::kDepIdFieldNumber;
const int SendDataRequest::kDataFieldNumber;
#endif  // !_MSC_VER

SendDataRequest::SendDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendDataRequest::InitAsDefaultInstance() {
}

SendDataRequest::SendDataRequest(const SendDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendDataRequest::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  sender_site_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendDataRequest::~SendDataRequest() {
  SharedDtor();
}

void SendDataRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendDataRequest_descriptor_;
}

const SendDataRequest& SendDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

SendDataRequest* SendDataRequest::default_instance_ = NULL;

SendDataRequest* SendDataRequest::New() const {
  return new SendDataRequest;
}

void SendDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transaction_id_ = GOOGLE_LONGLONG(0);
    sender_site_ = 0;
  }
  dep_id_.Clear();
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sender_site;
        break;
      }

      // required int32 sender_site = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender_site:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dep_id;
        break;
      }

      // repeated int32 dep_id = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dep_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dep_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_dep_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // repeated bytes data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // required int32 sender_site = 2;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sender_site(), output);
  }

  // repeated int32 dep_id = 3 [packed = true];
  if (this->dep_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dep_id_cached_byte_size_);
  }
  for (int i = 0; i < this->dep_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->dep_id(i), output);
  }

  // repeated bytes data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // required int32 sender_site = 2;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sender_site(), target);
  }

  // repeated int32 dep_id = 3 [packed = true];
  if (this->dep_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dep_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dep_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->dep_id(i), target);
  }

  // repeated bytes data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendDataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 transaction_id = 1;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transaction_id());
    }

    // required int32 sender_site = 2;
    if (has_sender_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_site());
    }

  }
  // repeated int32 dep_id = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->dep_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dep_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dep_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bytes data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendDataRequest::MergeFrom(const SendDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  dep_id_.MergeFrom(from.dep_id_);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendDataRequest::CopyFrom(const SendDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SendDataRequest::Swap(SendDataRequest* other) {
  if (other != this) {
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(sender_site_, other->sender_site_);
    dep_id_.Swap(&other->dep_id_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendDataRequest_descriptor_;
  metadata.reflection = SendDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendDataResponse::kTransactionIdFieldNumber;
const int SendDataResponse::kPartitionsFieldNumber;
const int SendDataResponse::kSenderSiteFieldNumber;
const int SendDataResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

SendDataResponse::SendDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendDataResponse::InitAsDefaultInstance() {
}

SendDataResponse::SendDataResponse(const SendDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendDataResponse::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  sender_site_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendDataResponse::~SendDataResponse() {
  SharedDtor();
}

void SendDataResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendDataResponse_descriptor_;
}

const SendDataResponse& SendDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

SendDataResponse* SendDataResponse::default_instance_ = NULL;

SendDataResponse* SendDataResponse::New() const {
  return new SendDataResponse;
}

void SendDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transaction_id_ = GOOGLE_LONGLONG(0);
    sender_site_ = 0;
    status_ = 0;
  }
  partitions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_partitions;
        break;
      }

      // repeated int32 partitions = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_partitions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sender_site;
        break;
      }

      // required int32 sender_site = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender_site:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required .peloton.networking.Status status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_partitions_cached_byte_size_);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  // required int32 sender_site = 3;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sender_site(), output);
  }

  // required .peloton.networking.Status status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _partitions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions(i), target);
  }

  // required int32 sender_site = 3;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sender_site(), target);
  }

  // required .peloton.networking.Status status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendDataResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 transaction_id = 1;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transaction_id());
    }

    // required int32 sender_site = 3;
    if (has_sender_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_site());
    }

    // required .peloton.networking.Status status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated int32 partitions = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->partitions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->partitions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendDataResponse::MergeFrom(const SendDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  partitions_.MergeFrom(from.partitions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendDataResponse::CopyFrom(const SendDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendDataResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void SendDataResponse::Swap(SendDataResponse* other) {
  if (other != this) {
    std::swap(transaction_id_, other->transaction_id_);
    partitions_.Swap(&other->partitions_);
    std::swap(sender_site_, other->sender_site_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendDataResponse_descriptor_;
  metadata.reflection = SendDataResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitializeRequest::kSenderSiteFieldNumber;
const int InitializeRequest::kInstanceIdFieldNumber;
#endif  // !_MSC_VER

InitializeRequest::InitializeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitializeRequest::InitAsDefaultInstance() {
}

InitializeRequest::InitializeRequest(const InitializeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitializeRequest::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  instance_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitializeRequest::~InitializeRequest() {
  SharedDtor();
}

void InitializeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InitializeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitializeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitializeRequest_descriptor_;
}

const InitializeRequest& InitializeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

InitializeRequest* InitializeRequest::default_instance_ = NULL;

InitializeRequest* InitializeRequest::New() const {
  return new InitializeRequest;
}

void InitializeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sender_site_ = 0;
    instance_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitializeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instance_id;
        break;
      }

      // required int64 instance_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitializeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required int64 instance_id = 2;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->instance_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitializeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required int64 instance_id = 2;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->instance_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitializeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sender_site = 1;
    if (has_sender_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_site());
    }

    // required int64 instance_id = 2;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->instance_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitializeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitializeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitializeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitializeRequest::MergeFrom(const InitializeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitializeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitializeRequest::CopyFrom(const InitializeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InitializeRequest::Swap(InitializeRequest* other) {
  if (other != this) {
    std::swap(sender_site_, other->sender_site_);
    std::swap(instance_id_, other->instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitializeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitializeRequest_descriptor_;
  metadata.reflection = InitializeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitializeResponse::kSenderSiteFieldNumber;
const int InitializeResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

InitializeResponse::InitializeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitializeResponse::InitAsDefaultInstance() {
}

InitializeResponse::InitializeResponse(const InitializeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitializeResponse::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitializeResponse::~InitializeResponse() {
  SharedDtor();
}

void InitializeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InitializeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitializeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitializeResponse_descriptor_;
}

const InitializeResponse& InitializeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

InitializeResponse* InitializeResponse::default_instance_ = NULL;

InitializeResponse* InitializeResponse::New() const {
  return new InitializeResponse;
}

void InitializeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sender_site_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitializeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .peloton.networking.Status status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitializeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required .peloton.networking.Status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitializeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required .peloton.networking.Status status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitializeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sender_site = 1;
    if (has_sender_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_site());
    }

    // required .peloton.networking.Status status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitializeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitializeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitializeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitializeResponse::MergeFrom(const InitializeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitializeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitializeResponse::CopyFrom(const InitializeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InitializeResponse::Swap(InitializeResponse* other) {
  if (other != this) {
    std::swap(sender_site_, other->sender_site_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitializeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitializeResponse_descriptor_;
  metadata.reflection = InitializeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShutdownPrepareRequest::kSenderSiteFieldNumber;
const int ShutdownPrepareRequest::kErrorFieldNumber;
#endif  // !_MSC_VER

ShutdownPrepareRequest::ShutdownPrepareRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShutdownPrepareRequest::InitAsDefaultInstance() {
}

ShutdownPrepareRequest::ShutdownPrepareRequest(const ShutdownPrepareRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShutdownPrepareRequest::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShutdownPrepareRequest::~ShutdownPrepareRequest() {
  SharedDtor();
}

void ShutdownPrepareRequest::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void ShutdownPrepareRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownPrepareRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShutdownPrepareRequest_descriptor_;
}

const ShutdownPrepareRequest& ShutdownPrepareRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

ShutdownPrepareRequest* ShutdownPrepareRequest::default_instance_ = NULL;

ShutdownPrepareRequest* ShutdownPrepareRequest::New() const {
  return new ShutdownPrepareRequest;
}

void ShutdownPrepareRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sender_site_ = 0;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShutdownPrepareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional bytes error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShutdownPrepareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // optional bytes error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShutdownPrepareRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // optional bytes error = 2;
  if (has_error()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShutdownPrepareRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sender_site = 1;
    if (has_sender_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_site());
    }

    // optional bytes error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownPrepareRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShutdownPrepareRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShutdownPrepareRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShutdownPrepareRequest::MergeFrom(const ShutdownPrepareRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShutdownPrepareRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownPrepareRequest::CopyFrom(const ShutdownPrepareRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownPrepareRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ShutdownPrepareRequest::Swap(ShutdownPrepareRequest* other) {
  if (other != this) {
    std::swap(sender_site_, other->sender_site_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShutdownPrepareRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShutdownPrepareRequest_descriptor_;
  metadata.reflection = ShutdownPrepareRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShutdownPrepareResponse::kSenderSiteFieldNumber;
#endif  // !_MSC_VER

ShutdownPrepareResponse::ShutdownPrepareResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShutdownPrepareResponse::InitAsDefaultInstance() {
}

ShutdownPrepareResponse::ShutdownPrepareResponse(const ShutdownPrepareResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShutdownPrepareResponse::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShutdownPrepareResponse::~ShutdownPrepareResponse() {
  SharedDtor();
}

void ShutdownPrepareResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShutdownPrepareResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownPrepareResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShutdownPrepareResponse_descriptor_;
}

const ShutdownPrepareResponse& ShutdownPrepareResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

ShutdownPrepareResponse* ShutdownPrepareResponse::default_instance_ = NULL;

ShutdownPrepareResponse* ShutdownPrepareResponse::New() const {
  return new ShutdownPrepareResponse;
}

void ShutdownPrepareResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sender_site_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShutdownPrepareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShutdownPrepareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShutdownPrepareResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShutdownPrepareResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sender_site = 1;
    if (has_sender_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_site());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownPrepareResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShutdownPrepareResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShutdownPrepareResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShutdownPrepareResponse::MergeFrom(const ShutdownPrepareResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShutdownPrepareResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownPrepareResponse::CopyFrom(const ShutdownPrepareResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownPrepareResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ShutdownPrepareResponse::Swap(ShutdownPrepareResponse* other) {
  if (other != this) {
    std::swap(sender_site_, other->sender_site_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShutdownPrepareResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShutdownPrepareResponse_descriptor_;
  metadata.reflection = ShutdownPrepareResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShutdownRequest::kSenderSiteFieldNumber;
const int ShutdownRequest::kExitStatusFieldNumber;
#endif  // !_MSC_VER

ShutdownRequest::ShutdownRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShutdownRequest::InitAsDefaultInstance() {
}

ShutdownRequest::ShutdownRequest(const ShutdownRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShutdownRequest::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  exit_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShutdownRequest::~ShutdownRequest() {
  SharedDtor();
}

void ShutdownRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShutdownRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShutdownRequest_descriptor_;
}

const ShutdownRequest& ShutdownRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

ShutdownRequest* ShutdownRequest::default_instance_ = NULL;

ShutdownRequest* ShutdownRequest::New() const {
  return new ShutdownRequest;
}

void ShutdownRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sender_site_ = 0;
    exit_status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShutdownRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exit_status;
        break;
      }

      // required int32 exit_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exit_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exit_status_)));
          set_has_exit_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShutdownRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required int32 exit_status = 2;
  if (has_exit_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exit_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShutdownRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required int32 exit_status = 2;
  if (has_exit_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exit_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShutdownRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sender_site = 1;
    if (has_sender_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_site());
    }

    // required int32 exit_status = 2;
    if (has_exit_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exit_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShutdownRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShutdownRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShutdownRequest::MergeFrom(const ShutdownRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_exit_status()) {
      set_exit_status(from.exit_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShutdownRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownRequest::CopyFrom(const ShutdownRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ShutdownRequest::Swap(ShutdownRequest* other) {
  if (other != this) {
    std::swap(sender_site_, other->sender_site_);
    std::swap(exit_status_, other->exit_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShutdownRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShutdownRequest_descriptor_;
  metadata.reflection = ShutdownRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShutdownResponse::kSenderSiteFieldNumber;
#endif  // !_MSC_VER

ShutdownResponse::ShutdownResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShutdownResponse::InitAsDefaultInstance() {
}

ShutdownResponse::ShutdownResponse(const ShutdownResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShutdownResponse::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShutdownResponse::~ShutdownResponse() {
  SharedDtor();
}

void ShutdownResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShutdownResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShutdownResponse_descriptor_;
}

const ShutdownResponse& ShutdownResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

ShutdownResponse* ShutdownResponse::default_instance_ = NULL;

ShutdownResponse* ShutdownResponse::New() const {
  return new ShutdownResponse;
}

void ShutdownResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sender_site_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShutdownResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShutdownResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShutdownResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShutdownResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sender_site = 1;
    if (has_sender_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_site());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShutdownResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShutdownResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShutdownResponse::MergeFrom(const ShutdownResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShutdownResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownResponse::CopyFrom(const ShutdownResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ShutdownResponse::Swap(ShutdownResponse* other) {
  if (other != this) {
    std::swap(sender_site_, other->sender_site_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShutdownResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShutdownResponse_descriptor_;
  metadata.reflection = ShutdownResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartbeatRequest::kSenderSiteFieldNumber;
const int HeartbeatRequest::kLastTransactionIdFieldNumber;
#endif  // !_MSC_VER

HeartbeatRequest::HeartbeatRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartbeatRequest::InitAsDefaultInstance() {
}

HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartbeatRequest::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  last_transaction_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartbeatRequest::~HeartbeatRequest() {
  SharedDtor();
}

void HeartbeatRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartbeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartbeatRequest_descriptor_;
}

const HeartbeatRequest& HeartbeatRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

HeartbeatRequest* HeartbeatRequest::default_instance_ = NULL;

HeartbeatRequest* HeartbeatRequest::New() const {
  return new HeartbeatRequest;
}

void HeartbeatRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sender_site_ = 0;
    last_transaction_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_transaction_id;
        break;
      }

      // required int64 last_transaction_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_transaction_id_)));
          set_has_last_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required int64 last_transaction_id = 2;
  if (has_last_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_transaction_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartbeatRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required int64 last_transaction_id = 2;
  if (has_last_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_transaction_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartbeatRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sender_site = 1;
    if (has_sender_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_site());
    }

    // required int64 last_transaction_id = 2;
    if (has_last_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_transaction_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartbeatRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartbeatRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartbeatRequest::MergeFrom(const HeartbeatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_last_transaction_id()) {
      set_last_transaction_id(from.last_transaction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatRequest::CopyFrom(const HeartbeatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HeartbeatRequest::Swap(HeartbeatRequest* other) {
  if (other != this) {
    std::swap(sender_site_, other->sender_site_);
    std::swap(last_transaction_id_, other->last_transaction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartbeatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartbeatRequest_descriptor_;
  metadata.reflection = HeartbeatRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartbeatResponse::kSenderSiteFieldNumber;
const int HeartbeatResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

HeartbeatResponse::HeartbeatResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartbeatResponse::InitAsDefaultInstance() {
}

HeartbeatResponse::HeartbeatResponse(const HeartbeatResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartbeatResponse::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartbeatResponse::~HeartbeatResponse() {
  SharedDtor();
}

void HeartbeatResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartbeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartbeatResponse_descriptor_;
}

const HeartbeatResponse& HeartbeatResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

HeartbeatResponse* HeartbeatResponse::default_instance_ = NULL;

HeartbeatResponse* HeartbeatResponse::New() const {
  return new HeartbeatResponse;
}

void HeartbeatResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sender_site_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartbeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .peloton.networking.Status status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartbeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required .peloton.networking.Status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartbeatResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required .peloton.networking.Status status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartbeatResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sender_site = 1;
    if (has_sender_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_site());
    }

    // required .peloton.networking.Status status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartbeatResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartbeatResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartbeatResponse::MergeFrom(const HeartbeatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartbeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatResponse::CopyFrom(const HeartbeatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HeartbeatResponse::Swap(HeartbeatResponse* other) {
  if (other != this) {
    std::swap(sender_site_, other->sender_site_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartbeatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartbeatResponse_descriptor_;
  metadata.reflection = HeartbeatResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnevictDataRequest::kSenderSiteFieldNumber;
const int UnevictDataRequest::kTransactionIdFieldNumber;
const int UnevictDataRequest::kPartitionIdFieldNumber;
const int UnevictDataRequest::kTableIdFieldNumber;
const int UnevictDataRequest::kBlockIdsFieldNumber;
const int UnevictDataRequest::kTupleOffsetsFieldNumber;
const int UnevictDataRequest::kNewTransactionIdFieldNumber;
#endif  // !_MSC_VER

UnevictDataRequest::UnevictDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnevictDataRequest::InitAsDefaultInstance() {
}

UnevictDataRequest::UnevictDataRequest(const UnevictDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnevictDataRequest::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  partition_id_ = 0;
  table_id_ = 0;
  new_transaction_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnevictDataRequest::~UnevictDataRequest() {
  SharedDtor();
}

void UnevictDataRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnevictDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnevictDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnevictDataRequest_descriptor_;
}

const UnevictDataRequest& UnevictDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

UnevictDataRequest* UnevictDataRequest::default_instance_ = NULL;

UnevictDataRequest* UnevictDataRequest::New() const {
  return new UnevictDataRequest;
}

void UnevictDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sender_site_ = 0;
    transaction_id_ = GOOGLE_LONGLONG(0);
    partition_id_ = 0;
    table_id_ = 0;
    new_transaction_id_ = GOOGLE_LONGLONG(0);
  }
  block_ids_.Clear();
  tuple_offsets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnevictDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_transaction_id;
        break;
      }

      // required int64 transaction_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_partition_id;
        break;
      }

      // required int32 partition_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partition_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_id_)));
          set_has_partition_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_table_id;
        break;
      }

      // required int32 table_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_block_ids;
        break;
      }

      // repeated int32 block_ids = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_block_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42, input, this->mutable_block_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tuple_offsets;
        break;
      }

      // repeated int32 tuple_offsets = 6 [packed = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tuple_offsets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tuple_offsets())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50, input, this->mutable_tuple_offsets())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_new_transaction_id;
        break;
      }

      // required int64 new_transaction_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_transaction_id_)));
          set_has_new_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnevictDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->transaction_id(), output);
  }

  // required int32 partition_id = 3;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->partition_id(), output);
  }

  // required int32 table_id = 4;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->table_id(), output);
  }

  // repeated int32 block_ids = 5 [packed = true];
  if (this->block_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_block_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->block_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->block_ids(i), output);
  }

  // repeated int32 tuple_offsets = 6 [packed = true];
  if (this->tuple_offsets_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tuple_offsets_cached_byte_size_);
  }
  for (int i = 0; i < this->tuple_offsets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->tuple_offsets(i), output);
  }

  // required int64 new_transaction_id = 7;
  if (has_new_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->new_transaction_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnevictDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->transaction_id(), target);
  }

  // required int32 partition_id = 3;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->partition_id(), target);
  }

  // required int32 table_id = 4;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->table_id(), target);
  }

  // repeated int32 block_ids = 5 [packed = true];
  if (this->block_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _block_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->block_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->block_ids(i), target);
  }

  // repeated int32 tuple_offsets = 6 [packed = true];
  if (this->tuple_offsets_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _tuple_offsets_cached_byte_size_, target);
  }
  for (int i = 0; i < this->tuple_offsets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->tuple_offsets(i), target);
  }

  // required int64 new_transaction_id = 7;
  if (has_new_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->new_transaction_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnevictDataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sender_site = 1;
    if (has_sender_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_site());
    }

    // required int64 transaction_id = 2;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transaction_id());
    }

    // required int32 partition_id = 3;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partition_id());
    }

    // required int32 table_id = 4;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

    // required int64 new_transaction_id = 7;
    if (has_new_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->new_transaction_id());
    }

  }
  // repeated int32 block_ids = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->block_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->block_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _block_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 tuple_offsets = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->tuple_offsets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tuple_offsets(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tuple_offsets_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnevictDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnevictDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnevictDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnevictDataRequest::MergeFrom(const UnevictDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  block_ids_.MergeFrom(from.block_ids_);
  tuple_offsets_.MergeFrom(from.tuple_offsets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_partition_id()) {
      set_partition_id(from.partition_id());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_new_transaction_id()) {
      set_new_transaction_id(from.new_transaction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnevictDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnevictDataRequest::CopyFrom(const UnevictDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnevictDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000004f) != 0x0000004f) return false;

  return true;
}

void UnevictDataRequest::Swap(UnevictDataRequest* other) {
  if (other != this) {
    std::swap(sender_site_, other->sender_site_);
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(partition_id_, other->partition_id_);
    std::swap(table_id_, other->table_id_);
    block_ids_.Swap(&other->block_ids_);
    tuple_offsets_.Swap(&other->tuple_offsets_);
    std::swap(new_transaction_id_, other->new_transaction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnevictDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnevictDataRequest_descriptor_;
  metadata.reflection = UnevictDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnevictDataResponse::kSenderSiteFieldNumber;
const int UnevictDataResponse::kStatusFieldNumber;
const int UnevictDataResponse::kTransactionIdFieldNumber;
const int UnevictDataResponse::kPartitionIdFieldNumber;
#endif  // !_MSC_VER

UnevictDataResponse::UnevictDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnevictDataResponse::InitAsDefaultInstance() {
}

UnevictDataResponse::UnevictDataResponse(const UnevictDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnevictDataResponse::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  status_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  partition_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnevictDataResponse::~UnevictDataResponse() {
  SharedDtor();
}

void UnevictDataResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnevictDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnevictDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnevictDataResponse_descriptor_;
}

const UnevictDataResponse& UnevictDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

UnevictDataResponse* UnevictDataResponse::default_instance_ = NULL;

UnevictDataResponse* UnevictDataResponse::New() const {
  return new UnevictDataResponse;
}

void UnevictDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sender_site_ = 0;
    status_ = 0;
    transaction_id_ = GOOGLE_LONGLONG(0);
    partition_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnevictDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .peloton.networking.Status status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_transaction_id;
        break;
      }

      // required int64 transaction_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_partition_id;
        break;
      }

      // required int32 partition_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partition_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_id_)));
          set_has_partition_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnevictDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required .peloton.networking.Status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required int64 transaction_id = 3;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->transaction_id(), output);
  }

  // required int32 partition_id = 4;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->partition_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnevictDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required .peloton.networking.Status status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // required int64 transaction_id = 3;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->transaction_id(), target);
  }

  // required int32 partition_id = 4;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->partition_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnevictDataResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sender_site = 1;
    if (has_sender_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_site());
    }

    // required .peloton.networking.Status status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required int64 transaction_id = 3;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transaction_id());
    }

    // required int32 partition_id = 4;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partition_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnevictDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnevictDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnevictDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnevictDataResponse::MergeFrom(const UnevictDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_partition_id()) {
      set_partition_id(from.partition_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnevictDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnevictDataResponse::CopyFrom(const UnevictDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnevictDataResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UnevictDataResponse::Swap(UnevictDataResponse* other) {
  if (other != this) {
    std::swap(sender_site_, other->sender_site_);
    std::swap(status_, other->status_);
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(partition_id_, other->partition_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnevictDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnevictDataResponse_descriptor_;
  metadata.reflection = UnevictDataResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeSyncRequest::kSenderSiteFieldNumber;
const int TimeSyncRequest::kT0SFieldNumber;
#endif  // !_MSC_VER

TimeSyncRequest::TimeSyncRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimeSyncRequest::InitAsDefaultInstance() {
}

TimeSyncRequest::TimeSyncRequest(const TimeSyncRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimeSyncRequest::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  t0_s_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeSyncRequest::~TimeSyncRequest() {
  SharedDtor();
}

void TimeSyncRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeSyncRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSyncRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeSyncRequest_descriptor_;
}

const TimeSyncRequest& TimeSyncRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TimeSyncRequest* TimeSyncRequest::default_instance_ = NULL;

TimeSyncRequest* TimeSyncRequest::New() const {
  return new TimeSyncRequest;
}

void TimeSyncRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sender_site_ = 0;
    t0_s_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeSyncRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_t0_s;
        break;
      }

      // required int64 t0_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t0_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t0_s_)));
          set_has_t0_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeSyncRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required int64 t0_s = 2;
  if (has_t0_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->t0_s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimeSyncRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required int64 t0_s = 2;
  if (has_t0_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->t0_s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimeSyncRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sender_site = 1;
    if (has_sender_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_site());
    }

    // required int64 t0_s = 2;
    if (has_t0_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t0_s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSyncRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeSyncRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeSyncRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeSyncRequest::MergeFrom(const TimeSyncRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_t0_s()) {
      set_t0_s(from.t0_s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeSyncRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSyncRequest::CopyFrom(const TimeSyncRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSyncRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TimeSyncRequest::Swap(TimeSyncRequest* other) {
  if (other != this) {
    std::swap(sender_site_, other->sender_site_);
    std::swap(t0_s_, other->t0_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeSyncRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeSyncRequest_descriptor_;
  metadata.reflection = TimeSyncRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeSyncResponse::kSenderSiteFieldNumber;
const int TimeSyncResponse::kT0SFieldNumber;
const int TimeSyncResponse::kT0RFieldNumber;
const int TimeSyncResponse::kT1SFieldNumber;
#endif  // !_MSC_VER

TimeSyncResponse::TimeSyncResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimeSyncResponse::InitAsDefaultInstance() {
}

TimeSyncResponse::TimeSyncResponse(const TimeSyncResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimeSyncResponse::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  t0_s_ = GOOGLE_LONGLONG(0);
  t0_r_ = GOOGLE_LONGLONG(0);
  t1_s_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeSyncResponse::~TimeSyncResponse() {
  SharedDtor();
}

void TimeSyncResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeSyncResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSyncResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeSyncResponse_descriptor_;
}

const TimeSyncResponse& TimeSyncResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TimeSyncResponse* TimeSyncResponse::default_instance_ = NULL;

TimeSyncResponse* TimeSyncResponse::New() const {
  return new TimeSyncResponse;
}

void TimeSyncResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sender_site_ = 0;
    t0_s_ = GOOGLE_LONGLONG(0);
    t0_r_ = GOOGLE_LONGLONG(0);
    t1_s_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeSyncResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_t0_s;
        break;
      }

      // required int64 t0_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t0_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t0_s_)));
          set_has_t0_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_t0_r;
        break;
      }

      // required int64 t0_r = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t0_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t0_r_)));
          set_has_t0_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_t1_s;
        break;
      }

      // required int64 t1_s = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t1_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t1_s_)));
          set_has_t1_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeSyncResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required int64 t0_s = 2;
  if (has_t0_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->t0_s(), output);
  }

  // required int64 t0_r = 3;
  if (has_t0_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->t0_r(), output);
  }

  // required int64 t1_s = 4;
  if (has_t1_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->t1_s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimeSyncResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required int64 t0_s = 2;
  if (has_t0_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->t0_s(), target);
  }

  // required int64 t0_r = 3;
  if (has_t0_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->t0_r(), target);
  }

  // required int64 t1_s = 4;
  if (has_t1_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->t1_s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimeSyncResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sender_site = 1;
    if (has_sender_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_site());
    }

    // required int64 t0_s = 2;
    if (has_t0_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t0_s());
    }

    // required int64 t0_r = 3;
    if (has_t0_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t0_r());
    }

    // required int64 t1_s = 4;
    if (has_t1_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t1_s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSyncResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeSyncResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeSyncResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeSyncResponse::MergeFrom(const TimeSyncResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_t0_s()) {
      set_t0_s(from.t0_s());
    }
    if (from.has_t0_r()) {
      set_t0_r(from.t0_r());
    }
    if (from.has_t1_s()) {
      set_t1_s(from.t1_s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeSyncResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSyncResponse::CopyFrom(const TimeSyncResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSyncResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TimeSyncResponse::Swap(TimeSyncResponse* other) {
  if (other != this) {
    std::swap(sender_site_, other->sender_site_);
    std::swap(t0_s_, other->t0_s_);
    std::swap(t0_r_, other->t0_r_);
    std::swap(t1_s_, other->t1_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeSyncResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeSyncResponse_descriptor_;
  metadata.reflection = TimeSyncResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryPlanExecRequest::kPlanTypeFieldNumber;
const int QueryPlanExecRequest::kParamNumFieldNumber;
const int QueryPlanExecRequest::kParamListFieldNumber;
const int QueryPlanExecRequest::kPlanFieldNumber;
#endif  // !_MSC_VER

QueryPlanExecRequest::QueryPlanExecRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryPlanExecRequest::InitAsDefaultInstance() {
}

QueryPlanExecRequest::QueryPlanExecRequest(const QueryPlanExecRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryPlanExecRequest::SharedCtor() {
  _cached_size_ = 0;
  plan_type_ = 0;
  param_num_ = 0;
  param_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  plan_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryPlanExecRequest::~QueryPlanExecRequest() {
  SharedDtor();
}

void QueryPlanExecRequest::SharedDtor() {
  if (param_list_ != &::google::protobuf::internal::kEmptyString) {
    delete param_list_;
  }
  if (plan_ != &::google::protobuf::internal::kEmptyString) {
    delete plan_;
  }
  if (this != default_instance_) {
  }
}

void QueryPlanExecRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPlanExecRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPlanExecRequest_descriptor_;
}

const QueryPlanExecRequest& QueryPlanExecRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

QueryPlanExecRequest* QueryPlanExecRequest::default_instance_ = NULL;

QueryPlanExecRequest* QueryPlanExecRequest::New() const {
  return new QueryPlanExecRequest;
}

void QueryPlanExecRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plan_type_ = 0;
    param_num_ = 0;
    if (has_param_list()) {
      if (param_list_ != &::google::protobuf::internal::kEmptyString) {
        param_list_->clear();
      }
    }
    if (has_plan()) {
      if (plan_ != &::google::protobuf::internal::kEmptyString) {
        plan_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryPlanExecRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 plan_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plan_type_)));
          set_has_plan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_param_num;
        break;
      }

      // optional int32 param_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_num_)));
          set_has_param_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_param_list;
        break;
      }

      // optional bytes param_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_param_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_plan;
        break;
      }

      // required bytes plan = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_plan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryPlanExecRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 plan_type = 1;
  if (has_plan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->plan_type(), output);
  }

  // optional int32 param_num = 2;
  if (has_param_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->param_num(), output);
  }

  // optional bytes param_list = 3;
  if (has_param_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->param_list(), output);
  }

  // required bytes plan = 4;
  if (has_plan()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->plan(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryPlanExecRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 plan_type = 1;
  if (has_plan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->plan_type(), target);
  }

  // optional int32 param_num = 2;
  if (has_param_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->param_num(), target);
  }

  // optional bytes param_list = 3;
  if (has_param_list()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->param_list(), target);
  }

  // required bytes plan = 4;
  if (has_plan()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->plan(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryPlanExecRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 plan_type = 1;
    if (has_plan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plan_type());
    }

    // optional int32 param_num = 2;
    if (has_param_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param_num());
    }

    // optional bytes param_list = 3;
    if (has_param_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->param_list());
    }

    // required bytes plan = 4;
    if (has_plan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->plan());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPlanExecRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryPlanExecRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryPlanExecRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryPlanExecRequest::MergeFrom(const QueryPlanExecRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plan_type()) {
      set_plan_type(from.plan_type());
    }
    if (from.has_param_num()) {
      set_param_num(from.param_num());
    }
    if (from.has_param_list()) {
      set_param_list(from.param_list());
    }
    if (from.has_plan()) {
      set_plan(from.plan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryPlanExecRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPlanExecRequest::CopyFrom(const QueryPlanExecRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPlanExecRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void QueryPlanExecRequest::Swap(QueryPlanExecRequest* other) {
  if (other != this) {
    std::swap(plan_type_, other->plan_type_);
    std::swap(param_num_, other->param_num_);
    std::swap(param_list_, other->param_list_);
    std::swap(plan_, other->plan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryPlanExecRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPlanExecRequest_descriptor_;
  metadata.reflection = QueryPlanExecRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryPlanExecResponse::kTupleCountFieldNumber;
const int QueryPlanExecResponse::kTileCountFieldNumber;
const int QueryPlanExecResponse::kResultFieldNumber;
#endif  // !_MSC_VER

QueryPlanExecResponse::QueryPlanExecResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryPlanExecResponse::InitAsDefaultInstance() {
}

QueryPlanExecResponse::QueryPlanExecResponse(const QueryPlanExecResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryPlanExecResponse::SharedCtor() {
  _cached_size_ = 0;
  tuple_count_ = 0;
  tile_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryPlanExecResponse::~QueryPlanExecResponse() {
  SharedDtor();
}

void QueryPlanExecResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryPlanExecResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPlanExecResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPlanExecResponse_descriptor_;
}

const QueryPlanExecResponse& QueryPlanExecResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

QueryPlanExecResponse* QueryPlanExecResponse::default_instance_ = NULL;

QueryPlanExecResponse* QueryPlanExecResponse::New() const {
  return new QueryPlanExecResponse;
}

void QueryPlanExecResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tuple_count_ = 0;
    tile_count_ = 0;
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryPlanExecResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tuple_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tuple_count_)));
          set_has_tuple_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tile_count;
        break;
      }

      // optional int32 tile_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tile_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tile_count_)));
          set_has_tile_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }

      // repeated bytes result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryPlanExecResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tuple_count = 1;
  if (has_tuple_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tuple_count(), output);
  }

  // optional int32 tile_count = 2;
  if (has_tile_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tile_count(), output);
  }

  // repeated bytes result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryPlanExecResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tuple_count = 1;
  if (has_tuple_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tuple_count(), target);
  }

  // optional int32 tile_count = 2;
  if (has_tile_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tile_count(), target);
  }

  // repeated bytes result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryPlanExecResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tuple_count = 1;
    if (has_tuple_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tuple_count());
    }

    // optional int32 tile_count = 2;
    if (has_tile_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tile_count());
    }

  }
  // repeated bytes result = 3;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPlanExecResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryPlanExecResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryPlanExecResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryPlanExecResponse::MergeFrom(const QueryPlanExecResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tuple_count()) {
      set_tuple_count(from.tuple_count());
    }
    if (from.has_tile_count()) {
      set_tile_count(from.tile_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryPlanExecResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPlanExecResponse::CopyFrom(const QueryPlanExecResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPlanExecResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QueryPlanExecResponse::Swap(QueryPlanExecResponse* other) {
  if (other != this) {
    std::swap(tuple_count_, other->tuple_count_);
    std::swap(tile_count_, other->tile_count_);
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryPlanExecResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPlanExecResponse_descriptor_;
  metadata.reflection = QueryPlanExecResponse_reflection_;
  return metadata;
}


// ===================================================================

AbstractPelotonService::~AbstractPelotonService() {}

const ::google::protobuf::ServiceDescriptor* AbstractPelotonService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AbstractPelotonService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* AbstractPelotonService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return AbstractPelotonService_descriptor_;
}

void AbstractPelotonService::TransactionInit(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::TransactionInitRequest*,
                         ::peloton::networking::TransactionInitResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionInit() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionWork(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::TransactionWorkRequest*,
                         ::peloton::networking::TransactionWorkResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionWork() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionPrefetch(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::TransactionPrefetchResult*,
                         ::peloton::networking::TransactionPrefetchAcknowledgement*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionPrefetch() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionMap(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::TransactionMapRequest*,
                         ::peloton::networking::TransactionMapResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionMap() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionReduce(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::TransactionReduceRequest*,
                         ::peloton::networking::TransactionReduceResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionReduce() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionPrepare(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::TransactionPrepareRequest*,
                         ::peloton::networking::TransactionPrepareResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionPrepare() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionFinish(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::TransactionFinishRequest*,
                         ::peloton::networking::TransactionFinishResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionFinish() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionRedirect(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::TransactionRedirectRequest*,
                         ::peloton::networking::TransactionRedirectResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionRedirect() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionDebug(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::TransactionDebugRequest*,
                         ::peloton::networking::TransactionDebugResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionDebug() not implemented.");
  done->Run();
}

void AbstractPelotonService::SendData(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::SendDataRequest*,
                         ::peloton::networking::SendDataResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendData() not implemented.");
  done->Run();
}

void AbstractPelotonService::Initialize(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::InitializeRequest*,
                         ::peloton::networking::InitializeResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Initialize() not implemented.");
  done->Run();
}

void AbstractPelotonService::ShutdownPrepare(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::ShutdownPrepareRequest*,
                         ::peloton::networking::ShutdownPrepareResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ShutdownPrepare() not implemented.");
  done->Run();
}

void AbstractPelotonService::Shutdown(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::ShutdownRequest*,
                         ::peloton::networking::ShutdownResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Shutdown() not implemented.");
  done->Run();
}

void AbstractPelotonService::Heartbeat(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::HeartbeatRequest*,
                         ::peloton::networking::HeartbeatResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Heartbeat() not implemented.");
  done->Run();
}

void AbstractPelotonService::UnevictData(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::UnevictDataRequest*,
                         ::peloton::networking::UnevictDataResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UnevictData() not implemented.");
  done->Run();
}

void AbstractPelotonService::TimeSync(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::TimeSyncRequest*,
                         ::peloton::networking::TimeSyncResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TimeSync() not implemented.");
  done->Run();
}

void AbstractPelotonService::QueryPlan(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::QueryPlanExecRequest*,
                         ::peloton::networking::QueryPlanExecResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryPlan() not implemented.");
  done->Run();
}

void AbstractPelotonService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), AbstractPelotonService_descriptor_);
  switch(method->index()) {
    case 0:
      TransactionInit(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::TransactionInitRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::TransactionInitResponse*>(response),
             done);
      break;
    case 1:
      TransactionWork(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::TransactionWorkRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::TransactionWorkResponse*>(response),
             done);
      break;
    case 2:
      TransactionPrefetch(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::TransactionPrefetchResult*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::TransactionPrefetchAcknowledgement*>(response),
             done);
      break;
    case 3:
      TransactionMap(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::TransactionMapRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::TransactionMapResponse*>(response),
             done);
      break;
    case 4:
      TransactionReduce(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::TransactionReduceRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::TransactionReduceResponse*>(response),
             done);
      break;
    case 5:
      TransactionPrepare(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::TransactionPrepareRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::TransactionPrepareResponse*>(response),
             done);
      break;
    case 6:
      TransactionFinish(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::TransactionFinishRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::TransactionFinishResponse*>(response),
             done);
      break;
    case 7:
      TransactionRedirect(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::TransactionRedirectRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::TransactionRedirectResponse*>(response),
             done);
      break;
    case 8:
      TransactionDebug(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::TransactionDebugRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::TransactionDebugResponse*>(response),
             done);
      break;
    case 9:
      SendData(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::SendDataRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::SendDataResponse*>(response),
             done);
      break;
    case 10:
      Initialize(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::InitializeRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::InitializeResponse*>(response),
             done);
      break;
    case 11:
      ShutdownPrepare(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::ShutdownPrepareRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::ShutdownPrepareResponse*>(response),
             done);
      break;
    case 12:
      Shutdown(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::ShutdownRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::ShutdownResponse*>(response),
             done);
      break;
    case 13:
      Heartbeat(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::HeartbeatRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::HeartbeatResponse*>(response),
             done);
      break;
    case 14:
      UnevictData(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::UnevictDataRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::UnevictDataResponse*>(response),
             done);
      break;
    case 15:
      TimeSync(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::TimeSyncRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::TimeSyncResponse*>(response),
             done);
      break;
    case 16:
      QueryPlan(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::QueryPlanExecRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::QueryPlanExecResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& AbstractPelotonService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::peloton::networking::TransactionInitRequest::default_instance();
    case 1:
      return ::peloton::networking::TransactionWorkRequest::default_instance();
    case 2:
      return ::peloton::networking::TransactionPrefetchResult::default_instance();
    case 3:
      return ::peloton::networking::TransactionMapRequest::default_instance();
    case 4:
      return ::peloton::networking::TransactionReduceRequest::default_instance();
    case 5:
      return ::peloton::networking::TransactionPrepareRequest::default_instance();
    case 6:
      return ::peloton::networking::TransactionFinishRequest::default_instance();
    case 7:
      return ::peloton::networking::TransactionRedirectRequest::default_instance();
    case 8:
      return ::peloton::networking::TransactionDebugRequest::default_instance();
    case 9:
      return ::peloton::networking::SendDataRequest::default_instance();
    case 10:
      return ::peloton::networking::InitializeRequest::default_instance();
    case 11:
      return ::peloton::networking::ShutdownPrepareRequest::default_instance();
    case 12:
      return ::peloton::networking::ShutdownRequest::default_instance();
    case 13:
      return ::peloton::networking::HeartbeatRequest::default_instance();
    case 14:
      return ::peloton::networking::UnevictDataRequest::default_instance();
    case 15:
      return ::peloton::networking::TimeSyncRequest::default_instance();
    case 16:
      return ::peloton::networking::QueryPlanExecRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& AbstractPelotonService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::peloton::networking::TransactionInitResponse::default_instance();
    case 1:
      return ::peloton::networking::TransactionWorkResponse::default_instance();
    case 2:
      return ::peloton::networking::TransactionPrefetchAcknowledgement::default_instance();
    case 3:
      return ::peloton::networking::TransactionMapResponse::default_instance();
    case 4:
      return ::peloton::networking::TransactionReduceResponse::default_instance();
    case 5:
      return ::peloton::networking::TransactionPrepareResponse::default_instance();
    case 6:
      return ::peloton::networking::TransactionFinishResponse::default_instance();
    case 7:
      return ::peloton::networking::TransactionRedirectResponse::default_instance();
    case 8:
      return ::peloton::networking::TransactionDebugResponse::default_instance();
    case 9:
      return ::peloton::networking::SendDataResponse::default_instance();
    case 10:
      return ::peloton::networking::InitializeResponse::default_instance();
    case 11:
      return ::peloton::networking::ShutdownPrepareResponse::default_instance();
    case 12:
      return ::peloton::networking::ShutdownResponse::default_instance();
    case 13:
      return ::peloton::networking::HeartbeatResponse::default_instance();
    case 14:
      return ::peloton::networking::UnevictDataResponse::default_instance();
    case 15:
      return ::peloton::networking::TimeSyncResponse::default_instance();
    case 16:
      return ::peloton::networking::QueryPlanExecResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

AbstractPelotonService_Stub::AbstractPelotonService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
AbstractPelotonService_Stub::AbstractPelotonService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
AbstractPelotonService_Stub::~AbstractPelotonService_Stub() {
  if (owns_channel_) delete channel_;
}

void AbstractPelotonService_Stub::TransactionInit(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::TransactionInitRequest* request,
                              ::peloton::networking::TransactionInitResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionWork(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::TransactionWorkRequest* request,
                              ::peloton::networking::TransactionWorkResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionPrefetch(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::TransactionPrefetchResult* request,
                              ::peloton::networking::TransactionPrefetchAcknowledgement* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionMap(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::TransactionMapRequest* request,
                              ::peloton::networking::TransactionMapResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionReduce(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::TransactionReduceRequest* request,
                              ::peloton::networking::TransactionReduceResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionPrepare(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::TransactionPrepareRequest* request,
                              ::peloton::networking::TransactionPrepareResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionFinish(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::TransactionFinishRequest* request,
                              ::peloton::networking::TransactionFinishResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionRedirect(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::TransactionRedirectRequest* request,
                              ::peloton::networking::TransactionRedirectResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionDebug(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::TransactionDebugRequest* request,
                              ::peloton::networking::TransactionDebugResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::SendData(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::SendDataRequest* request,
                              ::peloton::networking::SendDataResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::Initialize(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::InitializeRequest* request,
                              ::peloton::networking::InitializeResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::ShutdownPrepare(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::ShutdownPrepareRequest* request,
                              ::peloton::networking::ShutdownPrepareResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::Shutdown(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::ShutdownRequest* request,
                              ::peloton::networking::ShutdownResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::Heartbeat(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::HeartbeatRequest* request,
                              ::peloton::networking::HeartbeatResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::UnevictData(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::UnevictDataRequest* request,
                              ::peloton::networking::UnevictDataResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TimeSync(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::TimeSyncRequest* request,
                              ::peloton::networking::TimeSyncResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::QueryPlan(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::QueryPlanExecRequest* request,
                              ::peloton::networking::QueryPlanExecResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(16),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace networking
}  // namespace peloton

// @@protoc_insertion_point(global_scope)
