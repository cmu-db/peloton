// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.query.proto

#ifndef PROTOBUF_message_2equery_2eproto__INCLUDED
#define PROTOBUF_message_2equery_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace peloton {
namespace message {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_message_2equery_2eproto();
void protobuf_AssignDesc_message_2equery_2eproto();
void protobuf_ShutdownFile_message_2equery_2eproto();

class query;

// ===================================================================

class query : public ::google::protobuf::Message {
 public:
  query();
  virtual ~query();

  query(const query& from);

  inline query& operator=(const query& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const query& default_instance();

  void Swap(query* other);

  // implements Message ----------------------------------------------

  inline query* New() const { return New(NULL); }

  query* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const query& from);
  void MergeFrom(const query& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(query* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string statement = 2;
  bool has_statement() const;
  void clear_statement();
  static const int kStatementFieldNumber = 2;
  const ::std::string& statement() const;
  void set_statement(const ::std::string& value);
  void set_statement(const char* value);
  void set_statement(const char* value, size_t size);
  ::std::string* mutable_statement();
  ::std::string* release_statement();
  void set_allocated_statement(::std::string* statement);

  // @@protoc_insertion_point(class_scope:peloton.message.query)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_statement();
  inline void clear_has_statement();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr statement_;
  friend void  protobuf_AddDesc_message_2equery_2eproto();
  friend void protobuf_AssignDesc_message_2equery_2eproto();
  friend void protobuf_ShutdownFile_message_2equery_2eproto();

  void InitAsDefaultInstance();
  static query* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// query

// required string type = 1;
inline bool query::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void query::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void query::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void query::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& query::type() const {
  // @@protoc_insertion_point(field_get:peloton.message.query.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void query::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.message.query.type)
}
inline void query::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.message.query.type)
}
inline void query::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.message.query.type)
}
inline ::std::string* query::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:peloton.message.query.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* query::release_type() {
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void query::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:peloton.message.query.type)
}

// required string statement = 2;
inline bool query::has_statement() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void query::set_has_statement() {
  _has_bits_[0] |= 0x00000002u;
}
inline void query::clear_has_statement() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void query::clear_statement() {
  statement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_statement();
}
inline const ::std::string& query::statement() const {
  // @@protoc_insertion_point(field_get:peloton.message.query.statement)
  return statement_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void query::set_statement(const ::std::string& value) {
  set_has_statement();
  statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.message.query.statement)
}
inline void query::set_statement(const char* value) {
  set_has_statement();
  statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.message.query.statement)
}
inline void query::set_statement(const char* value, size_t size) {
  set_has_statement();
  statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.message.query.statement)
}
inline ::std::string* query::mutable_statement() {
  set_has_statement();
  // @@protoc_insertion_point(field_mutable:peloton.message.query.statement)
  return statement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* query::release_statement() {
  clear_has_statement();
  return statement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void query::set_allocated_statement(::std::string* statement) {
  if (statement != NULL) {
    set_has_statement();
  } else {
    clear_has_statement();
  }
  statement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), statement);
  // @@protoc_insertion_point(field_set_allocated:peloton.message.query.statement)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace peloton

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2equery_2eproto__INCLUDED
