// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: abstract_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "abstract_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace peloton {
namespace message {

namespace {

const ::google::protobuf::Descriptor* WorkFragment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkFragment_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryEstimate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryEstimate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionInitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionInitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionInitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionInitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionWorkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionWorkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionWorkResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionWorkResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionPrefetchResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionPrefetchResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionPrefetchAcknowledgement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionPrefetchAcknowledgement_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionMapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionMapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionMapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionMapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionReduceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionReduceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionReduceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionReduceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionReduceResponse_ReduceResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionReduceResponse_ReduceResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionPrepareRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionPrepareRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionPrepareResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionPrepareResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionFinishRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionFinishRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionFinishResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionFinishResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionRedirectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionRedirectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionRedirectResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionRedirectResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionDebugRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionDebugRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionDebugResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionDebugResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitializeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitializeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitializeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitializeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShutdownPrepareRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShutdownPrepareRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShutdownPrepareResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShutdownPrepareResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShutdownRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShutdownRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShutdownResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShutdownResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartbeatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartbeatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartbeatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartbeatResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnevictDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnevictDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnevictDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnevictDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeSyncRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeSyncRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeSyncResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeSyncResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PelotonMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PelotonMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PelotonMessage_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Status_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* AbstractPelotonService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_abstract_5fservice_2eproto() {
  protobuf_AddDesc_abstract_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "abstract_service.proto");
  GOOGLE_CHECK(file != NULL);
  WorkFragment_descriptor_ = file->message_type(0);
  static const int WorkFragment_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, fragment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, input_dep_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, output_dep_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, param_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, stmt_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, stmt_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, stmt_ignore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, read_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, needs_input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, last_fragment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, prefetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, force_),
  };
  WorkFragment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorkFragment_descriptor_,
      WorkFragment::default_instance_,
      WorkFragment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, _has_bits_[0]),
      -1,
      -1,
      sizeof(WorkFragment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, _internal_metadata_),
      -1);
  WorkResult_descriptor_ = file->message_type(1);
  static const int WorkResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResult, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResult, dep_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResult, dep_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResult, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResult, error_),
  };
  WorkResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorkResult_descriptor_,
      WorkResult::default_instance_,
      WorkResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResult, _has_bits_[0]),
      -1,
      -1,
      sizeof(WorkResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResult, _internal_metadata_),
      -1);
  QueryEstimate_descriptor_ = file->message_type(2);
  static const int QueryEstimate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEstimate, stmt_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEstimate, stmt_counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEstimate, time_estimate_),
  };
  QueryEstimate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryEstimate_descriptor_,
      QueryEstimate::default_instance_,
      QueryEstimate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEstimate, _has_bits_[0]),
      -1,
      -1,
      sizeof(QueryEstimate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEstimate, _internal_metadata_),
      -1);
  TransactionInitRequest_descriptor_ = file->message_type(3);
  static const int TransactionInitRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, last_transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, base_partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, procedure_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, partitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, proc_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, prefetch_fragments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, prefetch_params_),
  };
  TransactionInitRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionInitRequest_descriptor_,
      TransactionInitRequest::default_instance_,
      TransactionInitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionInitRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, _internal_metadata_),
      -1);
  TransactionInitResponse_descriptor_ = file->message_type(4);
  static const int TransactionInitResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitResponse, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitResponse, partitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitResponse, reject_partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitResponse, reject_transaction_id_),
  };
  TransactionInitResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionInitResponse_descriptor_,
      TransactionInitResponse::default_instance_,
      TransactionInitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionInitResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitResponse, _internal_metadata_),
      -1);
  TransactionWorkRequest_descriptor_ = file->message_type(5);
  static const int TransactionWorkRequest_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, last_transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, source_partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, fragments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, procedure_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, attached_dep_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, attached_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, done_partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, proc_params_),
  };
  TransactionWorkRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionWorkRequest_descriptor_,
      TransactionWorkRequest::default_instance_,
      TransactionWorkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionWorkRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, _internal_metadata_),
      -1);
  TransactionWorkResponse_descriptor_ = file->message_type(6);
  static const int TransactionWorkResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkResponse, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkResponse, results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkResponse, status_),
  };
  TransactionWorkResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionWorkResponse_descriptor_,
      TransactionWorkResponse::default_instance_,
      TransactionWorkResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionWorkResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkResponse, _internal_metadata_),
      -1);
  TransactionPrefetchResult_descriptor_ = file->message_type(7);
  static const int TransactionPrefetchResult_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, last_transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, source_partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, stmt_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, fragment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, param_hash_),
  };
  TransactionPrefetchResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionPrefetchResult_descriptor_,
      TransactionPrefetchResult::default_instance_,
      TransactionPrefetchResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionPrefetchResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, _internal_metadata_),
      -1);
  TransactionPrefetchAcknowledgement_descriptor_ = file->message_type(8);
  static const int TransactionPrefetchAcknowledgement_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchAcknowledgement, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchAcknowledgement, target_partition_),
  };
  TransactionPrefetchAcknowledgement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionPrefetchAcknowledgement_descriptor_,
      TransactionPrefetchAcknowledgement::default_instance_,
      TransactionPrefetchAcknowledgement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchAcknowledgement, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionPrefetchAcknowledgement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchAcknowledgement, _internal_metadata_),
      -1);
  TransactionMapRequest_descriptor_ = file->message_type(9);
  static const int TransactionMapRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, last_transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, client_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, base_partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, procedure_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, params_),
  };
  TransactionMapRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionMapRequest_descriptor_,
      TransactionMapRequest::default_instance_,
      TransactionMapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionMapRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, _internal_metadata_),
      -1);
  TransactionMapResponse_descriptor_ = file->message_type(10);
  static const int TransactionMapResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapResponse, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapResponse, partitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapResponse, status_),
  };
  TransactionMapResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionMapResponse_descriptor_,
      TransactionMapResponse::default_instance_,
      TransactionMapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionMapResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapResponse, _internal_metadata_),
      -1);
  TransactionReduceRequest_descriptor_ = file->message_type(11);
  static const int TransactionReduceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceRequest, transaction_id_),
  };
  TransactionReduceRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionReduceRequest_descriptor_,
      TransactionReduceRequest::default_instance_,
      TransactionReduceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionReduceRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceRequest, _internal_metadata_),
      -1);
  TransactionReduceResponse_descriptor_ = file->message_type(12);
  static const int TransactionReduceResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse, results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse, status_),
  };
  TransactionReduceResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionReduceResponse_descriptor_,
      TransactionReduceResponse::default_instance_,
      TransactionReduceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionReduceResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse, _internal_metadata_),
      -1);
  TransactionReduceResponse_ReduceResult_descriptor_ = TransactionReduceResponse_descriptor_->nested_type(0);
  static const int TransactionReduceResponse_ReduceResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse_ReduceResult, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse_ReduceResult, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse_ReduceResult, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse_ReduceResult, error_),
  };
  TransactionReduceResponse_ReduceResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionReduceResponse_ReduceResult_descriptor_,
      TransactionReduceResponse_ReduceResult::default_instance_,
      TransactionReduceResponse_ReduceResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse_ReduceResult, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionReduceResponse_ReduceResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse_ReduceResult, _internal_metadata_),
      -1);
  TransactionPrepareRequest_descriptor_ = file->message_type(13);
  static const int TransactionPrepareRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareRequest, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareRequest, partitions_),
  };
  TransactionPrepareRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionPrepareRequest_descriptor_,
      TransactionPrepareRequest::default_instance_,
      TransactionPrepareRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionPrepareRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareRequest, _internal_metadata_),
      -1);
  TransactionPrepareResponse_descriptor_ = file->message_type(14);
  static const int TransactionPrepareResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareResponse, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareResponse, partitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareResponse, status_),
  };
  TransactionPrepareResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionPrepareResponse_descriptor_,
      TransactionPrepareResponse::default_instance_,
      TransactionPrepareResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionPrepareResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareResponse, _internal_metadata_),
      -1);
  TransactionFinishRequest_descriptor_ = file->message_type(15);
  static const int TransactionFinishRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishRequest, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishRequest, partitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishRequest, status_),
  };
  TransactionFinishRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionFinishRequest_descriptor_,
      TransactionFinishRequest::default_instance_,
      TransactionFinishRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionFinishRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishRequest, _internal_metadata_),
      -1);
  TransactionFinishResponse_descriptor_ = file->message_type(16);
  static const int TransactionFinishResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishResponse, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishResponse, partitions_),
  };
  TransactionFinishResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionFinishResponse_descriptor_,
      TransactionFinishResponse::default_instance_,
      TransactionFinishResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionFinishResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishResponse, _internal_metadata_),
      -1);
  TransactionRedirectRequest_descriptor_ = file->message_type(17);
  static const int TransactionRedirectRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectRequest, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectRequest, work_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectRequest, orig_txn_id_),
  };
  TransactionRedirectRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionRedirectRequest_descriptor_,
      TransactionRedirectRequest::default_instance_,
      TransactionRedirectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionRedirectRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectRequest, _internal_metadata_),
      -1);
  TransactionRedirectResponse_descriptor_ = file->message_type(18);
  static const int TransactionRedirectResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectResponse, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectResponse, output_),
  };
  TransactionRedirectResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionRedirectResponse_descriptor_,
      TransactionRedirectResponse::default_instance_,
      TransactionRedirectResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionRedirectResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectResponse, _internal_metadata_),
      -1);
  TransactionDebugRequest_descriptor_ = file->message_type(19);
  static const int TransactionDebugRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugRequest, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugRequest, transaction_id_),
  };
  TransactionDebugRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionDebugRequest_descriptor_,
      TransactionDebugRequest::default_instance_,
      TransactionDebugRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionDebugRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugRequest, _internal_metadata_),
      -1);
  TransactionDebugResponse_descriptor_ = file->message_type(20);
  static const int TransactionDebugResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugResponse, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugResponse, debug_),
  };
  TransactionDebugResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionDebugResponse_descriptor_,
      TransactionDebugResponse::default_instance_,
      TransactionDebugResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionDebugResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugResponse, _internal_metadata_),
      -1);
  SendDataRequest_descriptor_ = file->message_type(21);
  static const int SendDataRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataRequest, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataRequest, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataRequest, dep_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataRequest, data_),
  };
  SendDataRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SendDataRequest_descriptor_,
      SendDataRequest::default_instance_,
      SendDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(SendDataRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataRequest, _internal_metadata_),
      -1);
  SendDataResponse_descriptor_ = file->message_type(22);
  static const int SendDataResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataResponse, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataResponse, partitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataResponse, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataResponse, status_),
  };
  SendDataResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SendDataResponse_descriptor_,
      SendDataResponse::default_instance_,
      SendDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(SendDataResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataResponse, _internal_metadata_),
      -1);
  InitializeRequest_descriptor_ = file->message_type(23);
  static const int InitializeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeRequest, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeRequest, instance_id_),
  };
  InitializeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InitializeRequest_descriptor_,
      InitializeRequest::default_instance_,
      InitializeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(InitializeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeRequest, _internal_metadata_),
      -1);
  InitializeResponse_descriptor_ = file->message_type(24);
  static const int InitializeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeResponse, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeResponse, status_),
  };
  InitializeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InitializeResponse_descriptor_,
      InitializeResponse::default_instance_,
      InitializeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(InitializeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeResponse, _internal_metadata_),
      -1);
  ShutdownPrepareRequest_descriptor_ = file->message_type(25);
  static const int ShutdownPrepareRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownPrepareRequest, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownPrepareRequest, error_),
  };
  ShutdownPrepareRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ShutdownPrepareRequest_descriptor_,
      ShutdownPrepareRequest::default_instance_,
      ShutdownPrepareRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownPrepareRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(ShutdownPrepareRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownPrepareRequest, _internal_metadata_),
      -1);
  ShutdownPrepareResponse_descriptor_ = file->message_type(26);
  static const int ShutdownPrepareResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownPrepareResponse, sender_site_),
  };
  ShutdownPrepareResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ShutdownPrepareResponse_descriptor_,
      ShutdownPrepareResponse::default_instance_,
      ShutdownPrepareResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownPrepareResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(ShutdownPrepareResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownPrepareResponse, _internal_metadata_),
      -1);
  ShutdownRequest_descriptor_ = file->message_type(27);
  static const int ShutdownRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownRequest, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownRequest, exit_status_),
  };
  ShutdownRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ShutdownRequest_descriptor_,
      ShutdownRequest::default_instance_,
      ShutdownRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(ShutdownRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownRequest, _internal_metadata_),
      -1);
  ShutdownResponse_descriptor_ = file->message_type(28);
  static const int ShutdownResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownResponse, sender_site_),
  };
  ShutdownResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ShutdownResponse_descriptor_,
      ShutdownResponse::default_instance_,
      ShutdownResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(ShutdownResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownResponse, _internal_metadata_),
      -1);
  HeartbeatRequest_descriptor_ = file->message_type(29);
  static const int HeartbeatRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, last_transaction_id_),
  };
  HeartbeatRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeartbeatRequest_descriptor_,
      HeartbeatRequest::default_instance_,
      HeartbeatRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(HeartbeatRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, _internal_metadata_),
      -1);
  HeartbeatResponse_descriptor_ = file->message_type(30);
  static const int HeartbeatResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, status_),
  };
  HeartbeatResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeartbeatResponse_descriptor_,
      HeartbeatResponse::default_instance_,
      HeartbeatResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(HeartbeatResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, _internal_metadata_),
      -1);
  UnevictDataRequest_descriptor_ = file->message_type(31);
  static const int UnevictDataRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, block_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, tuple_offsets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, new_transaction_id_),
  };
  UnevictDataRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UnevictDataRequest_descriptor_,
      UnevictDataRequest::default_instance_,
      UnevictDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(UnevictDataRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, _internal_metadata_),
      -1);
  UnevictDataResponse_descriptor_ = file->message_type(32);
  static const int UnevictDataResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataResponse, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataResponse, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataResponse, partition_id_),
  };
  UnevictDataResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UnevictDataResponse_descriptor_,
      UnevictDataResponse::default_instance_,
      UnevictDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(UnevictDataResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataResponse, _internal_metadata_),
      -1);
  TimeSyncRequest_descriptor_ = file->message_type(33);
  static const int TimeSyncRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncRequest, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncRequest, t0_s_),
  };
  TimeSyncRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TimeSyncRequest_descriptor_,
      TimeSyncRequest::default_instance_,
      TimeSyncRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(TimeSyncRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncRequest, _internal_metadata_),
      -1);
  TimeSyncResponse_descriptor_ = file->message_type(34);
  static const int TimeSyncResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncResponse, sender_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncResponse, t0_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncResponse, t0_r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncResponse, t1_s_),
  };
  TimeSyncResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TimeSyncResponse_descriptor_,
      TimeSyncResponse::default_instance_,
      TimeSyncResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(TimeSyncResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncResponse, _internal_metadata_),
      -1);
  PelotonMessage_descriptor_ = file->message_type(35);
  static const int PelotonMessage_offsets_[41] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, work_fragment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, work_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, query_estimate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, transaction_init_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, transaction_init_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, transaction_work_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, transaction_work_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, transaction_prefetch_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, transaction_prefetch_acknowledgement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, transaction_map_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, transaction_map_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, transaction_reduce_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, transaction_reduce_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, transaction_prepare_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, transaction_prepare_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, transaction_finish_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, transaction_finish_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, transaction_redirect_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, transaction_redirect_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, transaction_debug_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, transaction_debug_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, send_data_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, send_data_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, initialize_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, initialize_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, shutdown_prepare_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, shutdown_prepare_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, shutdown_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, shutdown_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, heartbeat_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, heartbeat_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, unevict_data_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, unevict_data_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, time_sync_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, time_sync_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, dst_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, src_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, dst_addr_32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, src_addr_32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, socket_),
  };
  PelotonMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PelotonMessage_descriptor_,
      PelotonMessage::default_instance_,
      PelotonMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(PelotonMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PelotonMessage, _internal_metadata_),
      -1);
  PelotonMessage_Type_descriptor_ = PelotonMessage_descriptor_->enum_type(0);
  Status_descriptor_ = file->enum_type(0);
  AbstractPelotonService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_abstract_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorkFragment_descriptor_, &WorkFragment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorkResult_descriptor_, &WorkResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryEstimate_descriptor_, &QueryEstimate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionInitRequest_descriptor_, &TransactionInitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionInitResponse_descriptor_, &TransactionInitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionWorkRequest_descriptor_, &TransactionWorkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionWorkResponse_descriptor_, &TransactionWorkResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionPrefetchResult_descriptor_, &TransactionPrefetchResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionPrefetchAcknowledgement_descriptor_, &TransactionPrefetchAcknowledgement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionMapRequest_descriptor_, &TransactionMapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionMapResponse_descriptor_, &TransactionMapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionReduceRequest_descriptor_, &TransactionReduceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionReduceResponse_descriptor_, &TransactionReduceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionReduceResponse_ReduceResult_descriptor_, &TransactionReduceResponse_ReduceResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionPrepareRequest_descriptor_, &TransactionPrepareRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionPrepareResponse_descriptor_, &TransactionPrepareResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionFinishRequest_descriptor_, &TransactionFinishRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionFinishResponse_descriptor_, &TransactionFinishResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionRedirectRequest_descriptor_, &TransactionRedirectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionRedirectResponse_descriptor_, &TransactionRedirectResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionDebugRequest_descriptor_, &TransactionDebugRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionDebugResponse_descriptor_, &TransactionDebugResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SendDataRequest_descriptor_, &SendDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SendDataResponse_descriptor_, &SendDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InitializeRequest_descriptor_, &InitializeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InitializeResponse_descriptor_, &InitializeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ShutdownPrepareRequest_descriptor_, &ShutdownPrepareRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ShutdownPrepareResponse_descriptor_, &ShutdownPrepareResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ShutdownRequest_descriptor_, &ShutdownRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ShutdownResponse_descriptor_, &ShutdownResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeartbeatRequest_descriptor_, &HeartbeatRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeartbeatResponse_descriptor_, &HeartbeatResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UnevictDataRequest_descriptor_, &UnevictDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UnevictDataResponse_descriptor_, &UnevictDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TimeSyncRequest_descriptor_, &TimeSyncRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TimeSyncResponse_descriptor_, &TimeSyncResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PelotonMessage_descriptor_, &PelotonMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_abstract_5fservice_2eproto() {
  delete WorkFragment::default_instance_;
  delete WorkFragment_reflection_;
  delete WorkResult::default_instance_;
  delete WorkResult_reflection_;
  delete QueryEstimate::default_instance_;
  delete QueryEstimate_reflection_;
  delete TransactionInitRequest::default_instance_;
  delete TransactionInitRequest_reflection_;
  delete TransactionInitResponse::default_instance_;
  delete TransactionInitResponse_reflection_;
  delete TransactionWorkRequest::default_instance_;
  delete TransactionWorkRequest_reflection_;
  delete TransactionWorkResponse::default_instance_;
  delete TransactionWorkResponse_reflection_;
  delete TransactionPrefetchResult::default_instance_;
  delete TransactionPrefetchResult_reflection_;
  delete TransactionPrefetchAcknowledgement::default_instance_;
  delete TransactionPrefetchAcknowledgement_reflection_;
  delete TransactionMapRequest::default_instance_;
  delete TransactionMapRequest_reflection_;
  delete TransactionMapResponse::default_instance_;
  delete TransactionMapResponse_reflection_;
  delete TransactionReduceRequest::default_instance_;
  delete TransactionReduceRequest_reflection_;
  delete TransactionReduceResponse::default_instance_;
  delete TransactionReduceResponse_reflection_;
  delete TransactionReduceResponse_ReduceResult::default_instance_;
  delete TransactionReduceResponse_ReduceResult_reflection_;
  delete TransactionPrepareRequest::default_instance_;
  delete TransactionPrepareRequest_reflection_;
  delete TransactionPrepareResponse::default_instance_;
  delete TransactionPrepareResponse_reflection_;
  delete TransactionFinishRequest::default_instance_;
  delete TransactionFinishRequest_reflection_;
  delete TransactionFinishResponse::default_instance_;
  delete TransactionFinishResponse_reflection_;
  delete TransactionRedirectRequest::default_instance_;
  delete TransactionRedirectRequest_reflection_;
  delete TransactionRedirectResponse::default_instance_;
  delete TransactionRedirectResponse_reflection_;
  delete TransactionDebugRequest::default_instance_;
  delete TransactionDebugRequest_reflection_;
  delete TransactionDebugResponse::default_instance_;
  delete TransactionDebugResponse_reflection_;
  delete SendDataRequest::default_instance_;
  delete SendDataRequest_reflection_;
  delete SendDataResponse::default_instance_;
  delete SendDataResponse_reflection_;
  delete InitializeRequest::default_instance_;
  delete InitializeRequest_reflection_;
  delete InitializeResponse::default_instance_;
  delete InitializeResponse_reflection_;
  delete ShutdownPrepareRequest::default_instance_;
  delete ShutdownPrepareRequest_reflection_;
  delete ShutdownPrepareResponse::default_instance_;
  delete ShutdownPrepareResponse_reflection_;
  delete ShutdownRequest::default_instance_;
  delete ShutdownRequest_reflection_;
  delete ShutdownResponse::default_instance_;
  delete ShutdownResponse_reflection_;
  delete HeartbeatRequest::default_instance_;
  delete HeartbeatRequest_reflection_;
  delete HeartbeatResponse::default_instance_;
  delete HeartbeatResponse_reflection_;
  delete UnevictDataRequest::default_instance_;
  delete UnevictDataRequest_reflection_;
  delete UnevictDataResponse::default_instance_;
  delete UnevictDataResponse_reflection_;
  delete TimeSyncRequest::default_instance_;
  delete TimeSyncRequest_reflection_;
  delete TimeSyncResponse::default_instance_;
  delete TimeSyncResponse_reflection_;
  delete PelotonMessage::default_instance_;
  delete PelotonMessage_reflection_;
}

void protobuf_AddDesc_abstract_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026abstract_service.proto\022\017peloton.messag"
    "e\"\322\002\n\014WorkFragment\022\024\n\014partition_id\030\001 \002(\005"
    "\022\027\n\013fragment_id\030\002 \003(\005B\002\020\001\022\030\n\014input_dep_i"
    "d\030\003 \003(\005B\002\020\001\022\031\n\routput_dep_id\030\004 \003(\005B\002\020\001\022\027"
    "\n\013param_index\030\005 \003(\005B\002\020\001\022\030\n\014stmt_counter\030"
    "\006 \003(\005B\002\020\001\022\026\n\nstmt_index\030\007 \003(\005B\002\020\001\022\027\n\013stm"
    "t_ignore\030\010 \003(\010B\002\020\001\022\021\n\tread_only\030\t \002(\010\022\032\n"
    "\013needs_input\030\n \001(\010:\005false\022\034\n\rlast_fragme"
    "nt\030\013 \001(\010:\005false\022\027\n\010prefetch\030\014 \001(\010:\005false"
    "\022\024\n\005force\030\r \001(\010:\005false\"\200\001\n\nWorkResult\022\024\n"
    "\014partition_id\030\001 \002(\005\022\022\n\006dep_id\030\002 \003(\005B\002\020\001\022"
    "\020\n\010dep_data\030\003 \003(\014\022\'\n\006status\030\004 \002(\0162\027.pelo"
    "ton.message.Status\022\r\n\005error\030\005 \001(\014\"W\n\rQue"
    "ryEstimate\022\024\n\010stmt_ids\030\001 \003(\005B\002\020\001\022\031\n\rstmt"
    "_counters\030\002 \003(\005B\002\020\001\022\025\n\rtime_estimate\030\003 \001"
    "(\005\"\374\001\n\026TransactionInitRequest\022\033\n\023last_tr"
    "ansaction_id\030\001 \001(\003\022\026\n\016transaction_id\030\002 \002"
    "(\003\022\026\n\016base_partition\030\003 \002(\005\022\024\n\014procedure_"
    "id\030\004 \002(\005\022\026\n\npartitions\030\005 \003(\005B\002\020\001\022\023\n\013proc"
    "_params\030\006 \001(\014\0229\n\022prefetch_fragments\030\007 \003("
    "\0132\035.peloton.message.WorkFragment\022\027\n\017pref"
    "etch_params\030\010 \003(\014\"\253\001\n\027TransactionInitRes"
    "ponse\022\026\n\016transaction_id\030\001 \002(\003\022\026\n\npartiti"
    "ons\030\002 \003(\005B\002\020\001\022\'\n\006status\030\003 \002(\0162\027.peloton."
    "message.Status\022\030\n\020reject_partition\030\004 \001(\005"
    "\022\035\n\025reject_transaction_id\030\005 \001(\003\"\244\002\n\026Tran"
    "sactionWorkRequest\022\033\n\023last_transaction_i"
    "d\030\001 \001(\003\022\026\n\016transaction_id\030\002 \002(\003\022\030\n\020sourc"
    "e_partition\030\003 \002(\005\0220\n\tfragments\030\004 \003(\0132\035.p"
    "eloton.message.WorkFragment\022\024\n\014procedure"
    "_id\030\005 \002(\005\022\016\n\006params\030\006 \003(\014\022\033\n\017attached_de"
    "p_id\030\007 \003(\005B\002\020\001\022\025\n\rattached_data\030\010 \003(\014\022\032\n"
    "\016done_partition\030\t \003(\005B\002\020\001\022\023\n\013proc_params"
    "\030\n \001(\014\"\210\001\n\027TransactionWorkResponse\022\026\n\016tr"
    "ansaction_id\030\001 \002(\003\022,\n\007results\030\002 \003(\0132\033.pe"
    "loton.message.WorkResult\022\'\n\006status\030\003 \002(\016"
    "2\027.peloton.message.Status\"\213\002\n\031Transactio"
    "nPrefetchResult\022\033\n\023last_transaction_id\030\001"
    " \001(\003\022\026\n\016transaction_id\030\002 \002(\003\022\030\n\020source_p"
    "artition\030\003 \002(\005\022+\n\006result\030\004 \002(\0132\033.peloton"
    ".message.WorkResult\022\'\n\006status\030\005 \002(\0162\027.pe"
    "loton.message.Status\022\030\n\014stmt_counter\030\006 \003"
    "(\005B\002\020\001\022\027\n\013fragment_id\030\007 \003(\005B\002\020\001\022\026\n\nparam"
    "_hash\030\010 \003(\005B\002\020\001\"V\n\"TransactionPrefetchAc"
    "knowledgement\022\026\n\016transaction_id\030\001 \002(\003\022\030\n"
    "\020target_partition\030\002 \002(\005\"\241\001\n\025TransactionM"
    "apRequest\022\033\n\023last_transaction_id\030\001 \001(\003\022\026"
    "\n\016transaction_id\030\002 \002(\003\022\025\n\rclient_handle\030"
    "\003 \002(\003\022\026\n\016base_partition\030\004 \002(\005\022\024\n\014procedu"
    "re_id\030\005 \002(\005\022\016\n\006params\030\006 \002(\014\"q\n\026Transacti"
    "onMapResponse\022\026\n\016transaction_id\030\001 \002(\003\022\026\n"
    "\npartitions\030\002 \003(\005B\002\020\001\022\'\n\006status\030\003 \002(\0162\027."
    "peloton.message.Status\"2\n\030TransactionRed"
    "uceRequest\022\026\n\016transaction_id\030\001 \002(\003\"\231\002\n\031T"
    "ransactionReduceResponse\022\026\n\016transaction_"
    "id\030\001 \002(\003\022H\n\007results\030\002 \003(\01327.peloton.mess"
    "age.TransactionReduceResponse.ReduceResu"
    "lt\022\'\n\006status\030\003 \002(\0162\027.peloton.message.Sta"
    "tus\032q\n\014ReduceResult\022\024\n\014partition_id\030\001 \002("
    "\005\022\014\n\004data\030\002 \002(\014\022\'\n\006status\030\003 \002(\0162\027.peloto"
    "n.message.Status\022\024\n\005error\030\004 \001(\010:\005false\"K"
    "\n\031TransactionPrepareRequest\022\026\n\016transacti"
    "on_id\030\001 \002(\003\022\026\n\npartitions\030\002 \003(\005B\002\020\001\"u\n\032T"
    "ransactionPrepareResponse\022\026\n\016transaction"
    "_id\030\001 \002(\003\022\026\n\npartitions\030\002 \003(\005B\002\020\001\022\'\n\006sta"
    "tus\030\003 \002(\0162\027.peloton.message.Status\"s\n\030Tr"
    "ansactionFinishRequest\022\026\n\016transaction_id"
    "\030\001 \002(\003\022\026\n\npartitions\030\002 \003(\005B\002\020\001\022\'\n\006status"
    "\030\003 \002(\0162\027.peloton.message.Status\"K\n\031Trans"
    "actionFinishResponse\022\026\n\016transaction_id\030\001"
    " \002(\003\022\026\n\npartitions\030\002 \003(\005B\002\020\001\"T\n\032Transact"
    "ionRedirectRequest\022\023\n\013sender_site\030\001 \002(\005\022"
    "\014\n\004work\030\002 \002(\014\022\023\n\013orig_txn_id\030\003 \001(\003\"B\n\033Tr"
    "ansactionRedirectResponse\022\023\n\013sender_site"
    "\030\001 \002(\005\022\016\n\006output\030\002 \002(\014\"F\n\027TransactionDeb"
    "ugRequest\022\023\n\013sender_site\030\001 \002(\005\022\026\n\016transa"
    "ction_id\030\002 \002(\003\"g\n\030TransactionDebugRespon"
    "se\022\023\n\013sender_site\030\001 \002(\005\022\'\n\006status\030\002 \002(\0162"
    "\027.peloton.message.Status\022\r\n\005debug\030\003 \002(\t\""
    "`\n\017SendDataRequest\022\026\n\016transaction_id\030\001 \002"
    "(\003\022\023\n\013sender_site\030\002 \002(\005\022\022\n\006dep_id\030\003 \003(\005B"
    "\002\020\001\022\014\n\004data\030\004 \003(\014\"\200\001\n\020SendDataResponse\022\026"
    "\n\016transaction_id\030\001 \002(\003\022\026\n\npartitions\030\002 \003"
    "(\005B\002\020\001\022\023\n\013sender_site\030\003 \002(\005\022\'\n\006status\030\004 "
    "\002(\0162\027.peloton.message.Status\"=\n\021Initiali"
    "zeRequest\022\023\n\013sender_site\030\001 \002(\005\022\023\n\013instan"
    "ce_id\030\002 \002(\003\"R\n\022InitializeResponse\022\023\n\013sen"
    "der_site\030\001 \002(\005\022\'\n\006status\030\002 \002(\0162\027.peloton"
    ".message.Status\"<\n\026ShutdownPrepareReques"
    "t\022\023\n\013sender_site\030\001 \002(\005\022\r\n\005error\030\002 \001(\014\".\n"
    "\027ShutdownPrepareResponse\022\023\n\013sender_site\030"
    "\001 \002(\005\";\n\017ShutdownRequest\022\023\n\013sender_site\030"
    "\001 \002(\005\022\023\n\013exit_status\030\002 \002(\005\"\'\n\020ShutdownRe"
    "sponse\022\023\n\013sender_site\030\001 \002(\005\"D\n\020Heartbeat"
    "Request\022\023\n\013sender_site\030\001 \002(\005\022\033\n\023last_tra"
    "nsaction_id\030\002 \002(\003\"Q\n\021HeartbeatResponse\022\023"
    "\n\013sender_site\030\001 \002(\005\022\'\n\006status\030\002 \002(\0162\027.pe"
    "loton.message.Status\"\267\001\n\022UnevictDataRequ"
    "est\022\023\n\013sender_site\030\001 \002(\005\022\026\n\016transaction_"
    "id\030\002 \002(\003\022\024\n\014partition_id\030\003 \002(\005\022\020\n\010table_"
    "id\030\004 \002(\005\022\025\n\tblock_ids\030\005 \003(\005B\002\020\001\022\031\n\rtuple"
    "_offsets\030\006 \003(\005B\002\020\001\022\032\n\022new_transaction_id"
    "\030\007 \002(\003\"\201\001\n\023UnevictDataResponse\022\023\n\013sender"
    "_site\030\001 \002(\005\022\'\n\006status\030\002 \002(\0162\027.peloton.me"
    "ssage.Status\022\026\n\016transaction_id\030\003 \002(\003\022\024\n\014"
    "partition_id\030\004 \002(\005\"4\n\017TimeSyncRequest\022\023\n"
    "\013sender_site\030\001 \002(\005\022\014\n\004t0_s\030\002 \002(\003\"Q\n\020Time"
    "SyncResponse\022\023\n\013sender_site\030\001 \002(\005\022\014\n\004t0_"
    "s\030\002 \002(\003\022\014\n\004t0_r\030\003 \002(\003\022\014\n\004t1_s\030\004 \002(\003\"\333\034\n\016"
    "PelotonMessage\0222\n\004type\030\001 \002(\0162$.peloton.m"
    "essage.PelotonMessage.Type\0224\n\rwork_fragm"
    "ent\030\002 \001(\0132\035.peloton.message.WorkFragment"
    "\0220\n\013work_result\030\003 \001(\0132\033.peloton.message."
    "WorkResult\0226\n\016query_estimate\030\004 \001(\0132\036.pel"
    "oton.message.QueryEstimate\022I\n\030transactio"
    "n_init_request\030\005 \001(\0132\'.peloton.message.T"
    "ransactionInitRequest\022K\n\031transaction_ini"
    "t_response\030\006 \001(\0132(.peloton.message.Trans"
    "actionInitResponse\022I\n\030transaction_work_r"
    "equest\030\007 \001(\0132\'.peloton.message.Transacti"
    "onWorkRequest\022K\n\031transaction_work_respon"
    "se\030\010 \001(\0132(.peloton.message.TransactionWo"
    "rkResponse\022O\n\033transaction_prefetch_resul"
    "t\030\t \001(\0132*.peloton.message.TransactionPre"
    "fetchResult\022a\n$transaction_prefetch_ackn"
    "owledgement\030\n \001(\01323.peloton.message.Tran"
    "sactionPrefetchAcknowledgement\022G\n\027transa"
    "ction_map_request\030\013 \001(\0132&.peloton.messag"
    "e.TransactionMapRequest\022I\n\030transaction_m"
    "ap_response\030\014 \001(\0132\'.peloton.message.Tran"
    "sactionMapResponse\022M\n\032transaction_reduce"
    "_request\030\r \001(\0132).peloton.message.Transac"
    "tionReduceRequest\022O\n\033transaction_reduce_"
    "response\030\016 \001(\0132*.peloton.message.Transac"
    "tionReduceResponse\022O\n\033transaction_prepar"
    "e_request\030\017 \001(\0132*.peloton.message.Transa"
    "ctionPrepareRequest\022Q\n\034transaction_prepa"
    "re_response\030\020 \001(\0132+.peloton.message.Tran"
    "sactionPrepareResponse\022M\n\032transaction_fi"
    "nish_request\030\021 \001(\0132).peloton.message.Tra"
    "nsactionFinishRequest\022O\n\033transaction_fin"
    "ish_response\030\022 \001(\0132*.peloton.message.Tra"
    "nsactionFinishResponse\022Q\n\034transaction_re"
    "direct_request\030\023 \001(\0132+.peloton.message.T"
    "ransactionRedirectRequest\022S\n\035transaction"
    "_redirect_response\030\024 \001(\0132,.peloton.messa"
    "ge.TransactionRedirectResponse\022K\n\031transa"
    "ction_debug_request\030\025 \001(\0132(.peloton.mess"
    "age.TransactionDebugRequest\022M\n\032transacti"
    "on_debug_response\030\026 \001(\0132).peloton.messag"
    "e.TransactionDebugResponse\022;\n\021send_data_"
    "request\030\027 \001(\0132 .peloton.message.SendData"
    "Request\022=\n\022send_data_response\030\030 \001(\0132!.pe"
    "loton.message.SendDataResponse\022>\n\022initia"
    "lize_request\030\031 \001(\0132\".peloton.message.Ini"
    "tializeRequest\022@\n\023initialize_response\030\032 "
    "\001(\0132#.peloton.message.InitializeResponse"
    "\022I\n\030shutdown_prepare_request\030\033 \001(\0132\'.pel"
    "oton.message.ShutdownPrepareRequest\022K\n\031s"
    "hutdown_prepare_response\030\034 \001(\0132(.peloton"
    ".message.ShutdownPrepareResponse\022:\n\020shut"
    "down_request\030\035 \001(\0132 .peloton.message.Shu"
    "tdownRequest\022<\n\021shutdown_response\030\036 \001(\0132"
    "!.peloton.message.ShutdownResponse\022<\n\021he"
    "artbeat_request\030\037 \001(\0132!.peloton.message."
    "HeartbeatRequest\022>\n\022heartbeat_response\030 "
    " \001(\0132\".peloton.message.HeartbeatResponse"
    "\022A\n\024unevict_data_request\030! \001(\0132#.peloton"
    ".message.UnevictDataRequest\022C\n\025unevict_d"
    "ata_response\030\" \001(\0132$.peloton.message.Une"
    "victDataResponse\022;\n\021time_sync_request\030# "
    "\001(\0132 .peloton.message.TimeSyncRequest\022=\n"
    "\022time_sync_response\030$ \001(\0132!.peloton.mess"
    "age.TimeSyncResponse\022\020\n\010dst_addr\030% \001(\t\022\020"
    "\n\010src_addr\030& \001(\t\022\023\n\013dst_addr_32\030\' \001(\005\022\023\n"
    "\013src_addr_32\030( \001(\005\022\016\n\006socket\030) \001(\005\"\344\007\n\004T"
    "ype\022\021\n\rWORK_FRAGMENT\020\001\022\017\n\013WORK_RESULT\020\002\022"
    "\022\n\016QUERY_ESTIMATE\020\003\022\034\n\030TRANSACTION_INIT_"
    "REQUEST\020\004\022\035\n\031TRANSACTION_INIT_RESPONSE\020\005"
    "\022\034\n\030TRANSACTION_WORK_REQUEST\020\006\022\035\n\031TRANSA"
    "CTION_WORK_RESPONSE\020\007\022\037\n\033TRANSACTION_PRE"
    "FETCH_RESULT\020\010\022(\n$TRANSACTION_PREFETCH_A"
    "CKNOWLEDGEMENT\020\t\022\033\n\027TRANSACTION_MAP_REQU"
    "EST\020\n\022\034\n\030TRANSACTION_MAP_RESPONSE\020\013\022\036\n\032T"
    "RANSACTION_REDUCE_REQUEST\020\014\022\037\n\033TRANSACTI"
    "ON_REDUCE_RESPONSE\020\r\022\037\n\033TRANSACTION_PREP"
    "ARE_REQUEST\020\016\022 \n\034TRANSACTION_PREPARE_RES"
    "PONSE\020\017\022\036\n\032TRANSACTION_FINISH_REQUEST\020\020\022"
    "\037\n\033TRANSACTION_FINISH_RESPONSE\020\021\022 \n\034TRAN"
    "SACTION_REDIRECT_REQUEST\020\022\022!\n\035TRANSACTIO"
    "N_REDIRECT_RESPONSE\020\023\022\035\n\031TRANSACTION_DEB"
    "UG_REQUEST\020\024\022\036\n\032TRANSACTION_DEBUG_RESPON"
    "SE\020\025\022\025\n\021SEND_DATA_REQUEST\020\026\022\026\n\022SEND_DATA"
    "_RESPONSE\020\027\022\026\n\022INITIALIZE_REQUEST\020\030\022\027\n\023I"
    "NITIALIZE_RESPONSE\020\031\022\034\n\030SHUTDOWN_PREPARE"
    "_REQUEST\020\032\022\035\n\031SHUTDOWN_PREPARE_RESPONSE\020"
    "\033\022\024\n\020SHUTDOWN_REQUEST\020\034\022\025\n\021SHUTDOWN_RESP"
    "ONSE\020\035\022\025\n\021HEARTBEAT_REQUEST\020\036\022\026\n\022HEARTBE"
    "AT_RESPONSE\020\037\022\030\n\024UNEVICT_DATA_REQUEST\020 \022"
    "\031\n\025UNEVICT_DATA_RESPONSE\020!\022\025\n\021TIME_SYNC_"
    "REQUEST\020\"\022\026\n\022TIME_SYNC_RESPONSE\020#*\320\001\n\006St"
    "atus\022\006\n\002OK\020\000\022\016\n\nABORT_USER\020\001\022\022\n\016ABORT_GR"
    "ACEFUL\020\002\022\024\n\020ABORT_UNEXPECTED\020\003\022\031\n\025ABORT_"
    "CONNECTION_LOST\020\004\022\024\n\020ABORT_MISPREDICT\020\005\022"
    "\021\n\rABORT_RESTART\020\006\022\020\n\014ABORT_REJECT\020\007\022\027\n\023"
    "ABORT_EVICTEDACCESS\020\010\022\025\n\021ABORT_SPECULATI"
    "VE\020\t2\277\014\n\026AbstractPelotonService\022d\n\017Trans"
    "actionInit\022\'.peloton.message.Transaction"
    "InitRequest\032(.peloton.message.Transactio"
    "nInitResponse\022d\n\017TransactionWork\022\'.pelot"
    "on.message.TransactionWorkRequest\032(.pelo"
    "ton.message.TransactionWorkResponse\022v\n\023T"
    "ransactionPrefetch\022*.peloton.message.Tra"
    "nsactionPrefetchResult\0323.peloton.message"
    ".TransactionPrefetchAcknowledgement\022a\n\016T"
    "ransactionMap\022&.peloton.message.Transact"
    "ionMapRequest\032\'.peloton.message.Transact"
    "ionMapResponse\022j\n\021TransactionReduce\022).pe"
    "loton.message.TransactionReduceRequest\032*"
    ".peloton.message.TransactionReduceRespon"
    "se\022m\n\022TransactionPrepare\022*.peloton.messa"
    "ge.TransactionPrepareRequest\032+.peloton.m"
    "essage.TransactionPrepareResponse\022j\n\021Tra"
    "nsactionFinish\022).peloton.message.Transac"
    "tionFinishRequest\032*.peloton.message.Tran"
    "sactionFinishResponse\022p\n\023TransactionRedi"
    "rect\022+.peloton.message.TransactionRedire"
    "ctRequest\032,.peloton.message.TransactionR"
    "edirectResponse\022g\n\020TransactionDebug\022(.pe"
    "loton.message.TransactionDebugRequest\032)."
    "peloton.message.TransactionDebugResponse"
    "\022O\n\010SendData\022 .peloton.message.SendDataR"
    "equest\032!.peloton.message.SendDataRespons"
    "e\022U\n\nInitialize\022\".peloton.message.Initia"
    "lizeRequest\032#.peloton.message.Initialize"
    "Response\022d\n\017ShutdownPrepare\022\'.peloton.me"
    "ssage.ShutdownPrepareRequest\032(.peloton.m"
    "essage.ShutdownPrepareResponse\022O\n\010Shutdo"
    "wn\022 .peloton.message.ShutdownRequest\032!.p"
    "eloton.message.ShutdownResponse\022R\n\tHeart"
    "beat\022!.peloton.message.HeartbeatRequest\032"
    "\".peloton.message.HeartbeatResponse\022X\n\013U"
    "nevictData\022#.peloton.message.UnevictData"
    "Request\032$.peloton.message.UnevictDataRes"
    "ponse\022O\n\010TimeSync\022 .peloton.message.Time"
    "SyncRequest\032!.peloton.message.TimeSyncRe"
    "sponseB\003\200\001\001", 9851);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "abstract_service.proto", &protobuf_RegisterTypes);
  WorkFragment::default_instance_ = new WorkFragment();
  WorkResult::default_instance_ = new WorkResult();
  QueryEstimate::default_instance_ = new QueryEstimate();
  TransactionInitRequest::default_instance_ = new TransactionInitRequest();
  TransactionInitResponse::default_instance_ = new TransactionInitResponse();
  TransactionWorkRequest::default_instance_ = new TransactionWorkRequest();
  TransactionWorkResponse::default_instance_ = new TransactionWorkResponse();
  TransactionPrefetchResult::default_instance_ = new TransactionPrefetchResult();
  TransactionPrefetchAcknowledgement::default_instance_ = new TransactionPrefetchAcknowledgement();
  TransactionMapRequest::default_instance_ = new TransactionMapRequest();
  TransactionMapResponse::default_instance_ = new TransactionMapResponse();
  TransactionReduceRequest::default_instance_ = new TransactionReduceRequest();
  TransactionReduceResponse::default_instance_ = new TransactionReduceResponse();
  TransactionReduceResponse_ReduceResult::default_instance_ = new TransactionReduceResponse_ReduceResult();
  TransactionPrepareRequest::default_instance_ = new TransactionPrepareRequest();
  TransactionPrepareResponse::default_instance_ = new TransactionPrepareResponse();
  TransactionFinishRequest::default_instance_ = new TransactionFinishRequest();
  TransactionFinishResponse::default_instance_ = new TransactionFinishResponse();
  TransactionRedirectRequest::default_instance_ = new TransactionRedirectRequest();
  TransactionRedirectResponse::default_instance_ = new TransactionRedirectResponse();
  TransactionDebugRequest::default_instance_ = new TransactionDebugRequest();
  TransactionDebugResponse::default_instance_ = new TransactionDebugResponse();
  SendDataRequest::default_instance_ = new SendDataRequest();
  SendDataResponse::default_instance_ = new SendDataResponse();
  InitializeRequest::default_instance_ = new InitializeRequest();
  InitializeResponse::default_instance_ = new InitializeResponse();
  ShutdownPrepareRequest::default_instance_ = new ShutdownPrepareRequest();
  ShutdownPrepareResponse::default_instance_ = new ShutdownPrepareResponse();
  ShutdownRequest::default_instance_ = new ShutdownRequest();
  ShutdownResponse::default_instance_ = new ShutdownResponse();
  HeartbeatRequest::default_instance_ = new HeartbeatRequest();
  HeartbeatResponse::default_instance_ = new HeartbeatResponse();
  UnevictDataRequest::default_instance_ = new UnevictDataRequest();
  UnevictDataResponse::default_instance_ = new UnevictDataResponse();
  TimeSyncRequest::default_instance_ = new TimeSyncRequest();
  TimeSyncResponse::default_instance_ = new TimeSyncResponse();
  PelotonMessage::default_instance_ = new PelotonMessage();
  WorkFragment::default_instance_->InitAsDefaultInstance();
  WorkResult::default_instance_->InitAsDefaultInstance();
  QueryEstimate::default_instance_->InitAsDefaultInstance();
  TransactionInitRequest::default_instance_->InitAsDefaultInstance();
  TransactionInitResponse::default_instance_->InitAsDefaultInstance();
  TransactionWorkRequest::default_instance_->InitAsDefaultInstance();
  TransactionWorkResponse::default_instance_->InitAsDefaultInstance();
  TransactionPrefetchResult::default_instance_->InitAsDefaultInstance();
  TransactionPrefetchAcknowledgement::default_instance_->InitAsDefaultInstance();
  TransactionMapRequest::default_instance_->InitAsDefaultInstance();
  TransactionMapResponse::default_instance_->InitAsDefaultInstance();
  TransactionReduceRequest::default_instance_->InitAsDefaultInstance();
  TransactionReduceResponse::default_instance_->InitAsDefaultInstance();
  TransactionReduceResponse_ReduceResult::default_instance_->InitAsDefaultInstance();
  TransactionPrepareRequest::default_instance_->InitAsDefaultInstance();
  TransactionPrepareResponse::default_instance_->InitAsDefaultInstance();
  TransactionFinishRequest::default_instance_->InitAsDefaultInstance();
  TransactionFinishResponse::default_instance_->InitAsDefaultInstance();
  TransactionRedirectRequest::default_instance_->InitAsDefaultInstance();
  TransactionRedirectResponse::default_instance_->InitAsDefaultInstance();
  TransactionDebugRequest::default_instance_->InitAsDefaultInstance();
  TransactionDebugResponse::default_instance_->InitAsDefaultInstance();
  SendDataRequest::default_instance_->InitAsDefaultInstance();
  SendDataResponse::default_instance_->InitAsDefaultInstance();
  InitializeRequest::default_instance_->InitAsDefaultInstance();
  InitializeResponse::default_instance_->InitAsDefaultInstance();
  ShutdownPrepareRequest::default_instance_->InitAsDefaultInstance();
  ShutdownPrepareResponse::default_instance_->InitAsDefaultInstance();
  ShutdownRequest::default_instance_->InitAsDefaultInstance();
  ShutdownResponse::default_instance_->InitAsDefaultInstance();
  HeartbeatRequest::default_instance_->InitAsDefaultInstance();
  HeartbeatResponse::default_instance_->InitAsDefaultInstance();
  UnevictDataRequest::default_instance_->InitAsDefaultInstance();
  UnevictDataResponse::default_instance_->InitAsDefaultInstance();
  TimeSyncRequest::default_instance_->InitAsDefaultInstance();
  TimeSyncResponse::default_instance_->InitAsDefaultInstance();
  PelotonMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_abstract_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_abstract_5fservice_2eproto {
  StaticDescriptorInitializer_abstract_5fservice_2eproto() {
    protobuf_AddDesc_abstract_5fservice_2eproto();
  }
} static_descriptor_initializer_abstract_5fservice_2eproto_;
const ::google::protobuf::EnumDescriptor* Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}
bool Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkFragment::kPartitionIdFieldNumber;
const int WorkFragment::kFragmentIdFieldNumber;
const int WorkFragment::kInputDepIdFieldNumber;
const int WorkFragment::kOutputDepIdFieldNumber;
const int WorkFragment::kParamIndexFieldNumber;
const int WorkFragment::kStmtCounterFieldNumber;
const int WorkFragment::kStmtIndexFieldNumber;
const int WorkFragment::kStmtIgnoreFieldNumber;
const int WorkFragment::kReadOnlyFieldNumber;
const int WorkFragment::kNeedsInputFieldNumber;
const int WorkFragment::kLastFragmentFieldNumber;
const int WorkFragment::kPrefetchFieldNumber;
const int WorkFragment::kForceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkFragment::WorkFragment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.WorkFragment)
}

void WorkFragment::InitAsDefaultInstance() {
}

WorkFragment::WorkFragment(const WorkFragment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.WorkFragment)
}

void WorkFragment::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = 0;
  read_only_ = false;
  needs_input_ = false;
  last_fragment_ = false;
  prefetch_ = false;
  force_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkFragment::~WorkFragment() {
  // @@protoc_insertion_point(destructor:peloton.message.WorkFragment)
  SharedDtor();
}

void WorkFragment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorkFragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkFragment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkFragment_descriptor_;
}

const WorkFragment& WorkFragment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

WorkFragment* WorkFragment::default_instance_ = NULL;

WorkFragment* WorkFragment::New(::google::protobuf::Arena* arena) const {
  WorkFragment* n = new WorkFragment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkFragment::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WorkFragment*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  partition_id_ = 0;
  if (_has_bits_[8 / 32] & 7936u) {
    ZR_(read_only_, force_);
  }

#undef ZR_HELPER_
#undef ZR_

  fragment_id_.Clear();
  input_dep_id_.Clear();
  output_dep_id_.Clear();
  param_index_.Clear();
  stmt_counter_.Clear();
  stmt_index_.Clear();
  stmt_ignore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WorkFragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.WorkFragment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 partition_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_id_)));
          set_has_partition_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fragment_id;
        break;
      }

      // repeated int32 fragment_id = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_fragment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fragment_id())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_fragment_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_input_dep_id;
        break;
      }

      // repeated int32 input_dep_id = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_input_dep_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_input_dep_id())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_input_dep_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_output_dep_id;
        break;
      }

      // repeated int32 output_dep_id = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_output_dep_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_output_dep_id())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34, input, this->mutable_output_dep_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_param_index;
        break;
      }

      // repeated int32 param_index = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_param_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_param_index())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42, input, this->mutable_param_index())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_stmt_counter;
        break;
      }

      // repeated int32 stmt_counter = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_stmt_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stmt_counter())));
        } else if (tag == 48) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50, input, this->mutable_stmt_counter())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_stmt_index;
        break;
      }

      // repeated int32 stmt_index = 7 [packed = true];
      case 7: {
        if (tag == 58) {
         parse_stmt_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stmt_index())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58, input, this->mutable_stmt_index())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_stmt_ignore;
        break;
      }

      // repeated bool stmt_ignore = 8 [packed = true];
      case 8: {
        if (tag == 66) {
         parse_stmt_ignore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_stmt_ignore())));
        } else if (tag == 64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 66, input, this->mutable_stmt_ignore())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_read_only;
        break;
      }

      // required bool read_only = 9;
      case 9: {
        if (tag == 72) {
         parse_read_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_only_)));
          set_has_read_only();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_needs_input;
        break;
      }

      // optional bool needs_input = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_needs_input:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_input_)));
          set_has_needs_input();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_last_fragment;
        break;
      }

      // optional bool last_fragment = 11 [default = false];
      case 11: {
        if (tag == 88) {
         parse_last_fragment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_fragment_)));
          set_has_last_fragment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_prefetch;
        break;
      }

      // optional bool prefetch = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_prefetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prefetch_)));
          set_has_prefetch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_force;
        break;
      }

      // optional bool force = 13 [default = false];
      case 13: {
        if (tag == 104) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.WorkFragment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.WorkFragment)
  return false;
#undef DO_
}

void WorkFragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.WorkFragment)
  // required int32 partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->partition_id(), output);
  }

  // repeated int32 fragment_id = 2 [packed = true];
  if (this->fragment_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_fragment_id_cached_byte_size_);
  }
  for (int i = 0; i < this->fragment_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->fragment_id(i), output);
  }

  // repeated int32 input_dep_id = 3 [packed = true];
  if (this->input_dep_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_input_dep_id_cached_byte_size_);
  }
  for (int i = 0; i < this->input_dep_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->input_dep_id(i), output);
  }

  // repeated int32 output_dep_id = 4 [packed = true];
  if (this->output_dep_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_output_dep_id_cached_byte_size_);
  }
  for (int i = 0; i < this->output_dep_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->output_dep_id(i), output);
  }

  // repeated int32 param_index = 5 [packed = true];
  if (this->param_index_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_param_index_cached_byte_size_);
  }
  for (int i = 0; i < this->param_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->param_index(i), output);
  }

  // repeated int32 stmt_counter = 6 [packed = true];
  if (this->stmt_counter_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_stmt_counter_cached_byte_size_);
  }
  for (int i = 0; i < this->stmt_counter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->stmt_counter(i), output);
  }

  // repeated int32 stmt_index = 7 [packed = true];
  if (this->stmt_index_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_stmt_index_cached_byte_size_);
  }
  for (int i = 0; i < this->stmt_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->stmt_index(i), output);
  }

  // repeated bool stmt_ignore = 8 [packed = true];
  if (this->stmt_ignore_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_stmt_ignore_cached_byte_size_);
  }
  for (int i = 0; i < this->stmt_ignore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->stmt_ignore(i), output);
  }

  // required bool read_only = 9;
  if (has_read_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->read_only(), output);
  }

  // optional bool needs_input = 10 [default = false];
  if (has_needs_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->needs_input(), output);
  }

  // optional bool last_fragment = 11 [default = false];
  if (has_last_fragment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->last_fragment(), output);
  }

  // optional bool prefetch = 12 [default = false];
  if (has_prefetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->prefetch(), output);
  }

  // optional bool force = 13 [default = false];
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->force(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.WorkFragment)
}

::google::protobuf::uint8* WorkFragment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.WorkFragment)
  // required int32 partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->partition_id(), target);
  }

  // repeated int32 fragment_id = 2 [packed = true];
  if (this->fragment_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _fragment_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->fragment_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->fragment_id(i), target);
  }

  // repeated int32 input_dep_id = 3 [packed = true];
  if (this->input_dep_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _input_dep_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->input_dep_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->input_dep_id(i), target);
  }

  // repeated int32 output_dep_id = 4 [packed = true];
  if (this->output_dep_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _output_dep_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->output_dep_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->output_dep_id(i), target);
  }

  // repeated int32 param_index = 5 [packed = true];
  if (this->param_index_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _param_index_cached_byte_size_, target);
  }
  for (int i = 0; i < this->param_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->param_index(i), target);
  }

  // repeated int32 stmt_counter = 6 [packed = true];
  if (this->stmt_counter_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _stmt_counter_cached_byte_size_, target);
  }
  for (int i = 0; i < this->stmt_counter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->stmt_counter(i), target);
  }

  // repeated int32 stmt_index = 7 [packed = true];
  if (this->stmt_index_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _stmt_index_cached_byte_size_, target);
  }
  for (int i = 0; i < this->stmt_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->stmt_index(i), target);
  }

  // repeated bool stmt_ignore = 8 [packed = true];
  if (this->stmt_ignore_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _stmt_ignore_cached_byte_size_, target);
  }
  for (int i = 0; i < this->stmt_ignore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->stmt_ignore(i), target);
  }

  // required bool read_only = 9;
  if (has_read_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->read_only(), target);
  }

  // optional bool needs_input = 10 [default = false];
  if (has_needs_input()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->needs_input(), target);
  }

  // optional bool last_fragment = 11 [default = false];
  if (has_last_fragment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->last_fragment(), target);
  }

  // optional bool prefetch = 12 [default = false];
  if (has_prefetch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->prefetch(), target);
  }

  // optional bool force = 13 [default = false];
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->force(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.WorkFragment)
  return target;
}

int WorkFragment::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_partition_id()) {
    // required int32 partition_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partition_id());
  }

  if (has_read_only()) {
    // required bool read_only = 9;
    total_size += 1 + 1;
  }

  return total_size;
}
int WorkFragment::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000101) ^ 0x00000101) == 0) {  // All required fields are present.
    // required int32 partition_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partition_id());

    // required bool read_only = 9;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[9 / 32] & 7680u) {
    // optional bool needs_input = 10 [default = false];
    if (has_needs_input()) {
      total_size += 1 + 1;
    }

    // optional bool last_fragment = 11 [default = false];
    if (has_last_fragment()) {
      total_size += 1 + 1;
    }

    // optional bool prefetch = 12 [default = false];
    if (has_prefetch()) {
      total_size += 1 + 1;
    }

    // optional bool force = 13 [default = false];
    if (has_force()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 fragment_id = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->fragment_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fragment_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fragment_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 input_dep_id = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->input_dep_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->input_dep_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _input_dep_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 output_dep_id = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->output_dep_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->output_dep_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _output_dep_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 param_index = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->param_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->param_index(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _param_index_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 stmt_counter = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->stmt_counter_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stmt_counter(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stmt_counter_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 stmt_index = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->stmt_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stmt_index(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stmt_index_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool stmt_ignore = 8 [packed = true];
  {
    int data_size = 0;
    data_size = 1 * this->stmt_ignore_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stmt_ignore_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkFragment::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WorkFragment* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkFragment>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkFragment::MergeFrom(const WorkFragment& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  fragment_id_.MergeFrom(from.fragment_id_);
  input_dep_id_.MergeFrom(from.input_dep_id_);
  output_dep_id_.MergeFrom(from.output_dep_id_);
  param_index_.MergeFrom(from.param_index_);
  stmt_counter_.MergeFrom(from.stmt_counter_);
  stmt_index_.MergeFrom(from.stmt_index_);
  stmt_ignore_.MergeFrom(from.stmt_ignore_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      set_partition_id(from.partition_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_read_only()) {
      set_read_only(from.read_only());
    }
    if (from.has_needs_input()) {
      set_needs_input(from.needs_input());
    }
    if (from.has_last_fragment()) {
      set_last_fragment(from.last_fragment());
    }
    if (from.has_prefetch()) {
      set_prefetch(from.prefetch());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WorkFragment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkFragment::CopyFrom(const WorkFragment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkFragment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000101) != 0x00000101) return false;

  return true;
}

void WorkFragment::Swap(WorkFragment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkFragment::InternalSwap(WorkFragment* other) {
  std::swap(partition_id_, other->partition_id_);
  fragment_id_.UnsafeArenaSwap(&other->fragment_id_);
  input_dep_id_.UnsafeArenaSwap(&other->input_dep_id_);
  output_dep_id_.UnsafeArenaSwap(&other->output_dep_id_);
  param_index_.UnsafeArenaSwap(&other->param_index_);
  stmt_counter_.UnsafeArenaSwap(&other->stmt_counter_);
  stmt_index_.UnsafeArenaSwap(&other->stmt_index_);
  stmt_ignore_.UnsafeArenaSwap(&other->stmt_ignore_);
  std::swap(read_only_, other->read_only_);
  std::swap(needs_input_, other->needs_input_);
  std::swap(last_fragment_, other->last_fragment_);
  std::swap(prefetch_, other->prefetch_);
  std::swap(force_, other->force_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkFragment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkFragment_descriptor_;
  metadata.reflection = WorkFragment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorkFragment

// required int32 partition_id = 1;
bool WorkFragment::has_partition_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WorkFragment::set_has_partition_id() {
  _has_bits_[0] |= 0x00000001u;
}
void WorkFragment::clear_has_partition_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void WorkFragment::clear_partition_id() {
  partition_id_ = 0;
  clear_has_partition_id();
}
 ::google::protobuf::int32 WorkFragment::partition_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.WorkFragment.partition_id)
  return partition_id_;
}
 void WorkFragment::set_partition_id(::google::protobuf::int32 value) {
  set_has_partition_id();
  partition_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.WorkFragment.partition_id)
}

// repeated int32 fragment_id = 2 [packed = true];
int WorkFragment::fragment_id_size() const {
  return fragment_id_.size();
}
void WorkFragment::clear_fragment_id() {
  fragment_id_.Clear();
}
 ::google::protobuf::int32 WorkFragment::fragment_id(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.WorkFragment.fragment_id)
  return fragment_id_.Get(index);
}
 void WorkFragment::set_fragment_id(int index, ::google::protobuf::int32 value) {
  fragment_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.WorkFragment.fragment_id)
}
 void WorkFragment::add_fragment_id(::google::protobuf::int32 value) {
  fragment_id_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.WorkFragment.fragment_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WorkFragment::fragment_id() const {
  // @@protoc_insertion_point(field_list:peloton.message.WorkFragment.fragment_id)
  return fragment_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WorkFragment::mutable_fragment_id() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.WorkFragment.fragment_id)
  return &fragment_id_;
}

// repeated int32 input_dep_id = 3 [packed = true];
int WorkFragment::input_dep_id_size() const {
  return input_dep_id_.size();
}
void WorkFragment::clear_input_dep_id() {
  input_dep_id_.Clear();
}
 ::google::protobuf::int32 WorkFragment::input_dep_id(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.WorkFragment.input_dep_id)
  return input_dep_id_.Get(index);
}
 void WorkFragment::set_input_dep_id(int index, ::google::protobuf::int32 value) {
  input_dep_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.WorkFragment.input_dep_id)
}
 void WorkFragment::add_input_dep_id(::google::protobuf::int32 value) {
  input_dep_id_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.WorkFragment.input_dep_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WorkFragment::input_dep_id() const {
  // @@protoc_insertion_point(field_list:peloton.message.WorkFragment.input_dep_id)
  return input_dep_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WorkFragment::mutable_input_dep_id() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.WorkFragment.input_dep_id)
  return &input_dep_id_;
}

// repeated int32 output_dep_id = 4 [packed = true];
int WorkFragment::output_dep_id_size() const {
  return output_dep_id_.size();
}
void WorkFragment::clear_output_dep_id() {
  output_dep_id_.Clear();
}
 ::google::protobuf::int32 WorkFragment::output_dep_id(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.WorkFragment.output_dep_id)
  return output_dep_id_.Get(index);
}
 void WorkFragment::set_output_dep_id(int index, ::google::protobuf::int32 value) {
  output_dep_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.WorkFragment.output_dep_id)
}
 void WorkFragment::add_output_dep_id(::google::protobuf::int32 value) {
  output_dep_id_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.WorkFragment.output_dep_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WorkFragment::output_dep_id() const {
  // @@protoc_insertion_point(field_list:peloton.message.WorkFragment.output_dep_id)
  return output_dep_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WorkFragment::mutable_output_dep_id() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.WorkFragment.output_dep_id)
  return &output_dep_id_;
}

// repeated int32 param_index = 5 [packed = true];
int WorkFragment::param_index_size() const {
  return param_index_.size();
}
void WorkFragment::clear_param_index() {
  param_index_.Clear();
}
 ::google::protobuf::int32 WorkFragment::param_index(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.WorkFragment.param_index)
  return param_index_.Get(index);
}
 void WorkFragment::set_param_index(int index, ::google::protobuf::int32 value) {
  param_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.WorkFragment.param_index)
}
 void WorkFragment::add_param_index(::google::protobuf::int32 value) {
  param_index_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.WorkFragment.param_index)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WorkFragment::param_index() const {
  // @@protoc_insertion_point(field_list:peloton.message.WorkFragment.param_index)
  return param_index_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WorkFragment::mutable_param_index() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.WorkFragment.param_index)
  return &param_index_;
}

// repeated int32 stmt_counter = 6 [packed = true];
int WorkFragment::stmt_counter_size() const {
  return stmt_counter_.size();
}
void WorkFragment::clear_stmt_counter() {
  stmt_counter_.Clear();
}
 ::google::protobuf::int32 WorkFragment::stmt_counter(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.WorkFragment.stmt_counter)
  return stmt_counter_.Get(index);
}
 void WorkFragment::set_stmt_counter(int index, ::google::protobuf::int32 value) {
  stmt_counter_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.WorkFragment.stmt_counter)
}
 void WorkFragment::add_stmt_counter(::google::protobuf::int32 value) {
  stmt_counter_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.WorkFragment.stmt_counter)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WorkFragment::stmt_counter() const {
  // @@protoc_insertion_point(field_list:peloton.message.WorkFragment.stmt_counter)
  return stmt_counter_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WorkFragment::mutable_stmt_counter() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.WorkFragment.stmt_counter)
  return &stmt_counter_;
}

// repeated int32 stmt_index = 7 [packed = true];
int WorkFragment::stmt_index_size() const {
  return stmt_index_.size();
}
void WorkFragment::clear_stmt_index() {
  stmt_index_.Clear();
}
 ::google::protobuf::int32 WorkFragment::stmt_index(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.WorkFragment.stmt_index)
  return stmt_index_.Get(index);
}
 void WorkFragment::set_stmt_index(int index, ::google::protobuf::int32 value) {
  stmt_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.WorkFragment.stmt_index)
}
 void WorkFragment::add_stmt_index(::google::protobuf::int32 value) {
  stmt_index_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.WorkFragment.stmt_index)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WorkFragment::stmt_index() const {
  // @@protoc_insertion_point(field_list:peloton.message.WorkFragment.stmt_index)
  return stmt_index_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WorkFragment::mutable_stmt_index() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.WorkFragment.stmt_index)
  return &stmt_index_;
}

// repeated bool stmt_ignore = 8 [packed = true];
int WorkFragment::stmt_ignore_size() const {
  return stmt_ignore_.size();
}
void WorkFragment::clear_stmt_ignore() {
  stmt_ignore_.Clear();
}
 bool WorkFragment::stmt_ignore(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.WorkFragment.stmt_ignore)
  return stmt_ignore_.Get(index);
}
 void WorkFragment::set_stmt_ignore(int index, bool value) {
  stmt_ignore_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.WorkFragment.stmt_ignore)
}
 void WorkFragment::add_stmt_ignore(bool value) {
  stmt_ignore_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.WorkFragment.stmt_ignore)
}
 const ::google::protobuf::RepeatedField< bool >&
WorkFragment::stmt_ignore() const {
  // @@protoc_insertion_point(field_list:peloton.message.WorkFragment.stmt_ignore)
  return stmt_ignore_;
}
 ::google::protobuf::RepeatedField< bool >*
WorkFragment::mutable_stmt_ignore() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.WorkFragment.stmt_ignore)
  return &stmt_ignore_;
}

// required bool read_only = 9;
bool WorkFragment::has_read_only() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void WorkFragment::set_has_read_only() {
  _has_bits_[0] |= 0x00000100u;
}
void WorkFragment::clear_has_read_only() {
  _has_bits_[0] &= ~0x00000100u;
}
void WorkFragment::clear_read_only() {
  read_only_ = false;
  clear_has_read_only();
}
 bool WorkFragment::read_only() const {
  // @@protoc_insertion_point(field_get:peloton.message.WorkFragment.read_only)
  return read_only_;
}
 void WorkFragment::set_read_only(bool value) {
  set_has_read_only();
  read_only_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.WorkFragment.read_only)
}

// optional bool needs_input = 10 [default = false];
bool WorkFragment::has_needs_input() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void WorkFragment::set_has_needs_input() {
  _has_bits_[0] |= 0x00000200u;
}
void WorkFragment::clear_has_needs_input() {
  _has_bits_[0] &= ~0x00000200u;
}
void WorkFragment::clear_needs_input() {
  needs_input_ = false;
  clear_has_needs_input();
}
 bool WorkFragment::needs_input() const {
  // @@protoc_insertion_point(field_get:peloton.message.WorkFragment.needs_input)
  return needs_input_;
}
 void WorkFragment::set_needs_input(bool value) {
  set_has_needs_input();
  needs_input_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.WorkFragment.needs_input)
}

// optional bool last_fragment = 11 [default = false];
bool WorkFragment::has_last_fragment() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void WorkFragment::set_has_last_fragment() {
  _has_bits_[0] |= 0x00000400u;
}
void WorkFragment::clear_has_last_fragment() {
  _has_bits_[0] &= ~0x00000400u;
}
void WorkFragment::clear_last_fragment() {
  last_fragment_ = false;
  clear_has_last_fragment();
}
 bool WorkFragment::last_fragment() const {
  // @@protoc_insertion_point(field_get:peloton.message.WorkFragment.last_fragment)
  return last_fragment_;
}
 void WorkFragment::set_last_fragment(bool value) {
  set_has_last_fragment();
  last_fragment_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.WorkFragment.last_fragment)
}

// optional bool prefetch = 12 [default = false];
bool WorkFragment::has_prefetch() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void WorkFragment::set_has_prefetch() {
  _has_bits_[0] |= 0x00000800u;
}
void WorkFragment::clear_has_prefetch() {
  _has_bits_[0] &= ~0x00000800u;
}
void WorkFragment::clear_prefetch() {
  prefetch_ = false;
  clear_has_prefetch();
}
 bool WorkFragment::prefetch() const {
  // @@protoc_insertion_point(field_get:peloton.message.WorkFragment.prefetch)
  return prefetch_;
}
 void WorkFragment::set_prefetch(bool value) {
  set_has_prefetch();
  prefetch_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.WorkFragment.prefetch)
}

// optional bool force = 13 [default = false];
bool WorkFragment::has_force() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void WorkFragment::set_has_force() {
  _has_bits_[0] |= 0x00001000u;
}
void WorkFragment::clear_has_force() {
  _has_bits_[0] &= ~0x00001000u;
}
void WorkFragment::clear_force() {
  force_ = false;
  clear_has_force();
}
 bool WorkFragment::force() const {
  // @@protoc_insertion_point(field_get:peloton.message.WorkFragment.force)
  return force_;
}
 void WorkFragment::set_force(bool value) {
  set_has_force();
  force_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.WorkFragment.force)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkResult::kPartitionIdFieldNumber;
const int WorkResult::kDepIdFieldNumber;
const int WorkResult::kDepDataFieldNumber;
const int WorkResult::kStatusFieldNumber;
const int WorkResult::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkResult::WorkResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.WorkResult)
}

void WorkResult::InitAsDefaultInstance() {
}

WorkResult::WorkResult(const WorkResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.WorkResult)
}

void WorkResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  partition_id_ = 0;
  status_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkResult::~WorkResult() {
  // @@protoc_insertion_point(destructor:peloton.message.WorkResult)
  SharedDtor();
}

void WorkResult::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WorkResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkResult_descriptor_;
}

const WorkResult& WorkResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

WorkResult* WorkResult::default_instance_ = NULL;

WorkResult* WorkResult::New(::google::protobuf::Arena* arena) const {
  WorkResult* n = new WorkResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkResult::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WorkResult*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 25u) {
    ZR_(partition_id_, status_);
    if (has_error()) {
      error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  dep_id_.Clear();
  dep_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WorkResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.WorkResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 partition_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_id_)));
          set_has_partition_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dep_id;
        break;
      }

      // repeated int32 dep_id = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_dep_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dep_id())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_dep_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dep_data;
        break;
      }

      // repeated bytes dep_data = 3;
      case 3: {
        if (tag == 26) {
         parse_dep_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_dep_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dep_data;
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required .peloton.message.Status status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::message::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::message::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_error;
        break;
      }

      // optional bytes error = 5;
      case 5: {
        if (tag == 42) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.WorkResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.WorkResult)
  return false;
#undef DO_
}

void WorkResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.WorkResult)
  // required int32 partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->partition_id(), output);
  }

  // repeated int32 dep_id = 2 [packed = true];
  if (this->dep_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dep_id_cached_byte_size_);
  }
  for (int i = 0; i < this->dep_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->dep_id(i), output);
  }

  // repeated bytes dep_data = 3;
  for (int i = 0; i < this->dep_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->dep_data(i), output);
  }

  // required .peloton.message.Status status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // optional bytes error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.WorkResult)
}

::google::protobuf::uint8* WorkResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.WorkResult)
  // required int32 partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->partition_id(), target);
  }

  // repeated int32 dep_id = 2 [packed = true];
  if (this->dep_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dep_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dep_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->dep_id(i), target);
  }

  // repeated bytes dep_data = 3;
  for (int i = 0; i < this->dep_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->dep_data(i), target);
  }

  // required .peloton.message.Status status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // optional bytes error = 5;
  if (has_error()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.WorkResult)
  return target;
}

int WorkResult::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_partition_id()) {
    // required int32 partition_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partition_id());
  }

  if (has_status()) {
    // required .peloton.message.Status status = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
int WorkResult::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required int32 partition_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partition_id());

    // required .peloton.message.Status status = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes error = 5;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->error());
  }

  // repeated int32 dep_id = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->dep_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dep_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dep_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bytes dep_data = 3;
  total_size += 1 * this->dep_data_size();
  for (int i = 0; i < this->dep_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->dep_data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkResult::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WorkResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkResult>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkResult::MergeFrom(const WorkResult& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  dep_id_.MergeFrom(from.dep_id_);
  dep_data_.MergeFrom(from.dep_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      set_partition_id(from.partition_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error()) {
      set_has_error();
      error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WorkResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkResult::CopyFrom(const WorkResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void WorkResult::Swap(WorkResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkResult::InternalSwap(WorkResult* other) {
  std::swap(partition_id_, other->partition_id_);
  dep_id_.UnsafeArenaSwap(&other->dep_id_);
  dep_data_.UnsafeArenaSwap(&other->dep_data_);
  std::swap(status_, other->status_);
  error_.Swap(&other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkResult_descriptor_;
  metadata.reflection = WorkResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorkResult

// required int32 partition_id = 1;
bool WorkResult::has_partition_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WorkResult::set_has_partition_id() {
  _has_bits_[0] |= 0x00000001u;
}
void WorkResult::clear_has_partition_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void WorkResult::clear_partition_id() {
  partition_id_ = 0;
  clear_has_partition_id();
}
 ::google::protobuf::int32 WorkResult::partition_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.WorkResult.partition_id)
  return partition_id_;
}
 void WorkResult::set_partition_id(::google::protobuf::int32 value) {
  set_has_partition_id();
  partition_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.WorkResult.partition_id)
}

// repeated int32 dep_id = 2 [packed = true];
int WorkResult::dep_id_size() const {
  return dep_id_.size();
}
void WorkResult::clear_dep_id() {
  dep_id_.Clear();
}
 ::google::protobuf::int32 WorkResult::dep_id(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.WorkResult.dep_id)
  return dep_id_.Get(index);
}
 void WorkResult::set_dep_id(int index, ::google::protobuf::int32 value) {
  dep_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.WorkResult.dep_id)
}
 void WorkResult::add_dep_id(::google::protobuf::int32 value) {
  dep_id_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.WorkResult.dep_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WorkResult::dep_id() const {
  // @@protoc_insertion_point(field_list:peloton.message.WorkResult.dep_id)
  return dep_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WorkResult::mutable_dep_id() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.WorkResult.dep_id)
  return &dep_id_;
}

// repeated bytes dep_data = 3;
int WorkResult::dep_data_size() const {
  return dep_data_.size();
}
void WorkResult::clear_dep_data() {
  dep_data_.Clear();
}
 const ::std::string& WorkResult::dep_data(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.WorkResult.dep_data)
  return dep_data_.Get(index);
}
 ::std::string* WorkResult::mutable_dep_data(int index) {
  // @@protoc_insertion_point(field_mutable:peloton.message.WorkResult.dep_data)
  return dep_data_.Mutable(index);
}
 void WorkResult::set_dep_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:peloton.message.WorkResult.dep_data)
  dep_data_.Mutable(index)->assign(value);
}
 void WorkResult::set_dep_data(int index, const char* value) {
  dep_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:peloton.message.WorkResult.dep_data)
}
 void WorkResult::set_dep_data(int index, const void* value, size_t size) {
  dep_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:peloton.message.WorkResult.dep_data)
}
 ::std::string* WorkResult::add_dep_data() {
  return dep_data_.Add();
}
 void WorkResult::add_dep_data(const ::std::string& value) {
  dep_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:peloton.message.WorkResult.dep_data)
}
 void WorkResult::add_dep_data(const char* value) {
  dep_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:peloton.message.WorkResult.dep_data)
}
 void WorkResult::add_dep_data(const void* value, size_t size) {
  dep_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:peloton.message.WorkResult.dep_data)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
WorkResult::dep_data() const {
  // @@protoc_insertion_point(field_list:peloton.message.WorkResult.dep_data)
  return dep_data_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
WorkResult::mutable_dep_data() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.WorkResult.dep_data)
  return &dep_data_;
}

// required .peloton.message.Status status = 4;
bool WorkResult::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WorkResult::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
void WorkResult::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void WorkResult::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::peloton::message::Status WorkResult::status() const {
  // @@protoc_insertion_point(field_get:peloton.message.WorkResult.status)
  return static_cast< ::peloton::message::Status >(status_);
}
 void WorkResult::set_status(::peloton::message::Status value) {
  assert(::peloton::message::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.WorkResult.status)
}

// optional bytes error = 5;
bool WorkResult::has_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void WorkResult::set_has_error() {
  _has_bits_[0] |= 0x00000010u;
}
void WorkResult::clear_has_error() {
  _has_bits_[0] &= ~0x00000010u;
}
void WorkResult::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
 const ::std::string& WorkResult::error() const {
  // @@protoc_insertion_point(field_get:peloton.message.WorkResult.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorkResult::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.message.WorkResult.error)
}
 void WorkResult::set_error(const char* value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.message.WorkResult.error)
}
 void WorkResult::set_error(const void* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.message.WorkResult.error)
}
 ::std::string* WorkResult::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:peloton.message.WorkResult.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WorkResult::release_error() {
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorkResult::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:peloton.message.WorkResult.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryEstimate::kStmtIdsFieldNumber;
const int QueryEstimate::kStmtCountersFieldNumber;
const int QueryEstimate::kTimeEstimateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryEstimate::QueryEstimate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.QueryEstimate)
}

void QueryEstimate::InitAsDefaultInstance() {
}

QueryEstimate::QueryEstimate(const QueryEstimate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.QueryEstimate)
}

void QueryEstimate::SharedCtor() {
  _cached_size_ = 0;
  time_estimate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryEstimate::~QueryEstimate() {
  // @@protoc_insertion_point(destructor:peloton.message.QueryEstimate)
  SharedDtor();
}

void QueryEstimate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryEstimate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryEstimate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryEstimate_descriptor_;
}

const QueryEstimate& QueryEstimate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

QueryEstimate* QueryEstimate::default_instance_ = NULL;

QueryEstimate* QueryEstimate::New(::google::protobuf::Arena* arena) const {
  QueryEstimate* n = new QueryEstimate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryEstimate::Clear() {
  time_estimate_ = 0;
  stmt_ids_.Clear();
  stmt_counters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QueryEstimate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.QueryEstimate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 stmt_ids = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stmt_ids())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_stmt_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stmt_counters;
        break;
      }

      // repeated int32 stmt_counters = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_stmt_counters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stmt_counters())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_stmt_counters())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_estimate;
        break;
      }

      // optional int32 time_estimate = 3;
      case 3: {
        if (tag == 24) {
         parse_time_estimate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_estimate_)));
          set_has_time_estimate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.QueryEstimate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.QueryEstimate)
  return false;
#undef DO_
}

void QueryEstimate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.QueryEstimate)
  // repeated int32 stmt_ids = 1 [packed = true];
  if (this->stmt_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_stmt_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->stmt_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->stmt_ids(i), output);
  }

  // repeated int32 stmt_counters = 2 [packed = true];
  if (this->stmt_counters_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_stmt_counters_cached_byte_size_);
  }
  for (int i = 0; i < this->stmt_counters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->stmt_counters(i), output);
  }

  // optional int32 time_estimate = 3;
  if (has_time_estimate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time_estimate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.QueryEstimate)
}

::google::protobuf::uint8* QueryEstimate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.QueryEstimate)
  // repeated int32 stmt_ids = 1 [packed = true];
  if (this->stmt_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _stmt_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->stmt_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->stmt_ids(i), target);
  }

  // repeated int32 stmt_counters = 2 [packed = true];
  if (this->stmt_counters_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _stmt_counters_cached_byte_size_, target);
  }
  for (int i = 0; i < this->stmt_counters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->stmt_counters(i), target);
  }

  // optional int32 time_estimate = 3;
  if (has_time_estimate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time_estimate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.QueryEstimate)
  return target;
}

int QueryEstimate::ByteSize() const {
  int total_size = 0;

  // optional int32 time_estimate = 3;
  if (has_time_estimate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time_estimate());
  }

  // repeated int32 stmt_ids = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->stmt_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stmt_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stmt_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 stmt_counters = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->stmt_counters_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stmt_counters(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stmt_counters_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryEstimate::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryEstimate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryEstimate>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryEstimate::MergeFrom(const QueryEstimate& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  stmt_ids_.MergeFrom(from.stmt_ids_);
  stmt_counters_.MergeFrom(from.stmt_counters_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_time_estimate()) {
      set_time_estimate(from.time_estimate());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QueryEstimate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryEstimate::CopyFrom(const QueryEstimate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryEstimate::IsInitialized() const {

  return true;
}

void QueryEstimate::Swap(QueryEstimate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryEstimate::InternalSwap(QueryEstimate* other) {
  stmt_ids_.UnsafeArenaSwap(&other->stmt_ids_);
  stmt_counters_.UnsafeArenaSwap(&other->stmt_counters_);
  std::swap(time_estimate_, other->time_estimate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryEstimate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryEstimate_descriptor_;
  metadata.reflection = QueryEstimate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryEstimate

// repeated int32 stmt_ids = 1 [packed = true];
int QueryEstimate::stmt_ids_size() const {
  return stmt_ids_.size();
}
void QueryEstimate::clear_stmt_ids() {
  stmt_ids_.Clear();
}
 ::google::protobuf::int32 QueryEstimate::stmt_ids(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.QueryEstimate.stmt_ids)
  return stmt_ids_.Get(index);
}
 void QueryEstimate::set_stmt_ids(int index, ::google::protobuf::int32 value) {
  stmt_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.QueryEstimate.stmt_ids)
}
 void QueryEstimate::add_stmt_ids(::google::protobuf::int32 value) {
  stmt_ids_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.QueryEstimate.stmt_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QueryEstimate::stmt_ids() const {
  // @@protoc_insertion_point(field_list:peloton.message.QueryEstimate.stmt_ids)
  return stmt_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QueryEstimate::mutable_stmt_ids() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.QueryEstimate.stmt_ids)
  return &stmt_ids_;
}

// repeated int32 stmt_counters = 2 [packed = true];
int QueryEstimate::stmt_counters_size() const {
  return stmt_counters_.size();
}
void QueryEstimate::clear_stmt_counters() {
  stmt_counters_.Clear();
}
 ::google::protobuf::int32 QueryEstimate::stmt_counters(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.QueryEstimate.stmt_counters)
  return stmt_counters_.Get(index);
}
 void QueryEstimate::set_stmt_counters(int index, ::google::protobuf::int32 value) {
  stmt_counters_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.QueryEstimate.stmt_counters)
}
 void QueryEstimate::add_stmt_counters(::google::protobuf::int32 value) {
  stmt_counters_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.QueryEstimate.stmt_counters)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QueryEstimate::stmt_counters() const {
  // @@protoc_insertion_point(field_list:peloton.message.QueryEstimate.stmt_counters)
  return stmt_counters_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QueryEstimate::mutable_stmt_counters() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.QueryEstimate.stmt_counters)
  return &stmt_counters_;
}

// optional int32 time_estimate = 3;
bool QueryEstimate::has_time_estimate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QueryEstimate::set_has_time_estimate() {
  _has_bits_[0] |= 0x00000004u;
}
void QueryEstimate::clear_has_time_estimate() {
  _has_bits_[0] &= ~0x00000004u;
}
void QueryEstimate::clear_time_estimate() {
  time_estimate_ = 0;
  clear_has_time_estimate();
}
 ::google::protobuf::int32 QueryEstimate::time_estimate() const {
  // @@protoc_insertion_point(field_get:peloton.message.QueryEstimate.time_estimate)
  return time_estimate_;
}
 void QueryEstimate::set_time_estimate(::google::protobuf::int32 value) {
  set_has_time_estimate();
  time_estimate_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.QueryEstimate.time_estimate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionInitRequest::kLastTransactionIdFieldNumber;
const int TransactionInitRequest::kTransactionIdFieldNumber;
const int TransactionInitRequest::kBasePartitionFieldNumber;
const int TransactionInitRequest::kProcedureIdFieldNumber;
const int TransactionInitRequest::kPartitionsFieldNumber;
const int TransactionInitRequest::kProcParamsFieldNumber;
const int TransactionInitRequest::kPrefetchFragmentsFieldNumber;
const int TransactionInitRequest::kPrefetchParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionInitRequest::TransactionInitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.TransactionInitRequest)
}

void TransactionInitRequest::InitAsDefaultInstance() {
}

TransactionInitRequest::TransactionInitRequest(const TransactionInitRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.TransactionInitRequest)
}

void TransactionInitRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  last_transaction_id_ = GOOGLE_LONGLONG(0);
  transaction_id_ = GOOGLE_LONGLONG(0);
  base_partition_ = 0;
  procedure_id_ = 0;
  proc_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionInitRequest::~TransactionInitRequest() {
  // @@protoc_insertion_point(destructor:peloton.message.TransactionInitRequest)
  SharedDtor();
}

void TransactionInitRequest::SharedDtor() {
  proc_params_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TransactionInitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionInitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionInitRequest_descriptor_;
}

const TransactionInitRequest& TransactionInitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionInitRequest* TransactionInitRequest::default_instance_ = NULL;

TransactionInitRequest* TransactionInitRequest::New(::google::protobuf::Arena* arena) const {
  TransactionInitRequest* n = new TransactionInitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionInitRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TransactionInitRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 47u) {
    ZR_(last_transaction_id_, procedure_id_);
    if (has_proc_params()) {
      proc_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  partitions_.Clear();
  prefetch_fragments_.Clear();
  prefetch_params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionInitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.TransactionInitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_transaction_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_transaction_id_)));
          set_has_last_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_transaction_id;
        break;
      }

      // required int64 transaction_id = 2;
      case 2: {
        if (tag == 16) {
         parse_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_base_partition;
        break;
      }

      // required int32 base_partition = 3;
      case 3: {
        if (tag == 24) {
         parse_base_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_partition_)));
          set_has_base_partition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_procedure_id;
        break;
      }

      // required int32 procedure_id = 4;
      case 4: {
        if (tag == 32) {
         parse_procedure_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &procedure_id_)));
          set_has_procedure_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_partitions;
        break;
      }

      // repeated int32 partitions = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_partitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42, input, this->mutable_partitions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_proc_params;
        break;
      }

      // optional bytes proc_params = 6;
      case 6: {
        if (tag == 50) {
         parse_proc_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proc_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_prefetch_fragments;
        break;
      }

      // repeated .peloton.message.WorkFragment prefetch_fragments = 7;
      case 7: {
        if (tag == 58) {
         parse_prefetch_fragments:
          DO_(input->IncrementRecursionDepth());
         parse_loop_prefetch_fragments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_prefetch_fragments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_prefetch_fragments;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(66)) goto parse_prefetch_params;
        break;
      }

      // repeated bytes prefetch_params = 8;
      case 8: {
        if (tag == 66) {
         parse_prefetch_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_prefetch_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_prefetch_params;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.TransactionInitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.TransactionInitRequest)
  return false;
#undef DO_
}

void TransactionInitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.TransactionInitRequest)
  // optional int64 last_transaction_id = 1;
  if (has_last_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_transaction_id(), output);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->transaction_id(), output);
  }

  // required int32 base_partition = 3;
  if (has_base_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->base_partition(), output);
  }

  // required int32 procedure_id = 4;
  if (has_procedure_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->procedure_id(), output);
  }

  // repeated int32 partitions = 5 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_partitions_cached_byte_size_);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  // optional bytes proc_params = 6;
  if (has_proc_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->proc_params(), output);
  }

  // repeated .peloton.message.WorkFragment prefetch_fragments = 7;
  for (unsigned int i = 0, n = this->prefetch_fragments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->prefetch_fragments(i), output);
  }

  // repeated bytes prefetch_params = 8;
  for (int i = 0; i < this->prefetch_params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->prefetch_params(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.TransactionInitRequest)
}

::google::protobuf::uint8* TransactionInitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.TransactionInitRequest)
  // optional int64 last_transaction_id = 1;
  if (has_last_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_transaction_id(), target);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->transaction_id(), target);
  }

  // required int32 base_partition = 3;
  if (has_base_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->base_partition(), target);
  }

  // required int32 procedure_id = 4;
  if (has_procedure_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->procedure_id(), target);
  }

  // repeated int32 partitions = 5 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _partitions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions(i), target);
  }

  // optional bytes proc_params = 6;
  if (has_proc_params()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->proc_params(), target);
  }

  // repeated .peloton.message.WorkFragment prefetch_fragments = 7;
  for (unsigned int i = 0, n = this->prefetch_fragments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->prefetch_fragments(i), target);
  }

  // repeated bytes prefetch_params = 8;
  for (int i = 0; i < this->prefetch_params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(8, this->prefetch_params(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.TransactionInitRequest)
  return target;
}

int TransactionInitRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_base_partition()) {
    // required int32 base_partition = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->base_partition());
  }

  if (has_procedure_id()) {
    // required int32 procedure_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->procedure_id());
  }

  return total_size;
}
int TransactionInitRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required int32 base_partition = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->base_partition());

    // required int32 procedure_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->procedure_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 33u) {
    // optional int64 last_transaction_id = 1;
    if (has_last_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_transaction_id());
    }

    // optional bytes proc_params = 6;
    if (has_proc_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->proc_params());
    }

  }
  // repeated int32 partitions = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->partitions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->partitions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .peloton.message.WorkFragment prefetch_fragments = 7;
  total_size += 1 * this->prefetch_fragments_size();
  for (int i = 0; i < this->prefetch_fragments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prefetch_fragments(i));
  }

  // repeated bytes prefetch_params = 8;
  total_size += 1 * this->prefetch_params_size();
  for (int i = 0; i < this->prefetch_params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->prefetch_params(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionInitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionInitRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionInitRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionInitRequest::MergeFrom(const TransactionInitRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  partitions_.MergeFrom(from.partitions_);
  prefetch_fragments_.MergeFrom(from.prefetch_fragments_);
  prefetch_params_.MergeFrom(from.prefetch_params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_transaction_id()) {
      set_last_transaction_id(from.last_transaction_id());
    }
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_base_partition()) {
      set_base_partition(from.base_partition());
    }
    if (from.has_procedure_id()) {
      set_procedure_id(from.procedure_id());
    }
    if (from.has_proc_params()) {
      set_has_proc_params();
      proc_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proc_params_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionInitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionInitRequest::CopyFrom(const TransactionInitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionInitRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->prefetch_fragments())) return false;
  return true;
}

void TransactionInitRequest::Swap(TransactionInitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionInitRequest::InternalSwap(TransactionInitRequest* other) {
  std::swap(last_transaction_id_, other->last_transaction_id_);
  std::swap(transaction_id_, other->transaction_id_);
  std::swap(base_partition_, other->base_partition_);
  std::swap(procedure_id_, other->procedure_id_);
  partitions_.UnsafeArenaSwap(&other->partitions_);
  proc_params_.Swap(&other->proc_params_);
  prefetch_fragments_.UnsafeArenaSwap(&other->prefetch_fragments_);
  prefetch_params_.UnsafeArenaSwap(&other->prefetch_params_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionInitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionInitRequest_descriptor_;
  metadata.reflection = TransactionInitRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionInitRequest

// optional int64 last_transaction_id = 1;
bool TransactionInitRequest::has_last_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionInitRequest::set_has_last_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionInitRequest::clear_has_last_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionInitRequest::clear_last_transaction_id() {
  last_transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_last_transaction_id();
}
 ::google::protobuf::int64 TransactionInitRequest::last_transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionInitRequest.last_transaction_id)
  return last_transaction_id_;
}
 void TransactionInitRequest::set_last_transaction_id(::google::protobuf::int64 value) {
  set_has_last_transaction_id();
  last_transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionInitRequest.last_transaction_id)
}

// required int64 transaction_id = 2;
bool TransactionInitRequest::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionInitRequest::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionInitRequest::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionInitRequest::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
 ::google::protobuf::int64 TransactionInitRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionInitRequest.transaction_id)
  return transaction_id_;
}
 void TransactionInitRequest::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionInitRequest.transaction_id)
}

// required int32 base_partition = 3;
bool TransactionInitRequest::has_base_partition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionInitRequest::set_has_base_partition() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionInitRequest::clear_has_base_partition() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionInitRequest::clear_base_partition() {
  base_partition_ = 0;
  clear_has_base_partition();
}
 ::google::protobuf::int32 TransactionInitRequest::base_partition() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionInitRequest.base_partition)
  return base_partition_;
}
 void TransactionInitRequest::set_base_partition(::google::protobuf::int32 value) {
  set_has_base_partition();
  base_partition_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionInitRequest.base_partition)
}

// required int32 procedure_id = 4;
bool TransactionInitRequest::has_procedure_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransactionInitRequest::set_has_procedure_id() {
  _has_bits_[0] |= 0x00000008u;
}
void TransactionInitRequest::clear_has_procedure_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransactionInitRequest::clear_procedure_id() {
  procedure_id_ = 0;
  clear_has_procedure_id();
}
 ::google::protobuf::int32 TransactionInitRequest::procedure_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionInitRequest.procedure_id)
  return procedure_id_;
}
 void TransactionInitRequest::set_procedure_id(::google::protobuf::int32 value) {
  set_has_procedure_id();
  procedure_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionInitRequest.procedure_id)
}

// repeated int32 partitions = 5 [packed = true];
int TransactionInitRequest::partitions_size() const {
  return partitions_.size();
}
void TransactionInitRequest::clear_partitions() {
  partitions_.Clear();
}
 ::google::protobuf::int32 TransactionInitRequest::partitions(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionInitRequest.partitions)
  return partitions_.Get(index);
}
 void TransactionInitRequest::set_partitions(int index, ::google::protobuf::int32 value) {
  partitions_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.TransactionInitRequest.partitions)
}
 void TransactionInitRequest::add_partitions(::google::protobuf::int32 value) {
  partitions_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.TransactionInitRequest.partitions)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionInitRequest::partitions() const {
  // @@protoc_insertion_point(field_list:peloton.message.TransactionInitRequest.partitions)
  return partitions_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionInitRequest::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.TransactionInitRequest.partitions)
  return &partitions_;
}

// optional bytes proc_params = 6;
bool TransactionInitRequest::has_proc_params() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TransactionInitRequest::set_has_proc_params() {
  _has_bits_[0] |= 0x00000020u;
}
void TransactionInitRequest::clear_has_proc_params() {
  _has_bits_[0] &= ~0x00000020u;
}
void TransactionInitRequest::clear_proc_params() {
  proc_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proc_params();
}
 const ::std::string& TransactionInitRequest::proc_params() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionInitRequest.proc_params)
  return proc_params_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionInitRequest::set_proc_params(const ::std::string& value) {
  set_has_proc_params();
  proc_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.message.TransactionInitRequest.proc_params)
}
 void TransactionInitRequest::set_proc_params(const char* value) {
  set_has_proc_params();
  proc_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.message.TransactionInitRequest.proc_params)
}
 void TransactionInitRequest::set_proc_params(const void* value, size_t size) {
  set_has_proc_params();
  proc_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.message.TransactionInitRequest.proc_params)
}
 ::std::string* TransactionInitRequest::mutable_proc_params() {
  set_has_proc_params();
  // @@protoc_insertion_point(field_mutable:peloton.message.TransactionInitRequest.proc_params)
  return proc_params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransactionInitRequest::release_proc_params() {
  clear_has_proc_params();
  return proc_params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionInitRequest::set_allocated_proc_params(::std::string* proc_params) {
  if (proc_params != NULL) {
    set_has_proc_params();
  } else {
    clear_has_proc_params();
  }
  proc_params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proc_params);
  // @@protoc_insertion_point(field_set_allocated:peloton.message.TransactionInitRequest.proc_params)
}

// repeated .peloton.message.WorkFragment prefetch_fragments = 7;
int TransactionInitRequest::prefetch_fragments_size() const {
  return prefetch_fragments_.size();
}
void TransactionInitRequest::clear_prefetch_fragments() {
  prefetch_fragments_.Clear();
}
const ::peloton::message::WorkFragment& TransactionInitRequest::prefetch_fragments(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionInitRequest.prefetch_fragments)
  return prefetch_fragments_.Get(index);
}
::peloton::message::WorkFragment* TransactionInitRequest::mutable_prefetch_fragments(int index) {
  // @@protoc_insertion_point(field_mutable:peloton.message.TransactionInitRequest.prefetch_fragments)
  return prefetch_fragments_.Mutable(index);
}
::peloton::message::WorkFragment* TransactionInitRequest::add_prefetch_fragments() {
  // @@protoc_insertion_point(field_add:peloton.message.TransactionInitRequest.prefetch_fragments)
  return prefetch_fragments_.Add();
}
::google::protobuf::RepeatedPtrField< ::peloton::message::WorkFragment >*
TransactionInitRequest::mutable_prefetch_fragments() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.TransactionInitRequest.prefetch_fragments)
  return &prefetch_fragments_;
}
const ::google::protobuf::RepeatedPtrField< ::peloton::message::WorkFragment >&
TransactionInitRequest::prefetch_fragments() const {
  // @@protoc_insertion_point(field_list:peloton.message.TransactionInitRequest.prefetch_fragments)
  return prefetch_fragments_;
}

// repeated bytes prefetch_params = 8;
int TransactionInitRequest::prefetch_params_size() const {
  return prefetch_params_.size();
}
void TransactionInitRequest::clear_prefetch_params() {
  prefetch_params_.Clear();
}
 const ::std::string& TransactionInitRequest::prefetch_params(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionInitRequest.prefetch_params)
  return prefetch_params_.Get(index);
}
 ::std::string* TransactionInitRequest::mutable_prefetch_params(int index) {
  // @@protoc_insertion_point(field_mutable:peloton.message.TransactionInitRequest.prefetch_params)
  return prefetch_params_.Mutable(index);
}
 void TransactionInitRequest::set_prefetch_params(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:peloton.message.TransactionInitRequest.prefetch_params)
  prefetch_params_.Mutable(index)->assign(value);
}
 void TransactionInitRequest::set_prefetch_params(int index, const char* value) {
  prefetch_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:peloton.message.TransactionInitRequest.prefetch_params)
}
 void TransactionInitRequest::set_prefetch_params(int index, const void* value, size_t size) {
  prefetch_params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:peloton.message.TransactionInitRequest.prefetch_params)
}
 ::std::string* TransactionInitRequest::add_prefetch_params() {
  return prefetch_params_.Add();
}
 void TransactionInitRequest::add_prefetch_params(const ::std::string& value) {
  prefetch_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:peloton.message.TransactionInitRequest.prefetch_params)
}
 void TransactionInitRequest::add_prefetch_params(const char* value) {
  prefetch_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:peloton.message.TransactionInitRequest.prefetch_params)
}
 void TransactionInitRequest::add_prefetch_params(const void* value, size_t size) {
  prefetch_params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:peloton.message.TransactionInitRequest.prefetch_params)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TransactionInitRequest::prefetch_params() const {
  // @@protoc_insertion_point(field_list:peloton.message.TransactionInitRequest.prefetch_params)
  return prefetch_params_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TransactionInitRequest::mutable_prefetch_params() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.TransactionInitRequest.prefetch_params)
  return &prefetch_params_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionInitResponse::kTransactionIdFieldNumber;
const int TransactionInitResponse::kPartitionsFieldNumber;
const int TransactionInitResponse::kStatusFieldNumber;
const int TransactionInitResponse::kRejectPartitionFieldNumber;
const int TransactionInitResponse::kRejectTransactionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionInitResponse::TransactionInitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.TransactionInitResponse)
}

void TransactionInitResponse::InitAsDefaultInstance() {
}

TransactionInitResponse::TransactionInitResponse(const TransactionInitResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.TransactionInitResponse)
}

void TransactionInitResponse::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  reject_partition_ = 0;
  reject_transaction_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionInitResponse::~TransactionInitResponse() {
  // @@protoc_insertion_point(destructor:peloton.message.TransactionInitResponse)
  SharedDtor();
}

void TransactionInitResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionInitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionInitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionInitResponse_descriptor_;
}

const TransactionInitResponse& TransactionInitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionInitResponse* TransactionInitResponse::default_instance_ = NULL;

TransactionInitResponse* TransactionInitResponse::New(::google::protobuf::Arena* arena) const {
  TransactionInitResponse* n = new TransactionInitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionInitResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TransactionInitResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 29u) {
    ZR_(status_, reject_transaction_id_);
    transaction_id_ = GOOGLE_LONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  partitions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionInitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.TransactionInitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_partitions;
        break;
      }

      // repeated int32 partitions = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_partitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_partitions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .peloton.message.Status status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::message::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::message::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reject_partition;
        break;
      }

      // optional int32 reject_partition = 4;
      case 4: {
        if (tag == 32) {
         parse_reject_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reject_partition_)));
          set_has_reject_partition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reject_transaction_id;
        break;
      }

      // optional int64 reject_transaction_id = 5;
      case 5: {
        if (tag == 40) {
         parse_reject_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reject_transaction_id_)));
          set_has_reject_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.TransactionInitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.TransactionInitResponse)
  return false;
#undef DO_
}

void TransactionInitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.TransactionInitResponse)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_partitions_cached_byte_size_);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  // required .peloton.message.Status status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // optional int32 reject_partition = 4;
  if (has_reject_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reject_partition(), output);
  }

  // optional int64 reject_transaction_id = 5;
  if (has_reject_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->reject_transaction_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.TransactionInitResponse)
}

::google::protobuf::uint8* TransactionInitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.TransactionInitResponse)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _partitions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions(i), target);
  }

  // required .peloton.message.Status status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // optional int32 reject_partition = 4;
  if (has_reject_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reject_partition(), target);
  }

  // optional int64 reject_transaction_id = 5;
  if (has_reject_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->reject_transaction_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.TransactionInitResponse)
  return target;
}

int TransactionInitResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_status()) {
    // required .peloton.message.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
int TransactionInitResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required .peloton.message.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 24u) {
    // optional int32 reject_partition = 4;
    if (has_reject_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reject_partition());
    }

    // optional int64 reject_transaction_id = 5;
    if (has_reject_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reject_transaction_id());
    }

  }
  // repeated int32 partitions = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->partitions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->partitions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionInitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionInitResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionInitResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionInitResponse::MergeFrom(const TransactionInitResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  partitions_.MergeFrom(from.partitions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_reject_partition()) {
      set_reject_partition(from.reject_partition());
    }
    if (from.has_reject_transaction_id()) {
      set_reject_transaction_id(from.reject_transaction_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionInitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionInitResponse::CopyFrom(const TransactionInitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionInitResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void TransactionInitResponse::Swap(TransactionInitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionInitResponse::InternalSwap(TransactionInitResponse* other) {
  std::swap(transaction_id_, other->transaction_id_);
  partitions_.UnsafeArenaSwap(&other->partitions_);
  std::swap(status_, other->status_);
  std::swap(reject_partition_, other->reject_partition_);
  std::swap(reject_transaction_id_, other->reject_transaction_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionInitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionInitResponse_descriptor_;
  metadata.reflection = TransactionInitResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionInitResponse

// required int64 transaction_id = 1;
bool TransactionInitResponse::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionInitResponse::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionInitResponse::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionInitResponse::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
 ::google::protobuf::int64 TransactionInitResponse::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionInitResponse.transaction_id)
  return transaction_id_;
}
 void TransactionInitResponse::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionInitResponse.transaction_id)
}

// repeated int32 partitions = 2 [packed = true];
int TransactionInitResponse::partitions_size() const {
  return partitions_.size();
}
void TransactionInitResponse::clear_partitions() {
  partitions_.Clear();
}
 ::google::protobuf::int32 TransactionInitResponse::partitions(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionInitResponse.partitions)
  return partitions_.Get(index);
}
 void TransactionInitResponse::set_partitions(int index, ::google::protobuf::int32 value) {
  partitions_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.TransactionInitResponse.partitions)
}
 void TransactionInitResponse::add_partitions(::google::protobuf::int32 value) {
  partitions_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.TransactionInitResponse.partitions)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionInitResponse::partitions() const {
  // @@protoc_insertion_point(field_list:peloton.message.TransactionInitResponse.partitions)
  return partitions_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionInitResponse::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.TransactionInitResponse.partitions)
  return &partitions_;
}

// required .peloton.message.Status status = 3;
bool TransactionInitResponse::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionInitResponse::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionInitResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionInitResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::peloton::message::Status TransactionInitResponse::status() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionInitResponse.status)
  return static_cast< ::peloton::message::Status >(status_);
}
 void TransactionInitResponse::set_status(::peloton::message::Status value) {
  assert(::peloton::message::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionInitResponse.status)
}

// optional int32 reject_partition = 4;
bool TransactionInitResponse::has_reject_partition() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransactionInitResponse::set_has_reject_partition() {
  _has_bits_[0] |= 0x00000008u;
}
void TransactionInitResponse::clear_has_reject_partition() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransactionInitResponse::clear_reject_partition() {
  reject_partition_ = 0;
  clear_has_reject_partition();
}
 ::google::protobuf::int32 TransactionInitResponse::reject_partition() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionInitResponse.reject_partition)
  return reject_partition_;
}
 void TransactionInitResponse::set_reject_partition(::google::protobuf::int32 value) {
  set_has_reject_partition();
  reject_partition_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionInitResponse.reject_partition)
}

// optional int64 reject_transaction_id = 5;
bool TransactionInitResponse::has_reject_transaction_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TransactionInitResponse::set_has_reject_transaction_id() {
  _has_bits_[0] |= 0x00000010u;
}
void TransactionInitResponse::clear_has_reject_transaction_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void TransactionInitResponse::clear_reject_transaction_id() {
  reject_transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_reject_transaction_id();
}
 ::google::protobuf::int64 TransactionInitResponse::reject_transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionInitResponse.reject_transaction_id)
  return reject_transaction_id_;
}
 void TransactionInitResponse::set_reject_transaction_id(::google::protobuf::int64 value) {
  set_has_reject_transaction_id();
  reject_transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionInitResponse.reject_transaction_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionWorkRequest::kLastTransactionIdFieldNumber;
const int TransactionWorkRequest::kTransactionIdFieldNumber;
const int TransactionWorkRequest::kSourcePartitionFieldNumber;
const int TransactionWorkRequest::kFragmentsFieldNumber;
const int TransactionWorkRequest::kProcedureIdFieldNumber;
const int TransactionWorkRequest::kParamsFieldNumber;
const int TransactionWorkRequest::kAttachedDepIdFieldNumber;
const int TransactionWorkRequest::kAttachedDataFieldNumber;
const int TransactionWorkRequest::kDonePartitionFieldNumber;
const int TransactionWorkRequest::kProcParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionWorkRequest::TransactionWorkRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.TransactionWorkRequest)
}

void TransactionWorkRequest::InitAsDefaultInstance() {
}

TransactionWorkRequest::TransactionWorkRequest(const TransactionWorkRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.TransactionWorkRequest)
}

void TransactionWorkRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  last_transaction_id_ = GOOGLE_LONGLONG(0);
  transaction_id_ = GOOGLE_LONGLONG(0);
  source_partition_ = 0;
  procedure_id_ = 0;
  proc_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionWorkRequest::~TransactionWorkRequest() {
  // @@protoc_insertion_point(destructor:peloton.message.TransactionWorkRequest)
  SharedDtor();
}

void TransactionWorkRequest::SharedDtor() {
  proc_params_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TransactionWorkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionWorkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionWorkRequest_descriptor_;
}

const TransactionWorkRequest& TransactionWorkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionWorkRequest* TransactionWorkRequest::default_instance_ = NULL;

TransactionWorkRequest* TransactionWorkRequest::New(::google::protobuf::Arena* arena) const {
  TransactionWorkRequest* n = new TransactionWorkRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionWorkRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TransactionWorkRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(last_transaction_id_, transaction_id_);
  ZR_(source_partition_, procedure_id_);
  if (has_proc_params()) {
    proc_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

#undef ZR_HELPER_
#undef ZR_

  fragments_.Clear();
  params_.Clear();
  attached_dep_id_.Clear();
  attached_data_.Clear();
  done_partition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionWorkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.TransactionWorkRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_transaction_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_transaction_id_)));
          set_has_last_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_transaction_id;
        break;
      }

      // required int64 transaction_id = 2;
      case 2: {
        if (tag == 16) {
         parse_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_source_partition;
        break;
      }

      // required int32 source_partition = 3;
      case 3: {
        if (tag == 24) {
         parse_source_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_partition_)));
          set_has_source_partition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fragments;
        break;
      }

      // repeated .peloton.message.WorkFragment fragments = 4;
      case 4: {
        if (tag == 34) {
         parse_fragments:
          DO_(input->IncrementRecursionDepth());
         parse_loop_fragments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fragments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_fragments;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_procedure_id;
        break;
      }

      // required int32 procedure_id = 5;
      case 5: {
        if (tag == 40) {
         parse_procedure_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &procedure_id_)));
          set_has_procedure_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_params;
        break;
      }

      // repeated bytes params = 6;
      case 6: {
        if (tag == 50) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_params;
        if (input->ExpectTag(58)) goto parse_attached_dep_id;
        break;
      }

      // repeated int32 attached_dep_id = 7 [packed = true];
      case 7: {
        if (tag == 58) {
         parse_attached_dep_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attached_dep_id())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58, input, this->mutable_attached_dep_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_attached_data;
        break;
      }

      // repeated bytes attached_data = 8;
      case 8: {
        if (tag == 66) {
         parse_attached_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_attached_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_attached_data;
        if (input->ExpectTag(74)) goto parse_done_partition;
        break;
      }

      // repeated int32 done_partition = 9 [packed = true];
      case 9: {
        if (tag == 74) {
         parse_done_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_done_partition())));
        } else if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74, input, this->mutable_done_partition())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_proc_params;
        break;
      }

      // optional bytes proc_params = 10;
      case 10: {
        if (tag == 82) {
         parse_proc_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proc_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.TransactionWorkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.TransactionWorkRequest)
  return false;
#undef DO_
}

void TransactionWorkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.TransactionWorkRequest)
  // optional int64 last_transaction_id = 1;
  if (has_last_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_transaction_id(), output);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->transaction_id(), output);
  }

  // required int32 source_partition = 3;
  if (has_source_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->source_partition(), output);
  }

  // repeated .peloton.message.WorkFragment fragments = 4;
  for (unsigned int i = 0, n = this->fragments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fragments(i), output);
  }

  // required int32 procedure_id = 5;
  if (has_procedure_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->procedure_id(), output);
  }

  // repeated bytes params = 6;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->params(i), output);
  }

  // repeated int32 attached_dep_id = 7 [packed = true];
  if (this->attached_dep_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_attached_dep_id_cached_byte_size_);
  }
  for (int i = 0; i < this->attached_dep_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->attached_dep_id(i), output);
  }

  // repeated bytes attached_data = 8;
  for (int i = 0; i < this->attached_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->attached_data(i), output);
  }

  // repeated int32 done_partition = 9 [packed = true];
  if (this->done_partition_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_done_partition_cached_byte_size_);
  }
  for (int i = 0; i < this->done_partition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->done_partition(i), output);
  }

  // optional bytes proc_params = 10;
  if (has_proc_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->proc_params(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.TransactionWorkRequest)
}

::google::protobuf::uint8* TransactionWorkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.TransactionWorkRequest)
  // optional int64 last_transaction_id = 1;
  if (has_last_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_transaction_id(), target);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->transaction_id(), target);
  }

  // required int32 source_partition = 3;
  if (has_source_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->source_partition(), target);
  }

  // repeated .peloton.message.WorkFragment fragments = 4;
  for (unsigned int i = 0, n = this->fragments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fragments(i), target);
  }

  // required int32 procedure_id = 5;
  if (has_procedure_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->procedure_id(), target);
  }

  // repeated bytes params = 6;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(6, this->params(i), target);
  }

  // repeated int32 attached_dep_id = 7 [packed = true];
  if (this->attached_dep_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _attached_dep_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->attached_dep_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->attached_dep_id(i), target);
  }

  // repeated bytes attached_data = 8;
  for (int i = 0; i < this->attached_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(8, this->attached_data(i), target);
  }

  // repeated int32 done_partition = 9 [packed = true];
  if (this->done_partition_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _done_partition_cached_byte_size_, target);
  }
  for (int i = 0; i < this->done_partition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->done_partition(i), target);
  }

  // optional bytes proc_params = 10;
  if (has_proc_params()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->proc_params(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.TransactionWorkRequest)
  return target;
}

int TransactionWorkRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_source_partition()) {
    // required int32 source_partition = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source_partition());
  }

  if (has_procedure_id()) {
    // required int32 procedure_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->procedure_id());
  }

  return total_size;
}
int TransactionWorkRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000016) ^ 0x00000016) == 0) {  // All required fields are present.
    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required int32 source_partition = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source_partition());

    // required int32 procedure_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->procedure_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int64 last_transaction_id = 1;
  if (has_last_transaction_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_transaction_id());
  }

  // optional bytes proc_params = 10;
  if (has_proc_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->proc_params());
  }

  // repeated .peloton.message.WorkFragment fragments = 4;
  total_size += 1 * this->fragments_size();
  for (int i = 0; i < this->fragments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fragments(i));
  }

  // repeated bytes params = 6;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->params(i));
  }

  // repeated int32 attached_dep_id = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->attached_dep_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->attached_dep_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _attached_dep_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bytes attached_data = 8;
  total_size += 1 * this->attached_data_size();
  for (int i = 0; i < this->attached_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->attached_data(i));
  }

  // repeated int32 done_partition = 9 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->done_partition_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->done_partition(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _done_partition_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionWorkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionWorkRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionWorkRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionWorkRequest::MergeFrom(const TransactionWorkRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  fragments_.MergeFrom(from.fragments_);
  params_.MergeFrom(from.params_);
  attached_dep_id_.MergeFrom(from.attached_dep_id_);
  attached_data_.MergeFrom(from.attached_data_);
  done_partition_.MergeFrom(from.done_partition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_transaction_id()) {
      set_last_transaction_id(from.last_transaction_id());
    }
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_source_partition()) {
      set_source_partition(from.source_partition());
    }
    if (from.has_procedure_id()) {
      set_procedure_id(from.procedure_id());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_proc_params()) {
      set_has_proc_params();
      proc_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proc_params_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionWorkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionWorkRequest::CopyFrom(const TransactionWorkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionWorkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000016) != 0x00000016) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->fragments())) return false;
  return true;
}

void TransactionWorkRequest::Swap(TransactionWorkRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionWorkRequest::InternalSwap(TransactionWorkRequest* other) {
  std::swap(last_transaction_id_, other->last_transaction_id_);
  std::swap(transaction_id_, other->transaction_id_);
  std::swap(source_partition_, other->source_partition_);
  fragments_.UnsafeArenaSwap(&other->fragments_);
  std::swap(procedure_id_, other->procedure_id_);
  params_.UnsafeArenaSwap(&other->params_);
  attached_dep_id_.UnsafeArenaSwap(&other->attached_dep_id_);
  attached_data_.UnsafeArenaSwap(&other->attached_data_);
  done_partition_.UnsafeArenaSwap(&other->done_partition_);
  proc_params_.Swap(&other->proc_params_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionWorkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionWorkRequest_descriptor_;
  metadata.reflection = TransactionWorkRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionWorkRequest

// optional int64 last_transaction_id = 1;
bool TransactionWorkRequest::has_last_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionWorkRequest::set_has_last_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionWorkRequest::clear_has_last_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionWorkRequest::clear_last_transaction_id() {
  last_transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_last_transaction_id();
}
 ::google::protobuf::int64 TransactionWorkRequest::last_transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionWorkRequest.last_transaction_id)
  return last_transaction_id_;
}
 void TransactionWorkRequest::set_last_transaction_id(::google::protobuf::int64 value) {
  set_has_last_transaction_id();
  last_transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionWorkRequest.last_transaction_id)
}

// required int64 transaction_id = 2;
bool TransactionWorkRequest::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionWorkRequest::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionWorkRequest::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionWorkRequest::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
 ::google::protobuf::int64 TransactionWorkRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionWorkRequest.transaction_id)
  return transaction_id_;
}
 void TransactionWorkRequest::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionWorkRequest.transaction_id)
}

// required int32 source_partition = 3;
bool TransactionWorkRequest::has_source_partition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionWorkRequest::set_has_source_partition() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionWorkRequest::clear_has_source_partition() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionWorkRequest::clear_source_partition() {
  source_partition_ = 0;
  clear_has_source_partition();
}
 ::google::protobuf::int32 TransactionWorkRequest::source_partition() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionWorkRequest.source_partition)
  return source_partition_;
}
 void TransactionWorkRequest::set_source_partition(::google::protobuf::int32 value) {
  set_has_source_partition();
  source_partition_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionWorkRequest.source_partition)
}

// repeated .peloton.message.WorkFragment fragments = 4;
int TransactionWorkRequest::fragments_size() const {
  return fragments_.size();
}
void TransactionWorkRequest::clear_fragments() {
  fragments_.Clear();
}
const ::peloton::message::WorkFragment& TransactionWorkRequest::fragments(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionWorkRequest.fragments)
  return fragments_.Get(index);
}
::peloton::message::WorkFragment* TransactionWorkRequest::mutable_fragments(int index) {
  // @@protoc_insertion_point(field_mutable:peloton.message.TransactionWorkRequest.fragments)
  return fragments_.Mutable(index);
}
::peloton::message::WorkFragment* TransactionWorkRequest::add_fragments() {
  // @@protoc_insertion_point(field_add:peloton.message.TransactionWorkRequest.fragments)
  return fragments_.Add();
}
::google::protobuf::RepeatedPtrField< ::peloton::message::WorkFragment >*
TransactionWorkRequest::mutable_fragments() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.TransactionWorkRequest.fragments)
  return &fragments_;
}
const ::google::protobuf::RepeatedPtrField< ::peloton::message::WorkFragment >&
TransactionWorkRequest::fragments() const {
  // @@protoc_insertion_point(field_list:peloton.message.TransactionWorkRequest.fragments)
  return fragments_;
}

// required int32 procedure_id = 5;
bool TransactionWorkRequest::has_procedure_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TransactionWorkRequest::set_has_procedure_id() {
  _has_bits_[0] |= 0x00000010u;
}
void TransactionWorkRequest::clear_has_procedure_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void TransactionWorkRequest::clear_procedure_id() {
  procedure_id_ = 0;
  clear_has_procedure_id();
}
 ::google::protobuf::int32 TransactionWorkRequest::procedure_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionWorkRequest.procedure_id)
  return procedure_id_;
}
 void TransactionWorkRequest::set_procedure_id(::google::protobuf::int32 value) {
  set_has_procedure_id();
  procedure_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionWorkRequest.procedure_id)
}

// repeated bytes params = 6;
int TransactionWorkRequest::params_size() const {
  return params_.size();
}
void TransactionWorkRequest::clear_params() {
  params_.Clear();
}
 const ::std::string& TransactionWorkRequest::params(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionWorkRequest.params)
  return params_.Get(index);
}
 ::std::string* TransactionWorkRequest::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:peloton.message.TransactionWorkRequest.params)
  return params_.Mutable(index);
}
 void TransactionWorkRequest::set_params(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:peloton.message.TransactionWorkRequest.params)
  params_.Mutable(index)->assign(value);
}
 void TransactionWorkRequest::set_params(int index, const char* value) {
  params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:peloton.message.TransactionWorkRequest.params)
}
 void TransactionWorkRequest::set_params(int index, const void* value, size_t size) {
  params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:peloton.message.TransactionWorkRequest.params)
}
 ::std::string* TransactionWorkRequest::add_params() {
  return params_.Add();
}
 void TransactionWorkRequest::add_params(const ::std::string& value) {
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:peloton.message.TransactionWorkRequest.params)
}
 void TransactionWorkRequest::add_params(const char* value) {
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:peloton.message.TransactionWorkRequest.params)
}
 void TransactionWorkRequest::add_params(const void* value, size_t size) {
  params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:peloton.message.TransactionWorkRequest.params)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TransactionWorkRequest::params() const {
  // @@protoc_insertion_point(field_list:peloton.message.TransactionWorkRequest.params)
  return params_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TransactionWorkRequest::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.TransactionWorkRequest.params)
  return &params_;
}

// repeated int32 attached_dep_id = 7 [packed = true];
int TransactionWorkRequest::attached_dep_id_size() const {
  return attached_dep_id_.size();
}
void TransactionWorkRequest::clear_attached_dep_id() {
  attached_dep_id_.Clear();
}
 ::google::protobuf::int32 TransactionWorkRequest::attached_dep_id(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionWorkRequest.attached_dep_id)
  return attached_dep_id_.Get(index);
}
 void TransactionWorkRequest::set_attached_dep_id(int index, ::google::protobuf::int32 value) {
  attached_dep_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.TransactionWorkRequest.attached_dep_id)
}
 void TransactionWorkRequest::add_attached_dep_id(::google::protobuf::int32 value) {
  attached_dep_id_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.TransactionWorkRequest.attached_dep_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionWorkRequest::attached_dep_id() const {
  // @@protoc_insertion_point(field_list:peloton.message.TransactionWorkRequest.attached_dep_id)
  return attached_dep_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionWorkRequest::mutable_attached_dep_id() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.TransactionWorkRequest.attached_dep_id)
  return &attached_dep_id_;
}

// repeated bytes attached_data = 8;
int TransactionWorkRequest::attached_data_size() const {
  return attached_data_.size();
}
void TransactionWorkRequest::clear_attached_data() {
  attached_data_.Clear();
}
 const ::std::string& TransactionWorkRequest::attached_data(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionWorkRequest.attached_data)
  return attached_data_.Get(index);
}
 ::std::string* TransactionWorkRequest::mutable_attached_data(int index) {
  // @@protoc_insertion_point(field_mutable:peloton.message.TransactionWorkRequest.attached_data)
  return attached_data_.Mutable(index);
}
 void TransactionWorkRequest::set_attached_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:peloton.message.TransactionWorkRequest.attached_data)
  attached_data_.Mutable(index)->assign(value);
}
 void TransactionWorkRequest::set_attached_data(int index, const char* value) {
  attached_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:peloton.message.TransactionWorkRequest.attached_data)
}
 void TransactionWorkRequest::set_attached_data(int index, const void* value, size_t size) {
  attached_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:peloton.message.TransactionWorkRequest.attached_data)
}
 ::std::string* TransactionWorkRequest::add_attached_data() {
  return attached_data_.Add();
}
 void TransactionWorkRequest::add_attached_data(const ::std::string& value) {
  attached_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:peloton.message.TransactionWorkRequest.attached_data)
}
 void TransactionWorkRequest::add_attached_data(const char* value) {
  attached_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:peloton.message.TransactionWorkRequest.attached_data)
}
 void TransactionWorkRequest::add_attached_data(const void* value, size_t size) {
  attached_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:peloton.message.TransactionWorkRequest.attached_data)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TransactionWorkRequest::attached_data() const {
  // @@protoc_insertion_point(field_list:peloton.message.TransactionWorkRequest.attached_data)
  return attached_data_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TransactionWorkRequest::mutable_attached_data() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.TransactionWorkRequest.attached_data)
  return &attached_data_;
}

// repeated int32 done_partition = 9 [packed = true];
int TransactionWorkRequest::done_partition_size() const {
  return done_partition_.size();
}
void TransactionWorkRequest::clear_done_partition() {
  done_partition_.Clear();
}
 ::google::protobuf::int32 TransactionWorkRequest::done_partition(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionWorkRequest.done_partition)
  return done_partition_.Get(index);
}
 void TransactionWorkRequest::set_done_partition(int index, ::google::protobuf::int32 value) {
  done_partition_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.TransactionWorkRequest.done_partition)
}
 void TransactionWorkRequest::add_done_partition(::google::protobuf::int32 value) {
  done_partition_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.TransactionWorkRequest.done_partition)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionWorkRequest::done_partition() const {
  // @@protoc_insertion_point(field_list:peloton.message.TransactionWorkRequest.done_partition)
  return done_partition_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionWorkRequest::mutable_done_partition() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.TransactionWorkRequest.done_partition)
  return &done_partition_;
}

// optional bytes proc_params = 10;
bool TransactionWorkRequest::has_proc_params() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TransactionWorkRequest::set_has_proc_params() {
  _has_bits_[0] |= 0x00000200u;
}
void TransactionWorkRequest::clear_has_proc_params() {
  _has_bits_[0] &= ~0x00000200u;
}
void TransactionWorkRequest::clear_proc_params() {
  proc_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proc_params();
}
 const ::std::string& TransactionWorkRequest::proc_params() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionWorkRequest.proc_params)
  return proc_params_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionWorkRequest::set_proc_params(const ::std::string& value) {
  set_has_proc_params();
  proc_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.message.TransactionWorkRequest.proc_params)
}
 void TransactionWorkRequest::set_proc_params(const char* value) {
  set_has_proc_params();
  proc_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.message.TransactionWorkRequest.proc_params)
}
 void TransactionWorkRequest::set_proc_params(const void* value, size_t size) {
  set_has_proc_params();
  proc_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.message.TransactionWorkRequest.proc_params)
}
 ::std::string* TransactionWorkRequest::mutable_proc_params() {
  set_has_proc_params();
  // @@protoc_insertion_point(field_mutable:peloton.message.TransactionWorkRequest.proc_params)
  return proc_params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransactionWorkRequest::release_proc_params() {
  clear_has_proc_params();
  return proc_params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionWorkRequest::set_allocated_proc_params(::std::string* proc_params) {
  if (proc_params != NULL) {
    set_has_proc_params();
  } else {
    clear_has_proc_params();
  }
  proc_params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proc_params);
  // @@protoc_insertion_point(field_set_allocated:peloton.message.TransactionWorkRequest.proc_params)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionWorkResponse::kTransactionIdFieldNumber;
const int TransactionWorkResponse::kResultsFieldNumber;
const int TransactionWorkResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionWorkResponse::TransactionWorkResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.TransactionWorkResponse)
}

void TransactionWorkResponse::InitAsDefaultInstance() {
}

TransactionWorkResponse::TransactionWorkResponse(const TransactionWorkResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.TransactionWorkResponse)
}

void TransactionWorkResponse::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionWorkResponse::~TransactionWorkResponse() {
  // @@protoc_insertion_point(destructor:peloton.message.TransactionWorkResponse)
  SharedDtor();
}

void TransactionWorkResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionWorkResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionWorkResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionWorkResponse_descriptor_;
}

const TransactionWorkResponse& TransactionWorkResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionWorkResponse* TransactionWorkResponse::default_instance_ = NULL;

TransactionWorkResponse* TransactionWorkResponse::New(::google::protobuf::Arena* arena) const {
  TransactionWorkResponse* n = new TransactionWorkResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionWorkResponse::Clear() {
  if (_has_bits_[0 / 32] & 5u) {
    transaction_id_ = GOOGLE_LONGLONG(0);
    status_ = 0;
  }
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionWorkResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.TransactionWorkResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_results;
        break;
      }

      // repeated .peloton.message.WorkResult results = 2;
      case 2: {
        if (tag == 18) {
         parse_results:
          DO_(input->IncrementRecursionDepth());
         parse_loop_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_results;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .peloton.message.Status status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::message::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::message::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.TransactionWorkResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.TransactionWorkResponse)
  return false;
#undef DO_
}

void TransactionWorkResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.TransactionWorkResponse)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated .peloton.message.WorkResult results = 2;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(i), output);
  }

  // required .peloton.message.Status status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.TransactionWorkResponse)
}

::google::protobuf::uint8* TransactionWorkResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.TransactionWorkResponse)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated .peloton.message.WorkResult results = 2;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->results(i), target);
  }

  // required .peloton.message.Status status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.TransactionWorkResponse)
  return target;
}

int TransactionWorkResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_status()) {
    // required .peloton.message.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
int TransactionWorkResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required .peloton.message.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .peloton.message.WorkResult results = 2;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionWorkResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionWorkResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionWorkResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionWorkResponse::MergeFrom(const TransactionWorkResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  results_.MergeFrom(from.results_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionWorkResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionWorkResponse::CopyFrom(const TransactionWorkResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionWorkResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->results())) return false;
  return true;
}

void TransactionWorkResponse::Swap(TransactionWorkResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionWorkResponse::InternalSwap(TransactionWorkResponse* other) {
  std::swap(transaction_id_, other->transaction_id_);
  results_.UnsafeArenaSwap(&other->results_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionWorkResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionWorkResponse_descriptor_;
  metadata.reflection = TransactionWorkResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionWorkResponse

// required int64 transaction_id = 1;
bool TransactionWorkResponse::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionWorkResponse::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionWorkResponse::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionWorkResponse::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
 ::google::protobuf::int64 TransactionWorkResponse::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionWorkResponse.transaction_id)
  return transaction_id_;
}
 void TransactionWorkResponse::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionWorkResponse.transaction_id)
}

// repeated .peloton.message.WorkResult results = 2;
int TransactionWorkResponse::results_size() const {
  return results_.size();
}
void TransactionWorkResponse::clear_results() {
  results_.Clear();
}
const ::peloton::message::WorkResult& TransactionWorkResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionWorkResponse.results)
  return results_.Get(index);
}
::peloton::message::WorkResult* TransactionWorkResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:peloton.message.TransactionWorkResponse.results)
  return results_.Mutable(index);
}
::peloton::message::WorkResult* TransactionWorkResponse::add_results() {
  // @@protoc_insertion_point(field_add:peloton.message.TransactionWorkResponse.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::peloton::message::WorkResult >*
TransactionWorkResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.TransactionWorkResponse.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::peloton::message::WorkResult >&
TransactionWorkResponse::results() const {
  // @@protoc_insertion_point(field_list:peloton.message.TransactionWorkResponse.results)
  return results_;
}

// required .peloton.message.Status status = 3;
bool TransactionWorkResponse::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionWorkResponse::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionWorkResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionWorkResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::peloton::message::Status TransactionWorkResponse::status() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionWorkResponse.status)
  return static_cast< ::peloton::message::Status >(status_);
}
 void TransactionWorkResponse::set_status(::peloton::message::Status value) {
  assert(::peloton::message::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionWorkResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionPrefetchResult::kLastTransactionIdFieldNumber;
const int TransactionPrefetchResult::kTransactionIdFieldNumber;
const int TransactionPrefetchResult::kSourcePartitionFieldNumber;
const int TransactionPrefetchResult::kResultFieldNumber;
const int TransactionPrefetchResult::kStatusFieldNumber;
const int TransactionPrefetchResult::kStmtCounterFieldNumber;
const int TransactionPrefetchResult::kFragmentIdFieldNumber;
const int TransactionPrefetchResult::kParamHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionPrefetchResult::TransactionPrefetchResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.TransactionPrefetchResult)
}

void TransactionPrefetchResult::InitAsDefaultInstance() {
  result_ = const_cast< ::peloton::message::WorkResult*>(&::peloton::message::WorkResult::default_instance());
}

TransactionPrefetchResult::TransactionPrefetchResult(const TransactionPrefetchResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.TransactionPrefetchResult)
}

void TransactionPrefetchResult::SharedCtor() {
  _cached_size_ = 0;
  last_transaction_id_ = GOOGLE_LONGLONG(0);
  transaction_id_ = GOOGLE_LONGLONG(0);
  source_partition_ = 0;
  result_ = NULL;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionPrefetchResult::~TransactionPrefetchResult() {
  // @@protoc_insertion_point(destructor:peloton.message.TransactionPrefetchResult)
  SharedDtor();
}

void TransactionPrefetchResult::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void TransactionPrefetchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionPrefetchResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionPrefetchResult_descriptor_;
}

const TransactionPrefetchResult& TransactionPrefetchResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionPrefetchResult* TransactionPrefetchResult::default_instance_ = NULL;

TransactionPrefetchResult* TransactionPrefetchResult::New(::google::protobuf::Arena* arena) const {
  TransactionPrefetchResult* n = new TransactionPrefetchResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionPrefetchResult::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TransactionPrefetchResult*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(last_transaction_id_, transaction_id_);
    ZR_(source_partition_, status_);
    if (has_result()) {
      if (result_ != NULL) result_->::peloton::message::WorkResult::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  stmt_counter_.Clear();
  fragment_id_.Clear();
  param_hash_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionPrefetchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.TransactionPrefetchResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_transaction_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_transaction_id_)));
          set_has_last_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_transaction_id;
        break;
      }

      // required int64 transaction_id = 2;
      case 2: {
        if (tag == 16) {
         parse_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_source_partition;
        break;
      }

      // required int32 source_partition = 3;
      case 3: {
        if (tag == 24) {
         parse_source_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_partition_)));
          set_has_source_partition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_result;
        break;
      }

      // required .peloton.message.WorkResult result = 4;
      case 4: {
        if (tag == 34) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required .peloton.message.Status status = 5;
      case 5: {
        if (tag == 40) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::message::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::message::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_stmt_counter;
        break;
      }

      // repeated int32 stmt_counter = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_stmt_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stmt_counter())));
        } else if (tag == 48) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50, input, this->mutable_stmt_counter())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_fragment_id;
        break;
      }

      // repeated int32 fragment_id = 7 [packed = true];
      case 7: {
        if (tag == 58) {
         parse_fragment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fragment_id())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58, input, this->mutable_fragment_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_param_hash;
        break;
      }

      // repeated int32 param_hash = 8 [packed = true];
      case 8: {
        if (tag == 66) {
         parse_param_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_param_hash())));
        } else if (tag == 64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 66, input, this->mutable_param_hash())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.TransactionPrefetchResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.TransactionPrefetchResult)
  return false;
#undef DO_
}

void TransactionPrefetchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.TransactionPrefetchResult)
  // optional int64 last_transaction_id = 1;
  if (has_last_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_transaction_id(), output);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->transaction_id(), output);
  }

  // required int32 source_partition = 3;
  if (has_source_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->source_partition(), output);
  }

  // required .peloton.message.WorkResult result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->result_, output);
  }

  // required .peloton.message.Status status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // repeated int32 stmt_counter = 6 [packed = true];
  if (this->stmt_counter_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_stmt_counter_cached_byte_size_);
  }
  for (int i = 0; i < this->stmt_counter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->stmt_counter(i), output);
  }

  // repeated int32 fragment_id = 7 [packed = true];
  if (this->fragment_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_fragment_id_cached_byte_size_);
  }
  for (int i = 0; i < this->fragment_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->fragment_id(i), output);
  }

  // repeated int32 param_hash = 8 [packed = true];
  if (this->param_hash_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_param_hash_cached_byte_size_);
  }
  for (int i = 0; i < this->param_hash_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->param_hash(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.TransactionPrefetchResult)
}

::google::protobuf::uint8* TransactionPrefetchResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.TransactionPrefetchResult)
  // optional int64 last_transaction_id = 1;
  if (has_last_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_transaction_id(), target);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->transaction_id(), target);
  }

  // required int32 source_partition = 3;
  if (has_source_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->source_partition(), target);
  }

  // required .peloton.message.WorkResult result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->result_, target);
  }

  // required .peloton.message.Status status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // repeated int32 stmt_counter = 6 [packed = true];
  if (this->stmt_counter_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _stmt_counter_cached_byte_size_, target);
  }
  for (int i = 0; i < this->stmt_counter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->stmt_counter(i), target);
  }

  // repeated int32 fragment_id = 7 [packed = true];
  if (this->fragment_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _fragment_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->fragment_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->fragment_id(i), target);
  }

  // repeated int32 param_hash = 8 [packed = true];
  if (this->param_hash_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _param_hash_cached_byte_size_, target);
  }
  for (int i = 0; i < this->param_hash_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->param_hash(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.TransactionPrefetchResult)
  return target;
}

int TransactionPrefetchResult::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_source_partition()) {
    // required int32 source_partition = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source_partition());
  }

  if (has_result()) {
    // required .peloton.message.WorkResult result = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->result_);
  }

  if (has_status()) {
    // required .peloton.message.Status status = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
int TransactionPrefetchResult::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required int32 source_partition = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source_partition());

    // required .peloton.message.WorkResult result = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->result_);

    // required .peloton.message.Status status = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int64 last_transaction_id = 1;
  if (has_last_transaction_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_transaction_id());
  }

  // repeated int32 stmt_counter = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->stmt_counter_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stmt_counter(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stmt_counter_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 fragment_id = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->fragment_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fragment_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fragment_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 param_hash = 8 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->param_hash_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->param_hash(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _param_hash_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionPrefetchResult::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionPrefetchResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionPrefetchResult>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionPrefetchResult::MergeFrom(const TransactionPrefetchResult& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  stmt_counter_.MergeFrom(from.stmt_counter_);
  fragment_id_.MergeFrom(from.fragment_id_);
  param_hash_.MergeFrom(from.param_hash_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_transaction_id()) {
      set_last_transaction_id(from.last_transaction_id());
    }
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_source_partition()) {
      set_source_partition(from.source_partition());
    }
    if (from.has_result()) {
      mutable_result()->::peloton::message::WorkResult::MergeFrom(from.result());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionPrefetchResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionPrefetchResult::CopyFrom(const TransactionPrefetchResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionPrefetchResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  if (has_result()) {
    if (!this->result_->IsInitialized()) return false;
  }
  return true;
}

void TransactionPrefetchResult::Swap(TransactionPrefetchResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionPrefetchResult::InternalSwap(TransactionPrefetchResult* other) {
  std::swap(last_transaction_id_, other->last_transaction_id_);
  std::swap(transaction_id_, other->transaction_id_);
  std::swap(source_partition_, other->source_partition_);
  std::swap(result_, other->result_);
  std::swap(status_, other->status_);
  stmt_counter_.UnsafeArenaSwap(&other->stmt_counter_);
  fragment_id_.UnsafeArenaSwap(&other->fragment_id_);
  param_hash_.UnsafeArenaSwap(&other->param_hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionPrefetchResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionPrefetchResult_descriptor_;
  metadata.reflection = TransactionPrefetchResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionPrefetchResult

// optional int64 last_transaction_id = 1;
bool TransactionPrefetchResult::has_last_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionPrefetchResult::set_has_last_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionPrefetchResult::clear_has_last_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionPrefetchResult::clear_last_transaction_id() {
  last_transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_last_transaction_id();
}
 ::google::protobuf::int64 TransactionPrefetchResult::last_transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionPrefetchResult.last_transaction_id)
  return last_transaction_id_;
}
 void TransactionPrefetchResult::set_last_transaction_id(::google::protobuf::int64 value) {
  set_has_last_transaction_id();
  last_transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionPrefetchResult.last_transaction_id)
}

// required int64 transaction_id = 2;
bool TransactionPrefetchResult::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionPrefetchResult::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionPrefetchResult::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionPrefetchResult::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
 ::google::protobuf::int64 TransactionPrefetchResult::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionPrefetchResult.transaction_id)
  return transaction_id_;
}
 void TransactionPrefetchResult::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionPrefetchResult.transaction_id)
}

// required int32 source_partition = 3;
bool TransactionPrefetchResult::has_source_partition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionPrefetchResult::set_has_source_partition() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionPrefetchResult::clear_has_source_partition() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionPrefetchResult::clear_source_partition() {
  source_partition_ = 0;
  clear_has_source_partition();
}
 ::google::protobuf::int32 TransactionPrefetchResult::source_partition() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionPrefetchResult.source_partition)
  return source_partition_;
}
 void TransactionPrefetchResult::set_source_partition(::google::protobuf::int32 value) {
  set_has_source_partition();
  source_partition_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionPrefetchResult.source_partition)
}

// required .peloton.message.WorkResult result = 4;
bool TransactionPrefetchResult::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransactionPrefetchResult::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
void TransactionPrefetchResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransactionPrefetchResult::clear_result() {
  if (result_ != NULL) result_->::peloton::message::WorkResult::Clear();
  clear_has_result();
}
const ::peloton::message::WorkResult& TransactionPrefetchResult::result() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionPrefetchResult.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
::peloton::message::WorkResult* TransactionPrefetchResult::mutable_result() {
  set_has_result();
  if (result_ == NULL) {
    result_ = new ::peloton::message::WorkResult;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.TransactionPrefetchResult.result)
  return result_;
}
::peloton::message::WorkResult* TransactionPrefetchResult::release_result() {
  clear_has_result();
  ::peloton::message::WorkResult* temp = result_;
  result_ = NULL;
  return temp;
}
void TransactionPrefetchResult::set_allocated_result(::peloton::message::WorkResult* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.TransactionPrefetchResult.result)
}

// required .peloton.message.Status status = 5;
bool TransactionPrefetchResult::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TransactionPrefetchResult::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
void TransactionPrefetchResult::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void TransactionPrefetchResult::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::peloton::message::Status TransactionPrefetchResult::status() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionPrefetchResult.status)
  return static_cast< ::peloton::message::Status >(status_);
}
 void TransactionPrefetchResult::set_status(::peloton::message::Status value) {
  assert(::peloton::message::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionPrefetchResult.status)
}

// repeated int32 stmt_counter = 6 [packed = true];
int TransactionPrefetchResult::stmt_counter_size() const {
  return stmt_counter_.size();
}
void TransactionPrefetchResult::clear_stmt_counter() {
  stmt_counter_.Clear();
}
 ::google::protobuf::int32 TransactionPrefetchResult::stmt_counter(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionPrefetchResult.stmt_counter)
  return stmt_counter_.Get(index);
}
 void TransactionPrefetchResult::set_stmt_counter(int index, ::google::protobuf::int32 value) {
  stmt_counter_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.TransactionPrefetchResult.stmt_counter)
}
 void TransactionPrefetchResult::add_stmt_counter(::google::protobuf::int32 value) {
  stmt_counter_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.TransactionPrefetchResult.stmt_counter)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionPrefetchResult::stmt_counter() const {
  // @@protoc_insertion_point(field_list:peloton.message.TransactionPrefetchResult.stmt_counter)
  return stmt_counter_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionPrefetchResult::mutable_stmt_counter() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.TransactionPrefetchResult.stmt_counter)
  return &stmt_counter_;
}

// repeated int32 fragment_id = 7 [packed = true];
int TransactionPrefetchResult::fragment_id_size() const {
  return fragment_id_.size();
}
void TransactionPrefetchResult::clear_fragment_id() {
  fragment_id_.Clear();
}
 ::google::protobuf::int32 TransactionPrefetchResult::fragment_id(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionPrefetchResult.fragment_id)
  return fragment_id_.Get(index);
}
 void TransactionPrefetchResult::set_fragment_id(int index, ::google::protobuf::int32 value) {
  fragment_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.TransactionPrefetchResult.fragment_id)
}
 void TransactionPrefetchResult::add_fragment_id(::google::protobuf::int32 value) {
  fragment_id_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.TransactionPrefetchResult.fragment_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionPrefetchResult::fragment_id() const {
  // @@protoc_insertion_point(field_list:peloton.message.TransactionPrefetchResult.fragment_id)
  return fragment_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionPrefetchResult::mutable_fragment_id() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.TransactionPrefetchResult.fragment_id)
  return &fragment_id_;
}

// repeated int32 param_hash = 8 [packed = true];
int TransactionPrefetchResult::param_hash_size() const {
  return param_hash_.size();
}
void TransactionPrefetchResult::clear_param_hash() {
  param_hash_.Clear();
}
 ::google::protobuf::int32 TransactionPrefetchResult::param_hash(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionPrefetchResult.param_hash)
  return param_hash_.Get(index);
}
 void TransactionPrefetchResult::set_param_hash(int index, ::google::protobuf::int32 value) {
  param_hash_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.TransactionPrefetchResult.param_hash)
}
 void TransactionPrefetchResult::add_param_hash(::google::protobuf::int32 value) {
  param_hash_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.TransactionPrefetchResult.param_hash)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionPrefetchResult::param_hash() const {
  // @@protoc_insertion_point(field_list:peloton.message.TransactionPrefetchResult.param_hash)
  return param_hash_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionPrefetchResult::mutable_param_hash() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.TransactionPrefetchResult.param_hash)
  return &param_hash_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionPrefetchAcknowledgement::kTransactionIdFieldNumber;
const int TransactionPrefetchAcknowledgement::kTargetPartitionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionPrefetchAcknowledgement::TransactionPrefetchAcknowledgement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.TransactionPrefetchAcknowledgement)
}

void TransactionPrefetchAcknowledgement::InitAsDefaultInstance() {
}

TransactionPrefetchAcknowledgement::TransactionPrefetchAcknowledgement(const TransactionPrefetchAcknowledgement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.TransactionPrefetchAcknowledgement)
}

void TransactionPrefetchAcknowledgement::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  target_partition_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionPrefetchAcknowledgement::~TransactionPrefetchAcknowledgement() {
  // @@protoc_insertion_point(destructor:peloton.message.TransactionPrefetchAcknowledgement)
  SharedDtor();
}

void TransactionPrefetchAcknowledgement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionPrefetchAcknowledgement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionPrefetchAcknowledgement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionPrefetchAcknowledgement_descriptor_;
}

const TransactionPrefetchAcknowledgement& TransactionPrefetchAcknowledgement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionPrefetchAcknowledgement* TransactionPrefetchAcknowledgement::default_instance_ = NULL;

TransactionPrefetchAcknowledgement* TransactionPrefetchAcknowledgement::New(::google::protobuf::Arena* arena) const {
  TransactionPrefetchAcknowledgement* n = new TransactionPrefetchAcknowledgement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionPrefetchAcknowledgement::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TransactionPrefetchAcknowledgement*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(transaction_id_, target_partition_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionPrefetchAcknowledgement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.TransactionPrefetchAcknowledgement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_partition;
        break;
      }

      // required int32 target_partition = 2;
      case 2: {
        if (tag == 16) {
         parse_target_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_partition_)));
          set_has_target_partition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.TransactionPrefetchAcknowledgement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.TransactionPrefetchAcknowledgement)
  return false;
#undef DO_
}

void TransactionPrefetchAcknowledgement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.TransactionPrefetchAcknowledgement)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // required int32 target_partition = 2;
  if (has_target_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->target_partition(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.TransactionPrefetchAcknowledgement)
}

::google::protobuf::uint8* TransactionPrefetchAcknowledgement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.TransactionPrefetchAcknowledgement)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // required int32 target_partition = 2;
  if (has_target_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->target_partition(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.TransactionPrefetchAcknowledgement)
  return target;
}

int TransactionPrefetchAcknowledgement::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_target_partition()) {
    // required int32 target_partition = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target_partition());
  }

  return total_size;
}
int TransactionPrefetchAcknowledgement::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required int32 target_partition = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target_partition());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionPrefetchAcknowledgement::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionPrefetchAcknowledgement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionPrefetchAcknowledgement>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionPrefetchAcknowledgement::MergeFrom(const TransactionPrefetchAcknowledgement& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_target_partition()) {
      set_target_partition(from.target_partition());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionPrefetchAcknowledgement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionPrefetchAcknowledgement::CopyFrom(const TransactionPrefetchAcknowledgement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionPrefetchAcknowledgement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TransactionPrefetchAcknowledgement::Swap(TransactionPrefetchAcknowledgement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionPrefetchAcknowledgement::InternalSwap(TransactionPrefetchAcknowledgement* other) {
  std::swap(transaction_id_, other->transaction_id_);
  std::swap(target_partition_, other->target_partition_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionPrefetchAcknowledgement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionPrefetchAcknowledgement_descriptor_;
  metadata.reflection = TransactionPrefetchAcknowledgement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionPrefetchAcknowledgement

// required int64 transaction_id = 1;
bool TransactionPrefetchAcknowledgement::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionPrefetchAcknowledgement::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionPrefetchAcknowledgement::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionPrefetchAcknowledgement::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
 ::google::protobuf::int64 TransactionPrefetchAcknowledgement::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionPrefetchAcknowledgement.transaction_id)
  return transaction_id_;
}
 void TransactionPrefetchAcknowledgement::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionPrefetchAcknowledgement.transaction_id)
}

// required int32 target_partition = 2;
bool TransactionPrefetchAcknowledgement::has_target_partition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionPrefetchAcknowledgement::set_has_target_partition() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionPrefetchAcknowledgement::clear_has_target_partition() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionPrefetchAcknowledgement::clear_target_partition() {
  target_partition_ = 0;
  clear_has_target_partition();
}
 ::google::protobuf::int32 TransactionPrefetchAcknowledgement::target_partition() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionPrefetchAcknowledgement.target_partition)
  return target_partition_;
}
 void TransactionPrefetchAcknowledgement::set_target_partition(::google::protobuf::int32 value) {
  set_has_target_partition();
  target_partition_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionPrefetchAcknowledgement.target_partition)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionMapRequest::kLastTransactionIdFieldNumber;
const int TransactionMapRequest::kTransactionIdFieldNumber;
const int TransactionMapRequest::kClientHandleFieldNumber;
const int TransactionMapRequest::kBasePartitionFieldNumber;
const int TransactionMapRequest::kProcedureIdFieldNumber;
const int TransactionMapRequest::kParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionMapRequest::TransactionMapRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.TransactionMapRequest)
}

void TransactionMapRequest::InitAsDefaultInstance() {
}

TransactionMapRequest::TransactionMapRequest(const TransactionMapRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.TransactionMapRequest)
}

void TransactionMapRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  last_transaction_id_ = GOOGLE_LONGLONG(0);
  transaction_id_ = GOOGLE_LONGLONG(0);
  client_handle_ = GOOGLE_LONGLONG(0);
  base_partition_ = 0;
  procedure_id_ = 0;
  params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionMapRequest::~TransactionMapRequest() {
  // @@protoc_insertion_point(destructor:peloton.message.TransactionMapRequest)
  SharedDtor();
}

void TransactionMapRequest::SharedDtor() {
  params_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TransactionMapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionMapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionMapRequest_descriptor_;
}

const TransactionMapRequest& TransactionMapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionMapRequest* TransactionMapRequest::default_instance_ = NULL;

TransactionMapRequest* TransactionMapRequest::New(::google::protobuf::Arena* arena) const {
  TransactionMapRequest* n = new TransactionMapRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionMapRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TransactionMapRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(last_transaction_id_, procedure_id_);
    if (has_params()) {
      params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionMapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.TransactionMapRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_transaction_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_transaction_id_)));
          set_has_last_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_transaction_id;
        break;
      }

      // required int64 transaction_id = 2;
      case 2: {
        if (tag == 16) {
         parse_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_client_handle;
        break;
      }

      // required int64 client_handle = 3;
      case 3: {
        if (tag == 24) {
         parse_client_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_handle_)));
          set_has_client_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_base_partition;
        break;
      }

      // required int32 base_partition = 4;
      case 4: {
        if (tag == 32) {
         parse_base_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_partition_)));
          set_has_base_partition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_procedure_id;
        break;
      }

      // required int32 procedure_id = 5;
      case 5: {
        if (tag == 40) {
         parse_procedure_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &procedure_id_)));
          set_has_procedure_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_params;
        break;
      }

      // required bytes params = 6;
      case 6: {
        if (tag == 50) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.TransactionMapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.TransactionMapRequest)
  return false;
#undef DO_
}

void TransactionMapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.TransactionMapRequest)
  // optional int64 last_transaction_id = 1;
  if (has_last_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_transaction_id(), output);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->transaction_id(), output);
  }

  // required int64 client_handle = 3;
  if (has_client_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->client_handle(), output);
  }

  // required int32 base_partition = 4;
  if (has_base_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->base_partition(), output);
  }

  // required int32 procedure_id = 5;
  if (has_procedure_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->procedure_id(), output);
  }

  // required bytes params = 6;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->params(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.TransactionMapRequest)
}

::google::protobuf::uint8* TransactionMapRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.TransactionMapRequest)
  // optional int64 last_transaction_id = 1;
  if (has_last_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_transaction_id(), target);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->transaction_id(), target);
  }

  // required int64 client_handle = 3;
  if (has_client_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->client_handle(), target);
  }

  // required int32 base_partition = 4;
  if (has_base_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->base_partition(), target);
  }

  // required int32 procedure_id = 5;
  if (has_procedure_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->procedure_id(), target);
  }

  // required bytes params = 6;
  if (has_params()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->params(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.TransactionMapRequest)
  return target;
}

int TransactionMapRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_client_handle()) {
    // required int64 client_handle = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->client_handle());
  }

  if (has_base_partition()) {
    // required int32 base_partition = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->base_partition());
  }

  if (has_procedure_id()) {
    // required int32 procedure_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->procedure_id());
  }

  if (has_params()) {
    // required bytes params = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->params());
  }

  return total_size;
}
int TransactionMapRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003e) ^ 0x0000003e) == 0) {  // All required fields are present.
    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required int64 client_handle = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->client_handle());

    // required int32 base_partition = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->base_partition());

    // required int32 procedure_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->procedure_id());

    // required bytes params = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->params());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int64 last_transaction_id = 1;
  if (has_last_transaction_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_transaction_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionMapRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionMapRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionMapRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionMapRequest::MergeFrom(const TransactionMapRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_transaction_id()) {
      set_last_transaction_id(from.last_transaction_id());
    }
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_client_handle()) {
      set_client_handle(from.client_handle());
    }
    if (from.has_base_partition()) {
      set_base_partition(from.base_partition());
    }
    if (from.has_procedure_id()) {
      set_procedure_id(from.procedure_id());
    }
    if (from.has_params()) {
      set_has_params();
      params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.params_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionMapRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionMapRequest::CopyFrom(const TransactionMapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionMapRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;

  return true;
}

void TransactionMapRequest::Swap(TransactionMapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionMapRequest::InternalSwap(TransactionMapRequest* other) {
  std::swap(last_transaction_id_, other->last_transaction_id_);
  std::swap(transaction_id_, other->transaction_id_);
  std::swap(client_handle_, other->client_handle_);
  std::swap(base_partition_, other->base_partition_);
  std::swap(procedure_id_, other->procedure_id_);
  params_.Swap(&other->params_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionMapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionMapRequest_descriptor_;
  metadata.reflection = TransactionMapRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionMapRequest

// optional int64 last_transaction_id = 1;
bool TransactionMapRequest::has_last_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionMapRequest::set_has_last_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionMapRequest::clear_has_last_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionMapRequest::clear_last_transaction_id() {
  last_transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_last_transaction_id();
}
 ::google::protobuf::int64 TransactionMapRequest::last_transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionMapRequest.last_transaction_id)
  return last_transaction_id_;
}
 void TransactionMapRequest::set_last_transaction_id(::google::protobuf::int64 value) {
  set_has_last_transaction_id();
  last_transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionMapRequest.last_transaction_id)
}

// required int64 transaction_id = 2;
bool TransactionMapRequest::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionMapRequest::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionMapRequest::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionMapRequest::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
 ::google::protobuf::int64 TransactionMapRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionMapRequest.transaction_id)
  return transaction_id_;
}
 void TransactionMapRequest::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionMapRequest.transaction_id)
}

// required int64 client_handle = 3;
bool TransactionMapRequest::has_client_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionMapRequest::set_has_client_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionMapRequest::clear_has_client_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionMapRequest::clear_client_handle() {
  client_handle_ = GOOGLE_LONGLONG(0);
  clear_has_client_handle();
}
 ::google::protobuf::int64 TransactionMapRequest::client_handle() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionMapRequest.client_handle)
  return client_handle_;
}
 void TransactionMapRequest::set_client_handle(::google::protobuf::int64 value) {
  set_has_client_handle();
  client_handle_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionMapRequest.client_handle)
}

// required int32 base_partition = 4;
bool TransactionMapRequest::has_base_partition() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransactionMapRequest::set_has_base_partition() {
  _has_bits_[0] |= 0x00000008u;
}
void TransactionMapRequest::clear_has_base_partition() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransactionMapRequest::clear_base_partition() {
  base_partition_ = 0;
  clear_has_base_partition();
}
 ::google::protobuf::int32 TransactionMapRequest::base_partition() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionMapRequest.base_partition)
  return base_partition_;
}
 void TransactionMapRequest::set_base_partition(::google::protobuf::int32 value) {
  set_has_base_partition();
  base_partition_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionMapRequest.base_partition)
}

// required int32 procedure_id = 5;
bool TransactionMapRequest::has_procedure_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TransactionMapRequest::set_has_procedure_id() {
  _has_bits_[0] |= 0x00000010u;
}
void TransactionMapRequest::clear_has_procedure_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void TransactionMapRequest::clear_procedure_id() {
  procedure_id_ = 0;
  clear_has_procedure_id();
}
 ::google::protobuf::int32 TransactionMapRequest::procedure_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionMapRequest.procedure_id)
  return procedure_id_;
}
 void TransactionMapRequest::set_procedure_id(::google::protobuf::int32 value) {
  set_has_procedure_id();
  procedure_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionMapRequest.procedure_id)
}

// required bytes params = 6;
bool TransactionMapRequest::has_params() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TransactionMapRequest::set_has_params() {
  _has_bits_[0] |= 0x00000020u;
}
void TransactionMapRequest::clear_has_params() {
  _has_bits_[0] &= ~0x00000020u;
}
void TransactionMapRequest::clear_params() {
  params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_params();
}
 const ::std::string& TransactionMapRequest::params() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionMapRequest.params)
  return params_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionMapRequest::set_params(const ::std::string& value) {
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.message.TransactionMapRequest.params)
}
 void TransactionMapRequest::set_params(const char* value) {
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.message.TransactionMapRequest.params)
}
 void TransactionMapRequest::set_params(const void* value, size_t size) {
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.message.TransactionMapRequest.params)
}
 ::std::string* TransactionMapRequest::mutable_params() {
  set_has_params();
  // @@protoc_insertion_point(field_mutable:peloton.message.TransactionMapRequest.params)
  return params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransactionMapRequest::release_params() {
  clear_has_params();
  return params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionMapRequest::set_allocated_params(::std::string* params) {
  if (params != NULL) {
    set_has_params();
  } else {
    clear_has_params();
  }
  params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), params);
  // @@protoc_insertion_point(field_set_allocated:peloton.message.TransactionMapRequest.params)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionMapResponse::kTransactionIdFieldNumber;
const int TransactionMapResponse::kPartitionsFieldNumber;
const int TransactionMapResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionMapResponse::TransactionMapResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.TransactionMapResponse)
}

void TransactionMapResponse::InitAsDefaultInstance() {
}

TransactionMapResponse::TransactionMapResponse(const TransactionMapResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.TransactionMapResponse)
}

void TransactionMapResponse::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionMapResponse::~TransactionMapResponse() {
  // @@protoc_insertion_point(destructor:peloton.message.TransactionMapResponse)
  SharedDtor();
}

void TransactionMapResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionMapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionMapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionMapResponse_descriptor_;
}

const TransactionMapResponse& TransactionMapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionMapResponse* TransactionMapResponse::default_instance_ = NULL;

TransactionMapResponse* TransactionMapResponse::New(::google::protobuf::Arena* arena) const {
  TransactionMapResponse* n = new TransactionMapResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionMapResponse::Clear() {
  if (_has_bits_[0 / 32] & 5u) {
    transaction_id_ = GOOGLE_LONGLONG(0);
    status_ = 0;
  }
  partitions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionMapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.TransactionMapResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_partitions;
        break;
      }

      // repeated int32 partitions = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_partitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_partitions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .peloton.message.Status status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::message::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::message::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.TransactionMapResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.TransactionMapResponse)
  return false;
#undef DO_
}

void TransactionMapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.TransactionMapResponse)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_partitions_cached_byte_size_);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  // required .peloton.message.Status status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.TransactionMapResponse)
}

::google::protobuf::uint8* TransactionMapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.TransactionMapResponse)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _partitions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions(i), target);
  }

  // required .peloton.message.Status status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.TransactionMapResponse)
  return target;
}

int TransactionMapResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_status()) {
    // required .peloton.message.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
int TransactionMapResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required .peloton.message.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 partitions = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->partitions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->partitions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionMapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionMapResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionMapResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionMapResponse::MergeFrom(const TransactionMapResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  partitions_.MergeFrom(from.partitions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionMapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionMapResponse::CopyFrom(const TransactionMapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionMapResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void TransactionMapResponse::Swap(TransactionMapResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionMapResponse::InternalSwap(TransactionMapResponse* other) {
  std::swap(transaction_id_, other->transaction_id_);
  partitions_.UnsafeArenaSwap(&other->partitions_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionMapResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionMapResponse_descriptor_;
  metadata.reflection = TransactionMapResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionMapResponse

// required int64 transaction_id = 1;
bool TransactionMapResponse::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionMapResponse::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionMapResponse::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionMapResponse::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
 ::google::protobuf::int64 TransactionMapResponse::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionMapResponse.transaction_id)
  return transaction_id_;
}
 void TransactionMapResponse::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionMapResponse.transaction_id)
}

// repeated int32 partitions = 2 [packed = true];
int TransactionMapResponse::partitions_size() const {
  return partitions_.size();
}
void TransactionMapResponse::clear_partitions() {
  partitions_.Clear();
}
 ::google::protobuf::int32 TransactionMapResponse::partitions(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionMapResponse.partitions)
  return partitions_.Get(index);
}
 void TransactionMapResponse::set_partitions(int index, ::google::protobuf::int32 value) {
  partitions_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.TransactionMapResponse.partitions)
}
 void TransactionMapResponse::add_partitions(::google::protobuf::int32 value) {
  partitions_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.TransactionMapResponse.partitions)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionMapResponse::partitions() const {
  // @@protoc_insertion_point(field_list:peloton.message.TransactionMapResponse.partitions)
  return partitions_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionMapResponse::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.TransactionMapResponse.partitions)
  return &partitions_;
}

// required .peloton.message.Status status = 3;
bool TransactionMapResponse::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionMapResponse::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionMapResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionMapResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::peloton::message::Status TransactionMapResponse::status() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionMapResponse.status)
  return static_cast< ::peloton::message::Status >(status_);
}
 void TransactionMapResponse::set_status(::peloton::message::Status value) {
  assert(::peloton::message::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionMapResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionReduceRequest::kTransactionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionReduceRequest::TransactionReduceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.TransactionReduceRequest)
}

void TransactionReduceRequest::InitAsDefaultInstance() {
}

TransactionReduceRequest::TransactionReduceRequest(const TransactionReduceRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.TransactionReduceRequest)
}

void TransactionReduceRequest::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionReduceRequest::~TransactionReduceRequest() {
  // @@protoc_insertion_point(destructor:peloton.message.TransactionReduceRequest)
  SharedDtor();
}

void TransactionReduceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionReduceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionReduceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionReduceRequest_descriptor_;
}

const TransactionReduceRequest& TransactionReduceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionReduceRequest* TransactionReduceRequest::default_instance_ = NULL;

TransactionReduceRequest* TransactionReduceRequest::New(::google::protobuf::Arena* arena) const {
  TransactionReduceRequest* n = new TransactionReduceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionReduceRequest::Clear() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionReduceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.TransactionReduceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.TransactionReduceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.TransactionReduceRequest)
  return false;
#undef DO_
}

void TransactionReduceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.TransactionReduceRequest)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.TransactionReduceRequest)
}

::google::protobuf::uint8* TransactionReduceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.TransactionReduceRequest)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.TransactionReduceRequest)
  return target;
}

int TransactionReduceRequest::ByteSize() const {
  int total_size = 0;

  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionReduceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionReduceRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionReduceRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionReduceRequest::MergeFrom(const TransactionReduceRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionReduceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionReduceRequest::CopyFrom(const TransactionReduceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionReduceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TransactionReduceRequest::Swap(TransactionReduceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionReduceRequest::InternalSwap(TransactionReduceRequest* other) {
  std::swap(transaction_id_, other->transaction_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionReduceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionReduceRequest_descriptor_;
  metadata.reflection = TransactionReduceRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionReduceRequest

// required int64 transaction_id = 1;
bool TransactionReduceRequest::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionReduceRequest::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionReduceRequest::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionReduceRequest::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
 ::google::protobuf::int64 TransactionReduceRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionReduceRequest.transaction_id)
  return transaction_id_;
}
 void TransactionReduceRequest::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionReduceRequest.transaction_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionReduceResponse_ReduceResult::kPartitionIdFieldNumber;
const int TransactionReduceResponse_ReduceResult::kDataFieldNumber;
const int TransactionReduceResponse_ReduceResult::kStatusFieldNumber;
const int TransactionReduceResponse_ReduceResult::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionReduceResponse_ReduceResult::TransactionReduceResponse_ReduceResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.TransactionReduceResponse.ReduceResult)
}

void TransactionReduceResponse_ReduceResult::InitAsDefaultInstance() {
}

TransactionReduceResponse_ReduceResult::TransactionReduceResponse_ReduceResult(const TransactionReduceResponse_ReduceResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.TransactionReduceResponse.ReduceResult)
}

void TransactionReduceResponse_ReduceResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  partition_id_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  error_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionReduceResponse_ReduceResult::~TransactionReduceResponse_ReduceResult() {
  // @@protoc_insertion_point(destructor:peloton.message.TransactionReduceResponse.ReduceResult)
  SharedDtor();
}

void TransactionReduceResponse_ReduceResult::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TransactionReduceResponse_ReduceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionReduceResponse_ReduceResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionReduceResponse_ReduceResult_descriptor_;
}

const TransactionReduceResponse_ReduceResult& TransactionReduceResponse_ReduceResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionReduceResponse_ReduceResult* TransactionReduceResponse_ReduceResult::default_instance_ = NULL;

TransactionReduceResponse_ReduceResult* TransactionReduceResponse_ReduceResult::New(::google::protobuf::Arena* arena) const {
  TransactionReduceResponse_ReduceResult* n = new TransactionReduceResponse_ReduceResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionReduceResponse_ReduceResult::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TransactionReduceResponse_ReduceResult*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(partition_id_, error_);
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionReduceResponse_ReduceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.TransactionReduceResponse.ReduceResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 partition_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_id_)));
          set_has_partition_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .peloton.message.Status status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::message::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::message::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_error;
        break;
      }

      // optional bool error = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.TransactionReduceResponse.ReduceResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.TransactionReduceResponse.ReduceResult)
  return false;
#undef DO_
}

void TransactionReduceResponse_ReduceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.TransactionReduceResponse.ReduceResult)
  // required int32 partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->partition_id(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // required .peloton.message.Status status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // optional bool error = 4 [default = false];
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.TransactionReduceResponse.ReduceResult)
}

::google::protobuf::uint8* TransactionReduceResponse_ReduceResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.TransactionReduceResponse.ReduceResult)
  // required int32 partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->partition_id(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // required .peloton.message.Status status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // optional bool error = 4 [default = false];
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.TransactionReduceResponse.ReduceResult)
  return target;
}

int TransactionReduceResponse_ReduceResult::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_partition_id()) {
    // required int32 partition_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partition_id());
  }

  if (has_data()) {
    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_status()) {
    // required .peloton.message.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
int TransactionReduceResponse_ReduceResult::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 partition_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partition_id());

    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required .peloton.message.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool error = 4 [default = false];
  if (has_error()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionReduceResponse_ReduceResult::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionReduceResponse_ReduceResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionReduceResponse_ReduceResult>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionReduceResponse_ReduceResult::MergeFrom(const TransactionReduceResponse_ReduceResult& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      set_partition_id(from.partition_id());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionReduceResponse_ReduceResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionReduceResponse_ReduceResult::CopyFrom(const TransactionReduceResponse_ReduceResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionReduceResponse_ReduceResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TransactionReduceResponse_ReduceResult::Swap(TransactionReduceResponse_ReduceResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionReduceResponse_ReduceResult::InternalSwap(TransactionReduceResponse_ReduceResult* other) {
  std::swap(partition_id_, other->partition_id_);
  data_.Swap(&other->data_);
  std::swap(status_, other->status_);
  std::swap(error_, other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionReduceResponse_ReduceResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionReduceResponse_ReduceResult_descriptor_;
  metadata.reflection = TransactionReduceResponse_ReduceResult_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionReduceResponse::kTransactionIdFieldNumber;
const int TransactionReduceResponse::kResultsFieldNumber;
const int TransactionReduceResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionReduceResponse::TransactionReduceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.TransactionReduceResponse)
}

void TransactionReduceResponse::InitAsDefaultInstance() {
}

TransactionReduceResponse::TransactionReduceResponse(const TransactionReduceResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.TransactionReduceResponse)
}

void TransactionReduceResponse::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionReduceResponse::~TransactionReduceResponse() {
  // @@protoc_insertion_point(destructor:peloton.message.TransactionReduceResponse)
  SharedDtor();
}

void TransactionReduceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionReduceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionReduceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionReduceResponse_descriptor_;
}

const TransactionReduceResponse& TransactionReduceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionReduceResponse* TransactionReduceResponse::default_instance_ = NULL;

TransactionReduceResponse* TransactionReduceResponse::New(::google::protobuf::Arena* arena) const {
  TransactionReduceResponse* n = new TransactionReduceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionReduceResponse::Clear() {
  if (_has_bits_[0 / 32] & 5u) {
    transaction_id_ = GOOGLE_LONGLONG(0);
    status_ = 0;
  }
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionReduceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.TransactionReduceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_results;
        break;
      }

      // repeated .peloton.message.TransactionReduceResponse.ReduceResult results = 2;
      case 2: {
        if (tag == 18) {
         parse_results:
          DO_(input->IncrementRecursionDepth());
         parse_loop_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_results;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .peloton.message.Status status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::message::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::message::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.TransactionReduceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.TransactionReduceResponse)
  return false;
#undef DO_
}

void TransactionReduceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.TransactionReduceResponse)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated .peloton.message.TransactionReduceResponse.ReduceResult results = 2;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(i), output);
  }

  // required .peloton.message.Status status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.TransactionReduceResponse)
}

::google::protobuf::uint8* TransactionReduceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.TransactionReduceResponse)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated .peloton.message.TransactionReduceResponse.ReduceResult results = 2;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->results(i), target);
  }

  // required .peloton.message.Status status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.TransactionReduceResponse)
  return target;
}

int TransactionReduceResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_status()) {
    // required .peloton.message.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
int TransactionReduceResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required .peloton.message.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .peloton.message.TransactionReduceResponse.ReduceResult results = 2;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionReduceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionReduceResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionReduceResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionReduceResponse::MergeFrom(const TransactionReduceResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  results_.MergeFrom(from.results_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionReduceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionReduceResponse::CopyFrom(const TransactionReduceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionReduceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->results())) return false;
  return true;
}

void TransactionReduceResponse::Swap(TransactionReduceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionReduceResponse::InternalSwap(TransactionReduceResponse* other) {
  std::swap(transaction_id_, other->transaction_id_);
  results_.UnsafeArenaSwap(&other->results_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionReduceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionReduceResponse_descriptor_;
  metadata.reflection = TransactionReduceResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionReduceResponse_ReduceResult

// required int32 partition_id = 1;
bool TransactionReduceResponse_ReduceResult::has_partition_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionReduceResponse_ReduceResult::set_has_partition_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionReduceResponse_ReduceResult::clear_has_partition_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionReduceResponse_ReduceResult::clear_partition_id() {
  partition_id_ = 0;
  clear_has_partition_id();
}
 ::google::protobuf::int32 TransactionReduceResponse_ReduceResult::partition_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionReduceResponse.ReduceResult.partition_id)
  return partition_id_;
}
 void TransactionReduceResponse_ReduceResult::set_partition_id(::google::protobuf::int32 value) {
  set_has_partition_id();
  partition_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionReduceResponse.ReduceResult.partition_id)
}

// required bytes data = 2;
bool TransactionReduceResponse_ReduceResult::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionReduceResponse_ReduceResult::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionReduceResponse_ReduceResult::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionReduceResponse_ReduceResult::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& TransactionReduceResponse_ReduceResult::data() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionReduceResponse.ReduceResult.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionReduceResponse_ReduceResult::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.message.TransactionReduceResponse.ReduceResult.data)
}
 void TransactionReduceResponse_ReduceResult::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.message.TransactionReduceResponse.ReduceResult.data)
}
 void TransactionReduceResponse_ReduceResult::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.message.TransactionReduceResponse.ReduceResult.data)
}
 ::std::string* TransactionReduceResponse_ReduceResult::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:peloton.message.TransactionReduceResponse.ReduceResult.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransactionReduceResponse_ReduceResult::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionReduceResponse_ReduceResult::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:peloton.message.TransactionReduceResponse.ReduceResult.data)
}

// required .peloton.message.Status status = 3;
bool TransactionReduceResponse_ReduceResult::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionReduceResponse_ReduceResult::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionReduceResponse_ReduceResult::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionReduceResponse_ReduceResult::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::peloton::message::Status TransactionReduceResponse_ReduceResult::status() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionReduceResponse.ReduceResult.status)
  return static_cast< ::peloton::message::Status >(status_);
}
 void TransactionReduceResponse_ReduceResult::set_status(::peloton::message::Status value) {
  assert(::peloton::message::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionReduceResponse.ReduceResult.status)
}

// optional bool error = 4 [default = false];
bool TransactionReduceResponse_ReduceResult::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransactionReduceResponse_ReduceResult::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
void TransactionReduceResponse_ReduceResult::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransactionReduceResponse_ReduceResult::clear_error() {
  error_ = false;
  clear_has_error();
}
 bool TransactionReduceResponse_ReduceResult::error() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionReduceResponse.ReduceResult.error)
  return error_;
}
 void TransactionReduceResponse_ReduceResult::set_error(bool value) {
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionReduceResponse.ReduceResult.error)
}

// -------------------------------------------------------------------

// TransactionReduceResponse

// required int64 transaction_id = 1;
bool TransactionReduceResponse::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionReduceResponse::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionReduceResponse::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionReduceResponse::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
 ::google::protobuf::int64 TransactionReduceResponse::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionReduceResponse.transaction_id)
  return transaction_id_;
}
 void TransactionReduceResponse::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionReduceResponse.transaction_id)
}

// repeated .peloton.message.TransactionReduceResponse.ReduceResult results = 2;
int TransactionReduceResponse::results_size() const {
  return results_.size();
}
void TransactionReduceResponse::clear_results() {
  results_.Clear();
}
const ::peloton::message::TransactionReduceResponse_ReduceResult& TransactionReduceResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionReduceResponse.results)
  return results_.Get(index);
}
::peloton::message::TransactionReduceResponse_ReduceResult* TransactionReduceResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:peloton.message.TransactionReduceResponse.results)
  return results_.Mutable(index);
}
::peloton::message::TransactionReduceResponse_ReduceResult* TransactionReduceResponse::add_results() {
  // @@protoc_insertion_point(field_add:peloton.message.TransactionReduceResponse.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::peloton::message::TransactionReduceResponse_ReduceResult >*
TransactionReduceResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.TransactionReduceResponse.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::peloton::message::TransactionReduceResponse_ReduceResult >&
TransactionReduceResponse::results() const {
  // @@protoc_insertion_point(field_list:peloton.message.TransactionReduceResponse.results)
  return results_;
}

// required .peloton.message.Status status = 3;
bool TransactionReduceResponse::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionReduceResponse::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionReduceResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionReduceResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::peloton::message::Status TransactionReduceResponse::status() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionReduceResponse.status)
  return static_cast< ::peloton::message::Status >(status_);
}
 void TransactionReduceResponse::set_status(::peloton::message::Status value) {
  assert(::peloton::message::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionReduceResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionPrepareRequest::kTransactionIdFieldNumber;
const int TransactionPrepareRequest::kPartitionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionPrepareRequest::TransactionPrepareRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.TransactionPrepareRequest)
}

void TransactionPrepareRequest::InitAsDefaultInstance() {
}

TransactionPrepareRequest::TransactionPrepareRequest(const TransactionPrepareRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.TransactionPrepareRequest)
}

void TransactionPrepareRequest::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionPrepareRequest::~TransactionPrepareRequest() {
  // @@protoc_insertion_point(destructor:peloton.message.TransactionPrepareRequest)
  SharedDtor();
}

void TransactionPrepareRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionPrepareRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionPrepareRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionPrepareRequest_descriptor_;
}

const TransactionPrepareRequest& TransactionPrepareRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionPrepareRequest* TransactionPrepareRequest::default_instance_ = NULL;

TransactionPrepareRequest* TransactionPrepareRequest::New(::google::protobuf::Arena* arena) const {
  TransactionPrepareRequest* n = new TransactionPrepareRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionPrepareRequest::Clear() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  partitions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionPrepareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.TransactionPrepareRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_partitions;
        break;
      }

      // repeated int32 partitions = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_partitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_partitions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.TransactionPrepareRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.TransactionPrepareRequest)
  return false;
#undef DO_
}

void TransactionPrepareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.TransactionPrepareRequest)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_partitions_cached_byte_size_);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.TransactionPrepareRequest)
}

::google::protobuf::uint8* TransactionPrepareRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.TransactionPrepareRequest)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _partitions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.TransactionPrepareRequest)
  return target;
}

int TransactionPrepareRequest::ByteSize() const {
  int total_size = 0;

  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }
  // repeated int32 partitions = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->partitions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->partitions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionPrepareRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionPrepareRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionPrepareRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionPrepareRequest::MergeFrom(const TransactionPrepareRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  partitions_.MergeFrom(from.partitions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionPrepareRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionPrepareRequest::CopyFrom(const TransactionPrepareRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionPrepareRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TransactionPrepareRequest::Swap(TransactionPrepareRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionPrepareRequest::InternalSwap(TransactionPrepareRequest* other) {
  std::swap(transaction_id_, other->transaction_id_);
  partitions_.UnsafeArenaSwap(&other->partitions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionPrepareRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionPrepareRequest_descriptor_;
  metadata.reflection = TransactionPrepareRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionPrepareRequest

// required int64 transaction_id = 1;
bool TransactionPrepareRequest::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionPrepareRequest::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionPrepareRequest::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionPrepareRequest::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
 ::google::protobuf::int64 TransactionPrepareRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionPrepareRequest.transaction_id)
  return transaction_id_;
}
 void TransactionPrepareRequest::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionPrepareRequest.transaction_id)
}

// repeated int32 partitions = 2 [packed = true];
int TransactionPrepareRequest::partitions_size() const {
  return partitions_.size();
}
void TransactionPrepareRequest::clear_partitions() {
  partitions_.Clear();
}
 ::google::protobuf::int32 TransactionPrepareRequest::partitions(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionPrepareRequest.partitions)
  return partitions_.Get(index);
}
 void TransactionPrepareRequest::set_partitions(int index, ::google::protobuf::int32 value) {
  partitions_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.TransactionPrepareRequest.partitions)
}
 void TransactionPrepareRequest::add_partitions(::google::protobuf::int32 value) {
  partitions_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.TransactionPrepareRequest.partitions)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionPrepareRequest::partitions() const {
  // @@protoc_insertion_point(field_list:peloton.message.TransactionPrepareRequest.partitions)
  return partitions_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionPrepareRequest::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.TransactionPrepareRequest.partitions)
  return &partitions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionPrepareResponse::kTransactionIdFieldNumber;
const int TransactionPrepareResponse::kPartitionsFieldNumber;
const int TransactionPrepareResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionPrepareResponse::TransactionPrepareResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.TransactionPrepareResponse)
}

void TransactionPrepareResponse::InitAsDefaultInstance() {
}

TransactionPrepareResponse::TransactionPrepareResponse(const TransactionPrepareResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.TransactionPrepareResponse)
}

void TransactionPrepareResponse::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionPrepareResponse::~TransactionPrepareResponse() {
  // @@protoc_insertion_point(destructor:peloton.message.TransactionPrepareResponse)
  SharedDtor();
}

void TransactionPrepareResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionPrepareResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionPrepareResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionPrepareResponse_descriptor_;
}

const TransactionPrepareResponse& TransactionPrepareResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionPrepareResponse* TransactionPrepareResponse::default_instance_ = NULL;

TransactionPrepareResponse* TransactionPrepareResponse::New(::google::protobuf::Arena* arena) const {
  TransactionPrepareResponse* n = new TransactionPrepareResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionPrepareResponse::Clear() {
  if (_has_bits_[0 / 32] & 5u) {
    transaction_id_ = GOOGLE_LONGLONG(0);
    status_ = 0;
  }
  partitions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionPrepareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.TransactionPrepareResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_partitions;
        break;
      }

      // repeated int32 partitions = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_partitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_partitions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .peloton.message.Status status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::message::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::message::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.TransactionPrepareResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.TransactionPrepareResponse)
  return false;
#undef DO_
}

void TransactionPrepareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.TransactionPrepareResponse)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_partitions_cached_byte_size_);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  // required .peloton.message.Status status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.TransactionPrepareResponse)
}

::google::protobuf::uint8* TransactionPrepareResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.TransactionPrepareResponse)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _partitions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions(i), target);
  }

  // required .peloton.message.Status status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.TransactionPrepareResponse)
  return target;
}

int TransactionPrepareResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_status()) {
    // required .peloton.message.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
int TransactionPrepareResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required .peloton.message.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 partitions = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->partitions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->partitions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionPrepareResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionPrepareResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionPrepareResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionPrepareResponse::MergeFrom(const TransactionPrepareResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  partitions_.MergeFrom(from.partitions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionPrepareResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionPrepareResponse::CopyFrom(const TransactionPrepareResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionPrepareResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void TransactionPrepareResponse::Swap(TransactionPrepareResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionPrepareResponse::InternalSwap(TransactionPrepareResponse* other) {
  std::swap(transaction_id_, other->transaction_id_);
  partitions_.UnsafeArenaSwap(&other->partitions_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionPrepareResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionPrepareResponse_descriptor_;
  metadata.reflection = TransactionPrepareResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionPrepareResponse

// required int64 transaction_id = 1;
bool TransactionPrepareResponse::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionPrepareResponse::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionPrepareResponse::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionPrepareResponse::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
 ::google::protobuf::int64 TransactionPrepareResponse::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionPrepareResponse.transaction_id)
  return transaction_id_;
}
 void TransactionPrepareResponse::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionPrepareResponse.transaction_id)
}

// repeated int32 partitions = 2 [packed = true];
int TransactionPrepareResponse::partitions_size() const {
  return partitions_.size();
}
void TransactionPrepareResponse::clear_partitions() {
  partitions_.Clear();
}
 ::google::protobuf::int32 TransactionPrepareResponse::partitions(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionPrepareResponse.partitions)
  return partitions_.Get(index);
}
 void TransactionPrepareResponse::set_partitions(int index, ::google::protobuf::int32 value) {
  partitions_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.TransactionPrepareResponse.partitions)
}
 void TransactionPrepareResponse::add_partitions(::google::protobuf::int32 value) {
  partitions_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.TransactionPrepareResponse.partitions)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionPrepareResponse::partitions() const {
  // @@protoc_insertion_point(field_list:peloton.message.TransactionPrepareResponse.partitions)
  return partitions_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionPrepareResponse::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.TransactionPrepareResponse.partitions)
  return &partitions_;
}

// required .peloton.message.Status status = 3;
bool TransactionPrepareResponse::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionPrepareResponse::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionPrepareResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionPrepareResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::peloton::message::Status TransactionPrepareResponse::status() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionPrepareResponse.status)
  return static_cast< ::peloton::message::Status >(status_);
}
 void TransactionPrepareResponse::set_status(::peloton::message::Status value) {
  assert(::peloton::message::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionPrepareResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionFinishRequest::kTransactionIdFieldNumber;
const int TransactionFinishRequest::kPartitionsFieldNumber;
const int TransactionFinishRequest::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionFinishRequest::TransactionFinishRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.TransactionFinishRequest)
}

void TransactionFinishRequest::InitAsDefaultInstance() {
}

TransactionFinishRequest::TransactionFinishRequest(const TransactionFinishRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.TransactionFinishRequest)
}

void TransactionFinishRequest::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionFinishRequest::~TransactionFinishRequest() {
  // @@protoc_insertion_point(destructor:peloton.message.TransactionFinishRequest)
  SharedDtor();
}

void TransactionFinishRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionFinishRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionFinishRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionFinishRequest_descriptor_;
}

const TransactionFinishRequest& TransactionFinishRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionFinishRequest* TransactionFinishRequest::default_instance_ = NULL;

TransactionFinishRequest* TransactionFinishRequest::New(::google::protobuf::Arena* arena) const {
  TransactionFinishRequest* n = new TransactionFinishRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionFinishRequest::Clear() {
  if (_has_bits_[0 / 32] & 5u) {
    transaction_id_ = GOOGLE_LONGLONG(0);
    status_ = 0;
  }
  partitions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionFinishRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.TransactionFinishRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_partitions;
        break;
      }

      // repeated int32 partitions = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_partitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_partitions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .peloton.message.Status status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::message::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::message::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.TransactionFinishRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.TransactionFinishRequest)
  return false;
#undef DO_
}

void TransactionFinishRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.TransactionFinishRequest)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_partitions_cached_byte_size_);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  // required .peloton.message.Status status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.TransactionFinishRequest)
}

::google::protobuf::uint8* TransactionFinishRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.TransactionFinishRequest)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _partitions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions(i), target);
  }

  // required .peloton.message.Status status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.TransactionFinishRequest)
  return target;
}

int TransactionFinishRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_status()) {
    // required .peloton.message.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
int TransactionFinishRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required .peloton.message.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 partitions = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->partitions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->partitions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionFinishRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionFinishRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionFinishRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionFinishRequest::MergeFrom(const TransactionFinishRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  partitions_.MergeFrom(from.partitions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionFinishRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionFinishRequest::CopyFrom(const TransactionFinishRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionFinishRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void TransactionFinishRequest::Swap(TransactionFinishRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionFinishRequest::InternalSwap(TransactionFinishRequest* other) {
  std::swap(transaction_id_, other->transaction_id_);
  partitions_.UnsafeArenaSwap(&other->partitions_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionFinishRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionFinishRequest_descriptor_;
  metadata.reflection = TransactionFinishRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionFinishRequest

// required int64 transaction_id = 1;
bool TransactionFinishRequest::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionFinishRequest::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionFinishRequest::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionFinishRequest::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
 ::google::protobuf::int64 TransactionFinishRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionFinishRequest.transaction_id)
  return transaction_id_;
}
 void TransactionFinishRequest::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionFinishRequest.transaction_id)
}

// repeated int32 partitions = 2 [packed = true];
int TransactionFinishRequest::partitions_size() const {
  return partitions_.size();
}
void TransactionFinishRequest::clear_partitions() {
  partitions_.Clear();
}
 ::google::protobuf::int32 TransactionFinishRequest::partitions(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionFinishRequest.partitions)
  return partitions_.Get(index);
}
 void TransactionFinishRequest::set_partitions(int index, ::google::protobuf::int32 value) {
  partitions_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.TransactionFinishRequest.partitions)
}
 void TransactionFinishRequest::add_partitions(::google::protobuf::int32 value) {
  partitions_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.TransactionFinishRequest.partitions)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionFinishRequest::partitions() const {
  // @@protoc_insertion_point(field_list:peloton.message.TransactionFinishRequest.partitions)
  return partitions_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionFinishRequest::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.TransactionFinishRequest.partitions)
  return &partitions_;
}

// required .peloton.message.Status status = 3;
bool TransactionFinishRequest::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionFinishRequest::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionFinishRequest::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionFinishRequest::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::peloton::message::Status TransactionFinishRequest::status() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionFinishRequest.status)
  return static_cast< ::peloton::message::Status >(status_);
}
 void TransactionFinishRequest::set_status(::peloton::message::Status value) {
  assert(::peloton::message::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionFinishRequest.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionFinishResponse::kTransactionIdFieldNumber;
const int TransactionFinishResponse::kPartitionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionFinishResponse::TransactionFinishResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.TransactionFinishResponse)
}

void TransactionFinishResponse::InitAsDefaultInstance() {
}

TransactionFinishResponse::TransactionFinishResponse(const TransactionFinishResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.TransactionFinishResponse)
}

void TransactionFinishResponse::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionFinishResponse::~TransactionFinishResponse() {
  // @@protoc_insertion_point(destructor:peloton.message.TransactionFinishResponse)
  SharedDtor();
}

void TransactionFinishResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionFinishResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionFinishResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionFinishResponse_descriptor_;
}

const TransactionFinishResponse& TransactionFinishResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionFinishResponse* TransactionFinishResponse::default_instance_ = NULL;

TransactionFinishResponse* TransactionFinishResponse::New(::google::protobuf::Arena* arena) const {
  TransactionFinishResponse* n = new TransactionFinishResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionFinishResponse::Clear() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  partitions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionFinishResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.TransactionFinishResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_partitions;
        break;
      }

      // repeated int32 partitions = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_partitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_partitions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.TransactionFinishResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.TransactionFinishResponse)
  return false;
#undef DO_
}

void TransactionFinishResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.TransactionFinishResponse)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_partitions_cached_byte_size_);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.TransactionFinishResponse)
}

::google::protobuf::uint8* TransactionFinishResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.TransactionFinishResponse)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _partitions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.TransactionFinishResponse)
  return target;
}

int TransactionFinishResponse::ByteSize() const {
  int total_size = 0;

  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }
  // repeated int32 partitions = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->partitions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->partitions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionFinishResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionFinishResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionFinishResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionFinishResponse::MergeFrom(const TransactionFinishResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  partitions_.MergeFrom(from.partitions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionFinishResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionFinishResponse::CopyFrom(const TransactionFinishResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionFinishResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TransactionFinishResponse::Swap(TransactionFinishResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionFinishResponse::InternalSwap(TransactionFinishResponse* other) {
  std::swap(transaction_id_, other->transaction_id_);
  partitions_.UnsafeArenaSwap(&other->partitions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionFinishResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionFinishResponse_descriptor_;
  metadata.reflection = TransactionFinishResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionFinishResponse

// required int64 transaction_id = 1;
bool TransactionFinishResponse::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionFinishResponse::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionFinishResponse::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionFinishResponse::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
 ::google::protobuf::int64 TransactionFinishResponse::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionFinishResponse.transaction_id)
  return transaction_id_;
}
 void TransactionFinishResponse::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionFinishResponse.transaction_id)
}

// repeated int32 partitions = 2 [packed = true];
int TransactionFinishResponse::partitions_size() const {
  return partitions_.size();
}
void TransactionFinishResponse::clear_partitions() {
  partitions_.Clear();
}
 ::google::protobuf::int32 TransactionFinishResponse::partitions(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionFinishResponse.partitions)
  return partitions_.Get(index);
}
 void TransactionFinishResponse::set_partitions(int index, ::google::protobuf::int32 value) {
  partitions_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.TransactionFinishResponse.partitions)
}
 void TransactionFinishResponse::add_partitions(::google::protobuf::int32 value) {
  partitions_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.TransactionFinishResponse.partitions)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionFinishResponse::partitions() const {
  // @@protoc_insertion_point(field_list:peloton.message.TransactionFinishResponse.partitions)
  return partitions_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionFinishResponse::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.TransactionFinishResponse.partitions)
  return &partitions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionRedirectRequest::kSenderSiteFieldNumber;
const int TransactionRedirectRequest::kWorkFieldNumber;
const int TransactionRedirectRequest::kOrigTxnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionRedirectRequest::TransactionRedirectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.TransactionRedirectRequest)
}

void TransactionRedirectRequest::InitAsDefaultInstance() {
}

TransactionRedirectRequest::TransactionRedirectRequest(const TransactionRedirectRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.TransactionRedirectRequest)
}

void TransactionRedirectRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sender_site_ = 0;
  work_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orig_txn_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionRedirectRequest::~TransactionRedirectRequest() {
  // @@protoc_insertion_point(destructor:peloton.message.TransactionRedirectRequest)
  SharedDtor();
}

void TransactionRedirectRequest::SharedDtor() {
  work_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TransactionRedirectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionRedirectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionRedirectRequest_descriptor_;
}

const TransactionRedirectRequest& TransactionRedirectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionRedirectRequest* TransactionRedirectRequest::default_instance_ = NULL;

TransactionRedirectRequest* TransactionRedirectRequest::New(::google::protobuf::Arena* arena) const {
  TransactionRedirectRequest* n = new TransactionRedirectRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionRedirectRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TransactionRedirectRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(orig_txn_id_, sender_site_);
    if (has_work()) {
      work_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionRedirectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.TransactionRedirectRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_work;
        break;
      }

      // required bytes work = 2;
      case 2: {
        if (tag == 18) {
         parse_work:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_work()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_orig_txn_id;
        break;
      }

      // optional int64 orig_txn_id = 3;
      case 3: {
        if (tag == 24) {
         parse_orig_txn_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orig_txn_id_)));
          set_has_orig_txn_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.TransactionRedirectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.TransactionRedirectRequest)
  return false;
#undef DO_
}

void TransactionRedirectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.TransactionRedirectRequest)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required bytes work = 2;
  if (has_work()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->work(), output);
  }

  // optional int64 orig_txn_id = 3;
  if (has_orig_txn_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->orig_txn_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.TransactionRedirectRequest)
}

::google::protobuf::uint8* TransactionRedirectRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.TransactionRedirectRequest)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required bytes work = 2;
  if (has_work()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->work(), target);
  }

  // optional int64 orig_txn_id = 3;
  if (has_orig_txn_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->orig_txn_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.TransactionRedirectRequest)
  return target;
}

int TransactionRedirectRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  if (has_work()) {
    // required bytes work = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->work());
  }

  return total_size;
}
int TransactionRedirectRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

    // required bytes work = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->work());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int64 orig_txn_id = 3;
  if (has_orig_txn_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->orig_txn_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionRedirectRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionRedirectRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionRedirectRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionRedirectRequest::MergeFrom(const TransactionRedirectRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_work()) {
      set_has_work();
      work_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.work_);
    }
    if (from.has_orig_txn_id()) {
      set_orig_txn_id(from.orig_txn_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionRedirectRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionRedirectRequest::CopyFrom(const TransactionRedirectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionRedirectRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TransactionRedirectRequest::Swap(TransactionRedirectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionRedirectRequest::InternalSwap(TransactionRedirectRequest* other) {
  std::swap(sender_site_, other->sender_site_);
  work_.Swap(&other->work_);
  std::swap(orig_txn_id_, other->orig_txn_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionRedirectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionRedirectRequest_descriptor_;
  metadata.reflection = TransactionRedirectRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionRedirectRequest

// required int32 sender_site = 1;
bool TransactionRedirectRequest::has_sender_site() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionRedirectRequest::set_has_sender_site() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionRedirectRequest::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionRedirectRequest::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
 ::google::protobuf::int32 TransactionRedirectRequest::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionRedirectRequest.sender_site)
  return sender_site_;
}
 void TransactionRedirectRequest::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionRedirectRequest.sender_site)
}

// required bytes work = 2;
bool TransactionRedirectRequest::has_work() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionRedirectRequest::set_has_work() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionRedirectRequest::clear_has_work() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionRedirectRequest::clear_work() {
  work_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_work();
}
 const ::std::string& TransactionRedirectRequest::work() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionRedirectRequest.work)
  return work_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionRedirectRequest::set_work(const ::std::string& value) {
  set_has_work();
  work_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.message.TransactionRedirectRequest.work)
}
 void TransactionRedirectRequest::set_work(const char* value) {
  set_has_work();
  work_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.message.TransactionRedirectRequest.work)
}
 void TransactionRedirectRequest::set_work(const void* value, size_t size) {
  set_has_work();
  work_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.message.TransactionRedirectRequest.work)
}
 ::std::string* TransactionRedirectRequest::mutable_work() {
  set_has_work();
  // @@protoc_insertion_point(field_mutable:peloton.message.TransactionRedirectRequest.work)
  return work_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransactionRedirectRequest::release_work() {
  clear_has_work();
  return work_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionRedirectRequest::set_allocated_work(::std::string* work) {
  if (work != NULL) {
    set_has_work();
  } else {
    clear_has_work();
  }
  work_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), work);
  // @@protoc_insertion_point(field_set_allocated:peloton.message.TransactionRedirectRequest.work)
}

// optional int64 orig_txn_id = 3;
bool TransactionRedirectRequest::has_orig_txn_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionRedirectRequest::set_has_orig_txn_id() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionRedirectRequest::clear_has_orig_txn_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionRedirectRequest::clear_orig_txn_id() {
  orig_txn_id_ = GOOGLE_LONGLONG(0);
  clear_has_orig_txn_id();
}
 ::google::protobuf::int64 TransactionRedirectRequest::orig_txn_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionRedirectRequest.orig_txn_id)
  return orig_txn_id_;
}
 void TransactionRedirectRequest::set_orig_txn_id(::google::protobuf::int64 value) {
  set_has_orig_txn_id();
  orig_txn_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionRedirectRequest.orig_txn_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionRedirectResponse::kSenderSiteFieldNumber;
const int TransactionRedirectResponse::kOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionRedirectResponse::TransactionRedirectResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.TransactionRedirectResponse)
}

void TransactionRedirectResponse::InitAsDefaultInstance() {
}

TransactionRedirectResponse::TransactionRedirectResponse(const TransactionRedirectResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.TransactionRedirectResponse)
}

void TransactionRedirectResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sender_site_ = 0;
  output_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionRedirectResponse::~TransactionRedirectResponse() {
  // @@protoc_insertion_point(destructor:peloton.message.TransactionRedirectResponse)
  SharedDtor();
}

void TransactionRedirectResponse::SharedDtor() {
  output_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TransactionRedirectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionRedirectResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionRedirectResponse_descriptor_;
}

const TransactionRedirectResponse& TransactionRedirectResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionRedirectResponse* TransactionRedirectResponse::default_instance_ = NULL;

TransactionRedirectResponse* TransactionRedirectResponse::New(::google::protobuf::Arena* arena) const {
  TransactionRedirectResponse* n = new TransactionRedirectResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionRedirectResponse::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    sender_site_ = 0;
    if (has_output()) {
      output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionRedirectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.TransactionRedirectResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_output;
        break;
      }

      // required bytes output = 2;
      case 2: {
        if (tag == 18) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_output()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.TransactionRedirectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.TransactionRedirectResponse)
  return false;
#undef DO_
}

void TransactionRedirectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.TransactionRedirectResponse)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required bytes output = 2;
  if (has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->output(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.TransactionRedirectResponse)
}

::google::protobuf::uint8* TransactionRedirectResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.TransactionRedirectResponse)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required bytes output = 2;
  if (has_output()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->output(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.TransactionRedirectResponse)
  return target;
}

int TransactionRedirectResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  if (has_output()) {
    // required bytes output = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->output());
  }

  return total_size;
}
int TransactionRedirectResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

    // required bytes output = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->output());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionRedirectResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionRedirectResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionRedirectResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionRedirectResponse::MergeFrom(const TransactionRedirectResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_output()) {
      set_has_output();
      output_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionRedirectResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionRedirectResponse::CopyFrom(const TransactionRedirectResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionRedirectResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TransactionRedirectResponse::Swap(TransactionRedirectResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionRedirectResponse::InternalSwap(TransactionRedirectResponse* other) {
  std::swap(sender_site_, other->sender_site_);
  output_.Swap(&other->output_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionRedirectResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionRedirectResponse_descriptor_;
  metadata.reflection = TransactionRedirectResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionRedirectResponse

// required int32 sender_site = 1;
bool TransactionRedirectResponse::has_sender_site() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionRedirectResponse::set_has_sender_site() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionRedirectResponse::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionRedirectResponse::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
 ::google::protobuf::int32 TransactionRedirectResponse::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionRedirectResponse.sender_site)
  return sender_site_;
}
 void TransactionRedirectResponse::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionRedirectResponse.sender_site)
}

// required bytes output = 2;
bool TransactionRedirectResponse::has_output() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionRedirectResponse::set_has_output() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionRedirectResponse::clear_has_output() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionRedirectResponse::clear_output() {
  output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output();
}
 const ::std::string& TransactionRedirectResponse::output() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionRedirectResponse.output)
  return output_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionRedirectResponse::set_output(const ::std::string& value) {
  set_has_output();
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.message.TransactionRedirectResponse.output)
}
 void TransactionRedirectResponse::set_output(const char* value) {
  set_has_output();
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.message.TransactionRedirectResponse.output)
}
 void TransactionRedirectResponse::set_output(const void* value, size_t size) {
  set_has_output();
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.message.TransactionRedirectResponse.output)
}
 ::std::string* TransactionRedirectResponse::mutable_output() {
  set_has_output();
  // @@protoc_insertion_point(field_mutable:peloton.message.TransactionRedirectResponse.output)
  return output_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransactionRedirectResponse::release_output() {
  clear_has_output();
  return output_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionRedirectResponse::set_allocated_output(::std::string* output) {
  if (output != NULL) {
    set_has_output();
  } else {
    clear_has_output();
  }
  output_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output);
  // @@protoc_insertion_point(field_set_allocated:peloton.message.TransactionRedirectResponse.output)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionDebugRequest::kSenderSiteFieldNumber;
const int TransactionDebugRequest::kTransactionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionDebugRequest::TransactionDebugRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.TransactionDebugRequest)
}

void TransactionDebugRequest::InitAsDefaultInstance() {
}

TransactionDebugRequest::TransactionDebugRequest(const TransactionDebugRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.TransactionDebugRequest)
}

void TransactionDebugRequest::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionDebugRequest::~TransactionDebugRequest() {
  // @@protoc_insertion_point(destructor:peloton.message.TransactionDebugRequest)
  SharedDtor();
}

void TransactionDebugRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionDebugRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionDebugRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionDebugRequest_descriptor_;
}

const TransactionDebugRequest& TransactionDebugRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionDebugRequest* TransactionDebugRequest::default_instance_ = NULL;

TransactionDebugRequest* TransactionDebugRequest::New(::google::protobuf::Arena* arena) const {
  TransactionDebugRequest* n = new TransactionDebugRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionDebugRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TransactionDebugRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(transaction_id_, sender_site_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionDebugRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.TransactionDebugRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_transaction_id;
        break;
      }

      // required int64 transaction_id = 2;
      case 2: {
        if (tag == 16) {
         parse_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.TransactionDebugRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.TransactionDebugRequest)
  return false;
#undef DO_
}

void TransactionDebugRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.TransactionDebugRequest)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->transaction_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.TransactionDebugRequest)
}

::google::protobuf::uint8* TransactionDebugRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.TransactionDebugRequest)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->transaction_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.TransactionDebugRequest)
  return target;
}

int TransactionDebugRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  if (has_transaction_id()) {
    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  return total_size;
}
int TransactionDebugRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionDebugRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionDebugRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionDebugRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionDebugRequest::MergeFrom(const TransactionDebugRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionDebugRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionDebugRequest::CopyFrom(const TransactionDebugRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionDebugRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TransactionDebugRequest::Swap(TransactionDebugRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionDebugRequest::InternalSwap(TransactionDebugRequest* other) {
  std::swap(sender_site_, other->sender_site_);
  std::swap(transaction_id_, other->transaction_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionDebugRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionDebugRequest_descriptor_;
  metadata.reflection = TransactionDebugRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionDebugRequest

// required int32 sender_site = 1;
bool TransactionDebugRequest::has_sender_site() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionDebugRequest::set_has_sender_site() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionDebugRequest::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionDebugRequest::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
 ::google::protobuf::int32 TransactionDebugRequest::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionDebugRequest.sender_site)
  return sender_site_;
}
 void TransactionDebugRequest::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionDebugRequest.sender_site)
}

// required int64 transaction_id = 2;
bool TransactionDebugRequest::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionDebugRequest::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionDebugRequest::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionDebugRequest::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
 ::google::protobuf::int64 TransactionDebugRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionDebugRequest.transaction_id)
  return transaction_id_;
}
 void TransactionDebugRequest::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionDebugRequest.transaction_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionDebugResponse::kSenderSiteFieldNumber;
const int TransactionDebugResponse::kStatusFieldNumber;
const int TransactionDebugResponse::kDebugFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionDebugResponse::TransactionDebugResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.TransactionDebugResponse)
}

void TransactionDebugResponse::InitAsDefaultInstance() {
}

TransactionDebugResponse::TransactionDebugResponse(const TransactionDebugResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.TransactionDebugResponse)
}

void TransactionDebugResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sender_site_ = 0;
  status_ = 0;
  debug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionDebugResponse::~TransactionDebugResponse() {
  // @@protoc_insertion_point(destructor:peloton.message.TransactionDebugResponse)
  SharedDtor();
}

void TransactionDebugResponse::SharedDtor() {
  debug_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TransactionDebugResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionDebugResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionDebugResponse_descriptor_;
}

const TransactionDebugResponse& TransactionDebugResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TransactionDebugResponse* TransactionDebugResponse::default_instance_ = NULL;

TransactionDebugResponse* TransactionDebugResponse::New(::google::protobuf::Arena* arena) const {
  TransactionDebugResponse* n = new TransactionDebugResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionDebugResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TransactionDebugResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(sender_site_, status_);
    if (has_debug()) {
      debug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionDebugResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.TransactionDebugResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .peloton.message.Status status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::message::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::message::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_debug;
        break;
      }

      // required string debug = 3;
      case 3: {
        if (tag == 26) {
         parse_debug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->debug().data(), this->debug().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peloton.message.TransactionDebugResponse.debug");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.TransactionDebugResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.TransactionDebugResponse)
  return false;
#undef DO_
}

void TransactionDebugResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.TransactionDebugResponse)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required .peloton.message.Status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required string debug = 3;
  if (has_debug()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug().data(), this->debug().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peloton.message.TransactionDebugResponse.debug");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->debug(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.TransactionDebugResponse)
}

::google::protobuf::uint8* TransactionDebugResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.TransactionDebugResponse)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required .peloton.message.Status status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // required string debug = 3;
  if (has_debug()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug().data(), this->debug().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peloton.message.TransactionDebugResponse.debug");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->debug(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.TransactionDebugResponse)
  return target;
}

int TransactionDebugResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  if (has_status()) {
    // required .peloton.message.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  if (has_debug()) {
    // required string debug = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->debug());
  }

  return total_size;
}
int TransactionDebugResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

    // required .peloton.message.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

    // required string debug = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->debug());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionDebugResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionDebugResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionDebugResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionDebugResponse::MergeFrom(const TransactionDebugResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_debug()) {
      set_has_debug();
      debug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionDebugResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionDebugResponse::CopyFrom(const TransactionDebugResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionDebugResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TransactionDebugResponse::Swap(TransactionDebugResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionDebugResponse::InternalSwap(TransactionDebugResponse* other) {
  std::swap(sender_site_, other->sender_site_);
  std::swap(status_, other->status_);
  debug_.Swap(&other->debug_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionDebugResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionDebugResponse_descriptor_;
  metadata.reflection = TransactionDebugResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionDebugResponse

// required int32 sender_site = 1;
bool TransactionDebugResponse::has_sender_site() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionDebugResponse::set_has_sender_site() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionDebugResponse::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionDebugResponse::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
 ::google::protobuf::int32 TransactionDebugResponse::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionDebugResponse.sender_site)
  return sender_site_;
}
 void TransactionDebugResponse::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionDebugResponse.sender_site)
}

// required .peloton.message.Status status = 2;
bool TransactionDebugResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionDebugResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionDebugResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionDebugResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::peloton::message::Status TransactionDebugResponse::status() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionDebugResponse.status)
  return static_cast< ::peloton::message::Status >(status_);
}
 void TransactionDebugResponse::set_status(::peloton::message::Status value) {
  assert(::peloton::message::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TransactionDebugResponse.status)
}

// required string debug = 3;
bool TransactionDebugResponse::has_debug() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionDebugResponse::set_has_debug() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionDebugResponse::clear_has_debug() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionDebugResponse::clear_debug() {
  debug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_debug();
}
 const ::std::string& TransactionDebugResponse::debug() const {
  // @@protoc_insertion_point(field_get:peloton.message.TransactionDebugResponse.debug)
  return debug_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionDebugResponse::set_debug(const ::std::string& value) {
  set_has_debug();
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.message.TransactionDebugResponse.debug)
}
 void TransactionDebugResponse::set_debug(const char* value) {
  set_has_debug();
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.message.TransactionDebugResponse.debug)
}
 void TransactionDebugResponse::set_debug(const char* value, size_t size) {
  set_has_debug();
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.message.TransactionDebugResponse.debug)
}
 ::std::string* TransactionDebugResponse::mutable_debug() {
  set_has_debug();
  // @@protoc_insertion_point(field_mutable:peloton.message.TransactionDebugResponse.debug)
  return debug_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransactionDebugResponse::release_debug() {
  clear_has_debug();
  return debug_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionDebugResponse::set_allocated_debug(::std::string* debug) {
  if (debug != NULL) {
    set_has_debug();
  } else {
    clear_has_debug();
  }
  debug_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debug);
  // @@protoc_insertion_point(field_set_allocated:peloton.message.TransactionDebugResponse.debug)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendDataRequest::kTransactionIdFieldNumber;
const int SendDataRequest::kSenderSiteFieldNumber;
const int SendDataRequest::kDepIdFieldNumber;
const int SendDataRequest::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendDataRequest::SendDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.SendDataRequest)
}

void SendDataRequest::InitAsDefaultInstance() {
}

SendDataRequest::SendDataRequest(const SendDataRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.SendDataRequest)
}

void SendDataRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  sender_site_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendDataRequest::~SendDataRequest() {
  // @@protoc_insertion_point(destructor:peloton.message.SendDataRequest)
  SharedDtor();
}

void SendDataRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendDataRequest_descriptor_;
}

const SendDataRequest& SendDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

SendDataRequest* SendDataRequest::default_instance_ = NULL;

SendDataRequest* SendDataRequest::New(::google::protobuf::Arena* arena) const {
  SendDataRequest* n = new SendDataRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendDataRequest::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    transaction_id_ = GOOGLE_LONGLONG(0);
    sender_site_ = 0;
  }
  dep_id_.Clear();
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SendDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.SendDataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sender_site;
        break;
      }

      // required int32 sender_site = 2;
      case 2: {
        if (tag == 16) {
         parse_sender_site:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dep_id;
        break;
      }

      // repeated int32 dep_id = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_dep_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dep_id())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_dep_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // repeated bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.SendDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.SendDataRequest)
  return false;
#undef DO_
}

void SendDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.SendDataRequest)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // required int32 sender_site = 2;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sender_site(), output);
  }

  // repeated int32 dep_id = 3 [packed = true];
  if (this->dep_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dep_id_cached_byte_size_);
  }
  for (int i = 0; i < this->dep_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->dep_id(i), output);
  }

  // repeated bytes data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.SendDataRequest)
}

::google::protobuf::uint8* SendDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.SendDataRequest)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // required int32 sender_site = 2;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sender_site(), target);
  }

  // repeated int32 dep_id = 3 [packed = true];
  if (this->dep_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dep_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dep_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->dep_id(i), target);
  }

  // repeated bytes data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.SendDataRequest)
  return target;
}

int SendDataRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_sender_site()) {
    // required int32 sender_site = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  return total_size;
}
int SendDataRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required int32 sender_site = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 dep_id = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->dep_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dep_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dep_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bytes data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SendDataRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SendDataRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendDataRequest::MergeFrom(const SendDataRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  dep_id_.MergeFrom(from.dep_id_);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SendDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendDataRequest::CopyFrom(const SendDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SendDataRequest::Swap(SendDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendDataRequest::InternalSwap(SendDataRequest* other) {
  std::swap(transaction_id_, other->transaction_id_);
  std::swap(sender_site_, other->sender_site_);
  dep_id_.UnsafeArenaSwap(&other->dep_id_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendDataRequest_descriptor_;
  metadata.reflection = SendDataRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendDataRequest

// required int64 transaction_id = 1;
bool SendDataRequest::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SendDataRequest::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SendDataRequest::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SendDataRequest::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
 ::google::protobuf::int64 SendDataRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.SendDataRequest.transaction_id)
  return transaction_id_;
}
 void SendDataRequest::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.SendDataRequest.transaction_id)
}

// required int32 sender_site = 2;
bool SendDataRequest::has_sender_site() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SendDataRequest::set_has_sender_site() {
  _has_bits_[0] |= 0x00000002u;
}
void SendDataRequest::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000002u;
}
void SendDataRequest::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
 ::google::protobuf::int32 SendDataRequest::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.message.SendDataRequest.sender_site)
  return sender_site_;
}
 void SendDataRequest::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.SendDataRequest.sender_site)
}

// repeated int32 dep_id = 3 [packed = true];
int SendDataRequest::dep_id_size() const {
  return dep_id_.size();
}
void SendDataRequest::clear_dep_id() {
  dep_id_.Clear();
}
 ::google::protobuf::int32 SendDataRequest::dep_id(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.SendDataRequest.dep_id)
  return dep_id_.Get(index);
}
 void SendDataRequest::set_dep_id(int index, ::google::protobuf::int32 value) {
  dep_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.SendDataRequest.dep_id)
}
 void SendDataRequest::add_dep_id(::google::protobuf::int32 value) {
  dep_id_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.SendDataRequest.dep_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SendDataRequest::dep_id() const {
  // @@protoc_insertion_point(field_list:peloton.message.SendDataRequest.dep_id)
  return dep_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SendDataRequest::mutable_dep_id() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.SendDataRequest.dep_id)
  return &dep_id_;
}

// repeated bytes data = 4;
int SendDataRequest::data_size() const {
  return data_.size();
}
void SendDataRequest::clear_data() {
  data_.Clear();
}
 const ::std::string& SendDataRequest::data(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.SendDataRequest.data)
  return data_.Get(index);
}
 ::std::string* SendDataRequest::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:peloton.message.SendDataRequest.data)
  return data_.Mutable(index);
}
 void SendDataRequest::set_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:peloton.message.SendDataRequest.data)
  data_.Mutable(index)->assign(value);
}
 void SendDataRequest::set_data(int index, const char* value) {
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:peloton.message.SendDataRequest.data)
}
 void SendDataRequest::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:peloton.message.SendDataRequest.data)
}
 ::std::string* SendDataRequest::add_data() {
  return data_.Add();
}
 void SendDataRequest::add_data(const ::std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:peloton.message.SendDataRequest.data)
}
 void SendDataRequest::add_data(const char* value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:peloton.message.SendDataRequest.data)
}
 void SendDataRequest::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:peloton.message.SendDataRequest.data)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SendDataRequest::data() const {
  // @@protoc_insertion_point(field_list:peloton.message.SendDataRequest.data)
  return data_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SendDataRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.SendDataRequest.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendDataResponse::kTransactionIdFieldNumber;
const int SendDataResponse::kPartitionsFieldNumber;
const int SendDataResponse::kSenderSiteFieldNumber;
const int SendDataResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendDataResponse::SendDataResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.SendDataResponse)
}

void SendDataResponse::InitAsDefaultInstance() {
}

SendDataResponse::SendDataResponse(const SendDataResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.SendDataResponse)
}

void SendDataResponse::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  sender_site_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendDataResponse::~SendDataResponse() {
  // @@protoc_insertion_point(destructor:peloton.message.SendDataResponse)
  SharedDtor();
}

void SendDataResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendDataResponse_descriptor_;
}

const SendDataResponse& SendDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

SendDataResponse* SendDataResponse::default_instance_ = NULL;

SendDataResponse* SendDataResponse::New(::google::protobuf::Arena* arena) const {
  SendDataResponse* n = new SendDataResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendDataResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SendDataResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 13u) {
    ZR_(sender_site_, status_);
    transaction_id_ = GOOGLE_LONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  partitions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SendDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.SendDataResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_partitions;
        break;
      }

      // repeated int32 partitions = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_partitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_partitions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sender_site;
        break;
      }

      // required int32 sender_site = 3;
      case 3: {
        if (tag == 24) {
         parse_sender_site:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required .peloton.message.Status status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::message::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::message::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.SendDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.SendDataResponse)
  return false;
#undef DO_
}

void SendDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.SendDataResponse)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_partitions_cached_byte_size_);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  // required int32 sender_site = 3;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sender_site(), output);
  }

  // required .peloton.message.Status status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.SendDataResponse)
}

::google::protobuf::uint8* SendDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.SendDataResponse)
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _partitions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->partitions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions(i), target);
  }

  // required int32 sender_site = 3;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sender_site(), target);
  }

  // required .peloton.message.Status status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.SendDataResponse)
  return target;
}

int SendDataResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_sender_site()) {
    // required int32 sender_site = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  if (has_status()) {
    // required .peloton.message.Status status = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
int SendDataResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required int32 sender_site = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

    // required .peloton.message.Status status = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 partitions = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->partitions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->partitions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SendDataResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SendDataResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendDataResponse::MergeFrom(const SendDataResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  partitions_.MergeFrom(from.partitions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SendDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendDataResponse::CopyFrom(const SendDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendDataResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void SendDataResponse::Swap(SendDataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendDataResponse::InternalSwap(SendDataResponse* other) {
  std::swap(transaction_id_, other->transaction_id_);
  partitions_.UnsafeArenaSwap(&other->partitions_);
  std::swap(sender_site_, other->sender_site_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendDataResponse_descriptor_;
  metadata.reflection = SendDataResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendDataResponse

// required int64 transaction_id = 1;
bool SendDataResponse::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SendDataResponse::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SendDataResponse::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SendDataResponse::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
 ::google::protobuf::int64 SendDataResponse::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.SendDataResponse.transaction_id)
  return transaction_id_;
}
 void SendDataResponse::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.SendDataResponse.transaction_id)
}

// repeated int32 partitions = 2 [packed = true];
int SendDataResponse::partitions_size() const {
  return partitions_.size();
}
void SendDataResponse::clear_partitions() {
  partitions_.Clear();
}
 ::google::protobuf::int32 SendDataResponse::partitions(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.SendDataResponse.partitions)
  return partitions_.Get(index);
}
 void SendDataResponse::set_partitions(int index, ::google::protobuf::int32 value) {
  partitions_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.SendDataResponse.partitions)
}
 void SendDataResponse::add_partitions(::google::protobuf::int32 value) {
  partitions_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.SendDataResponse.partitions)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SendDataResponse::partitions() const {
  // @@protoc_insertion_point(field_list:peloton.message.SendDataResponse.partitions)
  return partitions_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SendDataResponse::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.SendDataResponse.partitions)
  return &partitions_;
}

// required int32 sender_site = 3;
bool SendDataResponse::has_sender_site() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SendDataResponse::set_has_sender_site() {
  _has_bits_[0] |= 0x00000004u;
}
void SendDataResponse::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000004u;
}
void SendDataResponse::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
 ::google::protobuf::int32 SendDataResponse::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.message.SendDataResponse.sender_site)
  return sender_site_;
}
 void SendDataResponse::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.SendDataResponse.sender_site)
}

// required .peloton.message.Status status = 4;
bool SendDataResponse::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SendDataResponse::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
void SendDataResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void SendDataResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::peloton::message::Status SendDataResponse::status() const {
  // @@protoc_insertion_point(field_get:peloton.message.SendDataResponse.status)
  return static_cast< ::peloton::message::Status >(status_);
}
 void SendDataResponse::set_status(::peloton::message::Status value) {
  assert(::peloton::message::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.SendDataResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitializeRequest::kSenderSiteFieldNumber;
const int InitializeRequest::kInstanceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitializeRequest::InitializeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.InitializeRequest)
}

void InitializeRequest::InitAsDefaultInstance() {
}

InitializeRequest::InitializeRequest(const InitializeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.InitializeRequest)
}

void InitializeRequest::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  instance_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitializeRequest::~InitializeRequest() {
  // @@protoc_insertion_point(destructor:peloton.message.InitializeRequest)
  SharedDtor();
}

void InitializeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InitializeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitializeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitializeRequest_descriptor_;
}

const InitializeRequest& InitializeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

InitializeRequest* InitializeRequest::default_instance_ = NULL;

InitializeRequest* InitializeRequest::New(::google::protobuf::Arena* arena) const {
  InitializeRequest* n = new InitializeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitializeRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InitializeRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(instance_id_, sender_site_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InitializeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.InitializeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_instance_id;
        break;
      }

      // required int64 instance_id = 2;
      case 2: {
        if (tag == 16) {
         parse_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.InitializeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.InitializeRequest)
  return false;
#undef DO_
}

void InitializeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.InitializeRequest)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required int64 instance_id = 2;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->instance_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.InitializeRequest)
}

::google::protobuf::uint8* InitializeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.InitializeRequest)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required int64 instance_id = 2;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->instance_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.InitializeRequest)
  return target;
}

int InitializeRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  if (has_instance_id()) {
    // required int64 instance_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->instance_id());
  }

  return total_size;
}
int InitializeRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

    // required int64 instance_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->instance_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitializeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InitializeRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InitializeRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitializeRequest::MergeFrom(const InitializeRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InitializeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitializeRequest::CopyFrom(const InitializeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InitializeRequest::Swap(InitializeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitializeRequest::InternalSwap(InitializeRequest* other) {
  std::swap(sender_site_, other->sender_site_);
  std::swap(instance_id_, other->instance_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitializeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitializeRequest_descriptor_;
  metadata.reflection = InitializeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitializeRequest

// required int32 sender_site = 1;
bool InitializeRequest::has_sender_site() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InitializeRequest::set_has_sender_site() {
  _has_bits_[0] |= 0x00000001u;
}
void InitializeRequest::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000001u;
}
void InitializeRequest::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
 ::google::protobuf::int32 InitializeRequest::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.message.InitializeRequest.sender_site)
  return sender_site_;
}
 void InitializeRequest::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.InitializeRequest.sender_site)
}

// required int64 instance_id = 2;
bool InitializeRequest::has_instance_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InitializeRequest::set_has_instance_id() {
  _has_bits_[0] |= 0x00000002u;
}
void InitializeRequest::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void InitializeRequest::clear_instance_id() {
  instance_id_ = GOOGLE_LONGLONG(0);
  clear_has_instance_id();
}
 ::google::protobuf::int64 InitializeRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.InitializeRequest.instance_id)
  return instance_id_;
}
 void InitializeRequest::set_instance_id(::google::protobuf::int64 value) {
  set_has_instance_id();
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.InitializeRequest.instance_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitializeResponse::kSenderSiteFieldNumber;
const int InitializeResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitializeResponse::InitializeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.InitializeResponse)
}

void InitializeResponse::InitAsDefaultInstance() {
}

InitializeResponse::InitializeResponse(const InitializeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.InitializeResponse)
}

void InitializeResponse::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitializeResponse::~InitializeResponse() {
  // @@protoc_insertion_point(destructor:peloton.message.InitializeResponse)
  SharedDtor();
}

void InitializeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InitializeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitializeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitializeResponse_descriptor_;
}

const InitializeResponse& InitializeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

InitializeResponse* InitializeResponse::default_instance_ = NULL;

InitializeResponse* InitializeResponse::New(::google::protobuf::Arena* arena) const {
  InitializeResponse* n = new InitializeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitializeResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InitializeResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sender_site_, status_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InitializeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.InitializeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .peloton.message.Status status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::message::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::message::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.InitializeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.InitializeResponse)
  return false;
#undef DO_
}

void InitializeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.InitializeResponse)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required .peloton.message.Status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.InitializeResponse)
}

::google::protobuf::uint8* InitializeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.InitializeResponse)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required .peloton.message.Status status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.InitializeResponse)
  return target;
}

int InitializeResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  if (has_status()) {
    // required .peloton.message.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
int InitializeResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

    // required .peloton.message.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitializeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InitializeResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InitializeResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitializeResponse::MergeFrom(const InitializeResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InitializeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitializeResponse::CopyFrom(const InitializeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InitializeResponse::Swap(InitializeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitializeResponse::InternalSwap(InitializeResponse* other) {
  std::swap(sender_site_, other->sender_site_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitializeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitializeResponse_descriptor_;
  metadata.reflection = InitializeResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitializeResponse

// required int32 sender_site = 1;
bool InitializeResponse::has_sender_site() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InitializeResponse::set_has_sender_site() {
  _has_bits_[0] |= 0x00000001u;
}
void InitializeResponse::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000001u;
}
void InitializeResponse::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
 ::google::protobuf::int32 InitializeResponse::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.message.InitializeResponse.sender_site)
  return sender_site_;
}
 void InitializeResponse::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.InitializeResponse.sender_site)
}

// required .peloton.message.Status status = 2;
bool InitializeResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InitializeResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void InitializeResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void InitializeResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::peloton::message::Status InitializeResponse::status() const {
  // @@protoc_insertion_point(field_get:peloton.message.InitializeResponse.status)
  return static_cast< ::peloton::message::Status >(status_);
}
 void InitializeResponse::set_status(::peloton::message::Status value) {
  assert(::peloton::message::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.InitializeResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShutdownPrepareRequest::kSenderSiteFieldNumber;
const int ShutdownPrepareRequest::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShutdownPrepareRequest::ShutdownPrepareRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.ShutdownPrepareRequest)
}

void ShutdownPrepareRequest::InitAsDefaultInstance() {
}

ShutdownPrepareRequest::ShutdownPrepareRequest(const ShutdownPrepareRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.ShutdownPrepareRequest)
}

void ShutdownPrepareRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sender_site_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShutdownPrepareRequest::~ShutdownPrepareRequest() {
  // @@protoc_insertion_point(destructor:peloton.message.ShutdownPrepareRequest)
  SharedDtor();
}

void ShutdownPrepareRequest::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ShutdownPrepareRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownPrepareRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShutdownPrepareRequest_descriptor_;
}

const ShutdownPrepareRequest& ShutdownPrepareRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

ShutdownPrepareRequest* ShutdownPrepareRequest::default_instance_ = NULL;

ShutdownPrepareRequest* ShutdownPrepareRequest::New(::google::protobuf::Arena* arena) const {
  ShutdownPrepareRequest* n = new ShutdownPrepareRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShutdownPrepareRequest::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    sender_site_ = 0;
    if (has_error()) {
      error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ShutdownPrepareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.ShutdownPrepareRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional bytes error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.ShutdownPrepareRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.ShutdownPrepareRequest)
  return false;
#undef DO_
}

void ShutdownPrepareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.ShutdownPrepareRequest)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // optional bytes error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.ShutdownPrepareRequest)
}

::google::protobuf::uint8* ShutdownPrepareRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.ShutdownPrepareRequest)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // optional bytes error = 2;
  if (has_error()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.ShutdownPrepareRequest)
  return target;
}

int ShutdownPrepareRequest::ByteSize() const {
  int total_size = 0;

  // required int32 sender_site = 1;
  if (has_sender_site()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }
  // optional bytes error = 2;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->error());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownPrepareRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ShutdownPrepareRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ShutdownPrepareRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShutdownPrepareRequest::MergeFrom(const ShutdownPrepareRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_error()) {
      set_has_error();
      error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ShutdownPrepareRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownPrepareRequest::CopyFrom(const ShutdownPrepareRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownPrepareRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ShutdownPrepareRequest::Swap(ShutdownPrepareRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShutdownPrepareRequest::InternalSwap(ShutdownPrepareRequest* other) {
  std::swap(sender_site_, other->sender_site_);
  error_.Swap(&other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShutdownPrepareRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShutdownPrepareRequest_descriptor_;
  metadata.reflection = ShutdownPrepareRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShutdownPrepareRequest

// required int32 sender_site = 1;
bool ShutdownPrepareRequest::has_sender_site() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShutdownPrepareRequest::set_has_sender_site() {
  _has_bits_[0] |= 0x00000001u;
}
void ShutdownPrepareRequest::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShutdownPrepareRequest::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
 ::google::protobuf::int32 ShutdownPrepareRequest::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.message.ShutdownPrepareRequest.sender_site)
  return sender_site_;
}
 void ShutdownPrepareRequest::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.ShutdownPrepareRequest.sender_site)
}

// optional bytes error = 2;
bool ShutdownPrepareRequest::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShutdownPrepareRequest::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
void ShutdownPrepareRequest::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShutdownPrepareRequest::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
 const ::std::string& ShutdownPrepareRequest::error() const {
  // @@protoc_insertion_point(field_get:peloton.message.ShutdownPrepareRequest.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ShutdownPrepareRequest::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.message.ShutdownPrepareRequest.error)
}
 void ShutdownPrepareRequest::set_error(const char* value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.message.ShutdownPrepareRequest.error)
}
 void ShutdownPrepareRequest::set_error(const void* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.message.ShutdownPrepareRequest.error)
}
 ::std::string* ShutdownPrepareRequest::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:peloton.message.ShutdownPrepareRequest.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ShutdownPrepareRequest::release_error() {
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ShutdownPrepareRequest::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:peloton.message.ShutdownPrepareRequest.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShutdownPrepareResponse::kSenderSiteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShutdownPrepareResponse::ShutdownPrepareResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.ShutdownPrepareResponse)
}

void ShutdownPrepareResponse::InitAsDefaultInstance() {
}

ShutdownPrepareResponse::ShutdownPrepareResponse(const ShutdownPrepareResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.ShutdownPrepareResponse)
}

void ShutdownPrepareResponse::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShutdownPrepareResponse::~ShutdownPrepareResponse() {
  // @@protoc_insertion_point(destructor:peloton.message.ShutdownPrepareResponse)
  SharedDtor();
}

void ShutdownPrepareResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShutdownPrepareResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownPrepareResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShutdownPrepareResponse_descriptor_;
}

const ShutdownPrepareResponse& ShutdownPrepareResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

ShutdownPrepareResponse* ShutdownPrepareResponse::default_instance_ = NULL;

ShutdownPrepareResponse* ShutdownPrepareResponse::New(::google::protobuf::Arena* arena) const {
  ShutdownPrepareResponse* n = new ShutdownPrepareResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShutdownPrepareResponse::Clear() {
  sender_site_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ShutdownPrepareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.ShutdownPrepareResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.ShutdownPrepareResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.ShutdownPrepareResponse)
  return false;
#undef DO_
}

void ShutdownPrepareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.ShutdownPrepareResponse)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.ShutdownPrepareResponse)
}

::google::protobuf::uint8* ShutdownPrepareResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.ShutdownPrepareResponse)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.ShutdownPrepareResponse)
  return target;
}

int ShutdownPrepareResponse::ByteSize() const {
  int total_size = 0;

  // required int32 sender_site = 1;
  if (has_sender_site()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownPrepareResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ShutdownPrepareResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ShutdownPrepareResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShutdownPrepareResponse::MergeFrom(const ShutdownPrepareResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ShutdownPrepareResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownPrepareResponse::CopyFrom(const ShutdownPrepareResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownPrepareResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ShutdownPrepareResponse::Swap(ShutdownPrepareResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShutdownPrepareResponse::InternalSwap(ShutdownPrepareResponse* other) {
  std::swap(sender_site_, other->sender_site_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShutdownPrepareResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShutdownPrepareResponse_descriptor_;
  metadata.reflection = ShutdownPrepareResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShutdownPrepareResponse

// required int32 sender_site = 1;
bool ShutdownPrepareResponse::has_sender_site() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShutdownPrepareResponse::set_has_sender_site() {
  _has_bits_[0] |= 0x00000001u;
}
void ShutdownPrepareResponse::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShutdownPrepareResponse::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
 ::google::protobuf::int32 ShutdownPrepareResponse::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.message.ShutdownPrepareResponse.sender_site)
  return sender_site_;
}
 void ShutdownPrepareResponse::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.ShutdownPrepareResponse.sender_site)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShutdownRequest::kSenderSiteFieldNumber;
const int ShutdownRequest::kExitStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShutdownRequest::ShutdownRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.ShutdownRequest)
}

void ShutdownRequest::InitAsDefaultInstance() {
}

ShutdownRequest::ShutdownRequest(const ShutdownRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.ShutdownRequest)
}

void ShutdownRequest::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  exit_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShutdownRequest::~ShutdownRequest() {
  // @@protoc_insertion_point(destructor:peloton.message.ShutdownRequest)
  SharedDtor();
}

void ShutdownRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShutdownRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShutdownRequest_descriptor_;
}

const ShutdownRequest& ShutdownRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

ShutdownRequest* ShutdownRequest::default_instance_ = NULL;

ShutdownRequest* ShutdownRequest::New(::google::protobuf::Arena* arena) const {
  ShutdownRequest* n = new ShutdownRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShutdownRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ShutdownRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sender_site_, exit_status_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ShutdownRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.ShutdownRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exit_status;
        break;
      }

      // required int32 exit_status = 2;
      case 2: {
        if (tag == 16) {
         parse_exit_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exit_status_)));
          set_has_exit_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.ShutdownRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.ShutdownRequest)
  return false;
#undef DO_
}

void ShutdownRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.ShutdownRequest)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required int32 exit_status = 2;
  if (has_exit_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exit_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.ShutdownRequest)
}

::google::protobuf::uint8* ShutdownRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.ShutdownRequest)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required int32 exit_status = 2;
  if (has_exit_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exit_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.ShutdownRequest)
  return target;
}

int ShutdownRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  if (has_exit_status()) {
    // required int32 exit_status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exit_status());
  }

  return total_size;
}
int ShutdownRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

    // required int32 exit_status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exit_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ShutdownRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ShutdownRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShutdownRequest::MergeFrom(const ShutdownRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_exit_status()) {
      set_exit_status(from.exit_status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ShutdownRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownRequest::CopyFrom(const ShutdownRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ShutdownRequest::Swap(ShutdownRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShutdownRequest::InternalSwap(ShutdownRequest* other) {
  std::swap(sender_site_, other->sender_site_);
  std::swap(exit_status_, other->exit_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShutdownRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShutdownRequest_descriptor_;
  metadata.reflection = ShutdownRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShutdownRequest

// required int32 sender_site = 1;
bool ShutdownRequest::has_sender_site() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShutdownRequest::set_has_sender_site() {
  _has_bits_[0] |= 0x00000001u;
}
void ShutdownRequest::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShutdownRequest::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
 ::google::protobuf::int32 ShutdownRequest::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.message.ShutdownRequest.sender_site)
  return sender_site_;
}
 void ShutdownRequest::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.ShutdownRequest.sender_site)
}

// required int32 exit_status = 2;
bool ShutdownRequest::has_exit_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShutdownRequest::set_has_exit_status() {
  _has_bits_[0] |= 0x00000002u;
}
void ShutdownRequest::clear_has_exit_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShutdownRequest::clear_exit_status() {
  exit_status_ = 0;
  clear_has_exit_status();
}
 ::google::protobuf::int32 ShutdownRequest::exit_status() const {
  // @@protoc_insertion_point(field_get:peloton.message.ShutdownRequest.exit_status)
  return exit_status_;
}
 void ShutdownRequest::set_exit_status(::google::protobuf::int32 value) {
  set_has_exit_status();
  exit_status_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.ShutdownRequest.exit_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShutdownResponse::kSenderSiteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShutdownResponse::ShutdownResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.ShutdownResponse)
}

void ShutdownResponse::InitAsDefaultInstance() {
}

ShutdownResponse::ShutdownResponse(const ShutdownResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.ShutdownResponse)
}

void ShutdownResponse::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShutdownResponse::~ShutdownResponse() {
  // @@protoc_insertion_point(destructor:peloton.message.ShutdownResponse)
  SharedDtor();
}

void ShutdownResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShutdownResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShutdownResponse_descriptor_;
}

const ShutdownResponse& ShutdownResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

ShutdownResponse* ShutdownResponse::default_instance_ = NULL;

ShutdownResponse* ShutdownResponse::New(::google::protobuf::Arena* arena) const {
  ShutdownResponse* n = new ShutdownResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShutdownResponse::Clear() {
  sender_site_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ShutdownResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.ShutdownResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.ShutdownResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.ShutdownResponse)
  return false;
#undef DO_
}

void ShutdownResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.ShutdownResponse)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.ShutdownResponse)
}

::google::protobuf::uint8* ShutdownResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.ShutdownResponse)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.ShutdownResponse)
  return target;
}

int ShutdownResponse::ByteSize() const {
  int total_size = 0;

  // required int32 sender_site = 1;
  if (has_sender_site()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ShutdownResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ShutdownResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShutdownResponse::MergeFrom(const ShutdownResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ShutdownResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownResponse::CopyFrom(const ShutdownResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ShutdownResponse::Swap(ShutdownResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShutdownResponse::InternalSwap(ShutdownResponse* other) {
  std::swap(sender_site_, other->sender_site_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShutdownResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShutdownResponse_descriptor_;
  metadata.reflection = ShutdownResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShutdownResponse

// required int32 sender_site = 1;
bool ShutdownResponse::has_sender_site() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShutdownResponse::set_has_sender_site() {
  _has_bits_[0] |= 0x00000001u;
}
void ShutdownResponse::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShutdownResponse::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
 ::google::protobuf::int32 ShutdownResponse::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.message.ShutdownResponse.sender_site)
  return sender_site_;
}
 void ShutdownResponse::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.ShutdownResponse.sender_site)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartbeatRequest::kSenderSiteFieldNumber;
const int HeartbeatRequest::kLastTransactionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartbeatRequest::HeartbeatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.HeartbeatRequest)
}

void HeartbeatRequest::InitAsDefaultInstance() {
}

HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.HeartbeatRequest)
}

void HeartbeatRequest::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  last_transaction_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartbeatRequest::~HeartbeatRequest() {
  // @@protoc_insertion_point(destructor:peloton.message.HeartbeatRequest)
  SharedDtor();
}

void HeartbeatRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartbeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartbeatRequest_descriptor_;
}

const HeartbeatRequest& HeartbeatRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

HeartbeatRequest* HeartbeatRequest::default_instance_ = NULL;

HeartbeatRequest* HeartbeatRequest::New(::google::protobuf::Arena* arena) const {
  HeartbeatRequest* n = new HeartbeatRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartbeatRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HeartbeatRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(last_transaction_id_, sender_site_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.HeartbeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_transaction_id;
        break;
      }

      // required int64 last_transaction_id = 2;
      case 2: {
        if (tag == 16) {
         parse_last_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_transaction_id_)));
          set_has_last_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.HeartbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.HeartbeatRequest)
  return false;
#undef DO_
}

void HeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.HeartbeatRequest)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required int64 last_transaction_id = 2;
  if (has_last_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_transaction_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.HeartbeatRequest)
}

::google::protobuf::uint8* HeartbeatRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.HeartbeatRequest)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required int64 last_transaction_id = 2;
  if (has_last_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_transaction_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.HeartbeatRequest)
  return target;
}

int HeartbeatRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  if (has_last_transaction_id()) {
    // required int64 last_transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_transaction_id());
  }

  return total_size;
}
int HeartbeatRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

    // required int64 last_transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_transaction_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeartbeatRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartbeatRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartbeatRequest::MergeFrom(const HeartbeatRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_last_transaction_id()) {
      set_last_transaction_id(from.last_transaction_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatRequest::CopyFrom(const HeartbeatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HeartbeatRequest::Swap(HeartbeatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartbeatRequest::InternalSwap(HeartbeatRequest* other) {
  std::swap(sender_site_, other->sender_site_);
  std::swap(last_transaction_id_, other->last_transaction_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartbeatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartbeatRequest_descriptor_;
  metadata.reflection = HeartbeatRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartbeatRequest

// required int32 sender_site = 1;
bool HeartbeatRequest::has_sender_site() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HeartbeatRequest::set_has_sender_site() {
  _has_bits_[0] |= 0x00000001u;
}
void HeartbeatRequest::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000001u;
}
void HeartbeatRequest::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
 ::google::protobuf::int32 HeartbeatRequest::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.message.HeartbeatRequest.sender_site)
  return sender_site_;
}
 void HeartbeatRequest::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.HeartbeatRequest.sender_site)
}

// required int64 last_transaction_id = 2;
bool HeartbeatRequest::has_last_transaction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HeartbeatRequest::set_has_last_transaction_id() {
  _has_bits_[0] |= 0x00000002u;
}
void HeartbeatRequest::clear_has_last_transaction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void HeartbeatRequest::clear_last_transaction_id() {
  last_transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_last_transaction_id();
}
 ::google::protobuf::int64 HeartbeatRequest::last_transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.HeartbeatRequest.last_transaction_id)
  return last_transaction_id_;
}
 void HeartbeatRequest::set_last_transaction_id(::google::protobuf::int64 value) {
  set_has_last_transaction_id();
  last_transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.HeartbeatRequest.last_transaction_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartbeatResponse::kSenderSiteFieldNumber;
const int HeartbeatResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartbeatResponse::HeartbeatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.HeartbeatResponse)
}

void HeartbeatResponse::InitAsDefaultInstance() {
}

HeartbeatResponse::HeartbeatResponse(const HeartbeatResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.HeartbeatResponse)
}

void HeartbeatResponse::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartbeatResponse::~HeartbeatResponse() {
  // @@protoc_insertion_point(destructor:peloton.message.HeartbeatResponse)
  SharedDtor();
}

void HeartbeatResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartbeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartbeatResponse_descriptor_;
}

const HeartbeatResponse& HeartbeatResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

HeartbeatResponse* HeartbeatResponse::default_instance_ = NULL;

HeartbeatResponse* HeartbeatResponse::New(::google::protobuf::Arena* arena) const {
  HeartbeatResponse* n = new HeartbeatResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartbeatResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HeartbeatResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sender_site_, status_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HeartbeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.HeartbeatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .peloton.message.Status status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::message::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::message::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.HeartbeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.HeartbeatResponse)
  return false;
#undef DO_
}

void HeartbeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.HeartbeatResponse)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required .peloton.message.Status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.HeartbeatResponse)
}

::google::protobuf::uint8* HeartbeatResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.HeartbeatResponse)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required .peloton.message.Status status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.HeartbeatResponse)
  return target;
}

int HeartbeatResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  if (has_status()) {
    // required .peloton.message.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
int HeartbeatResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

    // required .peloton.message.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeartbeatResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartbeatResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartbeatResponse::MergeFrom(const HeartbeatResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HeartbeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatResponse::CopyFrom(const HeartbeatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HeartbeatResponse::Swap(HeartbeatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartbeatResponse::InternalSwap(HeartbeatResponse* other) {
  std::swap(sender_site_, other->sender_site_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartbeatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartbeatResponse_descriptor_;
  metadata.reflection = HeartbeatResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartbeatResponse

// required int32 sender_site = 1;
bool HeartbeatResponse::has_sender_site() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HeartbeatResponse::set_has_sender_site() {
  _has_bits_[0] |= 0x00000001u;
}
void HeartbeatResponse::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000001u;
}
void HeartbeatResponse::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
 ::google::protobuf::int32 HeartbeatResponse::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.message.HeartbeatResponse.sender_site)
  return sender_site_;
}
 void HeartbeatResponse::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.HeartbeatResponse.sender_site)
}

// required .peloton.message.Status status = 2;
bool HeartbeatResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HeartbeatResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void HeartbeatResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void HeartbeatResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::peloton::message::Status HeartbeatResponse::status() const {
  // @@protoc_insertion_point(field_get:peloton.message.HeartbeatResponse.status)
  return static_cast< ::peloton::message::Status >(status_);
}
 void HeartbeatResponse::set_status(::peloton::message::Status value) {
  assert(::peloton::message::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.HeartbeatResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnevictDataRequest::kSenderSiteFieldNumber;
const int UnevictDataRequest::kTransactionIdFieldNumber;
const int UnevictDataRequest::kPartitionIdFieldNumber;
const int UnevictDataRequest::kTableIdFieldNumber;
const int UnevictDataRequest::kBlockIdsFieldNumber;
const int UnevictDataRequest::kTupleOffsetsFieldNumber;
const int UnevictDataRequest::kNewTransactionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnevictDataRequest::UnevictDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.UnevictDataRequest)
}

void UnevictDataRequest::InitAsDefaultInstance() {
}

UnevictDataRequest::UnevictDataRequest(const UnevictDataRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.UnevictDataRequest)
}

void UnevictDataRequest::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  partition_id_ = 0;
  table_id_ = 0;
  new_transaction_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnevictDataRequest::~UnevictDataRequest() {
  // @@protoc_insertion_point(destructor:peloton.message.UnevictDataRequest)
  SharedDtor();
}

void UnevictDataRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnevictDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnevictDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnevictDataRequest_descriptor_;
}

const UnevictDataRequest& UnevictDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

UnevictDataRequest* UnevictDataRequest::default_instance_ = NULL;

UnevictDataRequest* UnevictDataRequest::New(::google::protobuf::Arena* arena) const {
  UnevictDataRequest* n = new UnevictDataRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnevictDataRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UnevictDataRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 79u) {
    ZR_(transaction_id_, partition_id_);
    ZR_(new_transaction_id_, table_id_);
  }

#undef ZR_HELPER_
#undef ZR_

  block_ids_.Clear();
  tuple_offsets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UnevictDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.UnevictDataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_transaction_id;
        break;
      }

      // required int64 transaction_id = 2;
      case 2: {
        if (tag == 16) {
         parse_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_partition_id;
        break;
      }

      // required int32 partition_id = 3;
      case 3: {
        if (tag == 24) {
         parse_partition_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_id_)));
          set_has_partition_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_table_id;
        break;
      }

      // required int32 table_id = 4;
      case 4: {
        if (tag == 32) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_block_ids;
        break;
      }

      // repeated int32 block_ids = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_block_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_block_ids())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42, input, this->mutable_block_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_tuple_offsets;
        break;
      }

      // repeated int32 tuple_offsets = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_tuple_offsets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tuple_offsets())));
        } else if (tag == 48) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50, input, this->mutable_tuple_offsets())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_new_transaction_id;
        break;
      }

      // required int64 new_transaction_id = 7;
      case 7: {
        if (tag == 56) {
         parse_new_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_transaction_id_)));
          set_has_new_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.UnevictDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.UnevictDataRequest)
  return false;
#undef DO_
}

void UnevictDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.UnevictDataRequest)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->transaction_id(), output);
  }

  // required int32 partition_id = 3;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->partition_id(), output);
  }

  // required int32 table_id = 4;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->table_id(), output);
  }

  // repeated int32 block_ids = 5 [packed = true];
  if (this->block_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_block_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->block_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->block_ids(i), output);
  }

  // repeated int32 tuple_offsets = 6 [packed = true];
  if (this->tuple_offsets_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tuple_offsets_cached_byte_size_);
  }
  for (int i = 0; i < this->tuple_offsets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->tuple_offsets(i), output);
  }

  // required int64 new_transaction_id = 7;
  if (has_new_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->new_transaction_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.UnevictDataRequest)
}

::google::protobuf::uint8* UnevictDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.UnevictDataRequest)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required int64 transaction_id = 2;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->transaction_id(), target);
  }

  // required int32 partition_id = 3;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->partition_id(), target);
  }

  // required int32 table_id = 4;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->table_id(), target);
  }

  // repeated int32 block_ids = 5 [packed = true];
  if (this->block_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _block_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->block_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->block_ids(i), target);
  }

  // repeated int32 tuple_offsets = 6 [packed = true];
  if (this->tuple_offsets_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _tuple_offsets_cached_byte_size_, target);
  }
  for (int i = 0; i < this->tuple_offsets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->tuple_offsets(i), target);
  }

  // required int64 new_transaction_id = 7;
  if (has_new_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->new_transaction_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.UnevictDataRequest)
  return target;
}

int UnevictDataRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  if (has_transaction_id()) {
    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_partition_id()) {
    // required int32 partition_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partition_id());
  }

  if (has_table_id()) {
    // required int32 table_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->table_id());
  }

  if (has_new_transaction_id()) {
    // required int64 new_transaction_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->new_transaction_id());
  }

  return total_size;
}
int UnevictDataRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000004f) ^ 0x0000004f) == 0) {  // All required fields are present.
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required int32 partition_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partition_id());

    // required int32 table_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->table_id());

    // required int64 new_transaction_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->new_transaction_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 block_ids = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->block_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->block_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _block_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 tuple_offsets = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->tuple_offsets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tuple_offsets(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tuple_offsets_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnevictDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UnevictDataRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UnevictDataRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnevictDataRequest::MergeFrom(const UnevictDataRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  block_ids_.MergeFrom(from.block_ids_);
  tuple_offsets_.MergeFrom(from.tuple_offsets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_partition_id()) {
      set_partition_id(from.partition_id());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_new_transaction_id()) {
      set_new_transaction_id(from.new_transaction_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UnevictDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnevictDataRequest::CopyFrom(const UnevictDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnevictDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000004f) != 0x0000004f) return false;

  return true;
}

void UnevictDataRequest::Swap(UnevictDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnevictDataRequest::InternalSwap(UnevictDataRequest* other) {
  std::swap(sender_site_, other->sender_site_);
  std::swap(transaction_id_, other->transaction_id_);
  std::swap(partition_id_, other->partition_id_);
  std::swap(table_id_, other->table_id_);
  block_ids_.UnsafeArenaSwap(&other->block_ids_);
  tuple_offsets_.UnsafeArenaSwap(&other->tuple_offsets_);
  std::swap(new_transaction_id_, other->new_transaction_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnevictDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnevictDataRequest_descriptor_;
  metadata.reflection = UnevictDataRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnevictDataRequest

// required int32 sender_site = 1;
bool UnevictDataRequest::has_sender_site() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UnevictDataRequest::set_has_sender_site() {
  _has_bits_[0] |= 0x00000001u;
}
void UnevictDataRequest::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000001u;
}
void UnevictDataRequest::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
 ::google::protobuf::int32 UnevictDataRequest::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.message.UnevictDataRequest.sender_site)
  return sender_site_;
}
 void UnevictDataRequest::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.UnevictDataRequest.sender_site)
}

// required int64 transaction_id = 2;
bool UnevictDataRequest::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UnevictDataRequest::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000002u;
}
void UnevictDataRequest::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void UnevictDataRequest::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
 ::google::protobuf::int64 UnevictDataRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.UnevictDataRequest.transaction_id)
  return transaction_id_;
}
 void UnevictDataRequest::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.UnevictDataRequest.transaction_id)
}

// required int32 partition_id = 3;
bool UnevictDataRequest::has_partition_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UnevictDataRequest::set_has_partition_id() {
  _has_bits_[0] |= 0x00000004u;
}
void UnevictDataRequest::clear_has_partition_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void UnevictDataRequest::clear_partition_id() {
  partition_id_ = 0;
  clear_has_partition_id();
}
 ::google::protobuf::int32 UnevictDataRequest::partition_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.UnevictDataRequest.partition_id)
  return partition_id_;
}
 void UnevictDataRequest::set_partition_id(::google::protobuf::int32 value) {
  set_has_partition_id();
  partition_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.UnevictDataRequest.partition_id)
}

// required int32 table_id = 4;
bool UnevictDataRequest::has_table_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UnevictDataRequest::set_has_table_id() {
  _has_bits_[0] |= 0x00000008u;
}
void UnevictDataRequest::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void UnevictDataRequest::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
 ::google::protobuf::int32 UnevictDataRequest::table_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.UnevictDataRequest.table_id)
  return table_id_;
}
 void UnevictDataRequest::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.UnevictDataRequest.table_id)
}

// repeated int32 block_ids = 5 [packed = true];
int UnevictDataRequest::block_ids_size() const {
  return block_ids_.size();
}
void UnevictDataRequest::clear_block_ids() {
  block_ids_.Clear();
}
 ::google::protobuf::int32 UnevictDataRequest::block_ids(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.UnevictDataRequest.block_ids)
  return block_ids_.Get(index);
}
 void UnevictDataRequest::set_block_ids(int index, ::google::protobuf::int32 value) {
  block_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.UnevictDataRequest.block_ids)
}
 void UnevictDataRequest::add_block_ids(::google::protobuf::int32 value) {
  block_ids_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.UnevictDataRequest.block_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UnevictDataRequest::block_ids() const {
  // @@protoc_insertion_point(field_list:peloton.message.UnevictDataRequest.block_ids)
  return block_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UnevictDataRequest::mutable_block_ids() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.UnevictDataRequest.block_ids)
  return &block_ids_;
}

// repeated int32 tuple_offsets = 6 [packed = true];
int UnevictDataRequest::tuple_offsets_size() const {
  return tuple_offsets_.size();
}
void UnevictDataRequest::clear_tuple_offsets() {
  tuple_offsets_.Clear();
}
 ::google::protobuf::int32 UnevictDataRequest::tuple_offsets(int index) const {
  // @@protoc_insertion_point(field_get:peloton.message.UnevictDataRequest.tuple_offsets)
  return tuple_offsets_.Get(index);
}
 void UnevictDataRequest::set_tuple_offsets(int index, ::google::protobuf::int32 value) {
  tuple_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.message.UnevictDataRequest.tuple_offsets)
}
 void UnevictDataRequest::add_tuple_offsets(::google::protobuf::int32 value) {
  tuple_offsets_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.message.UnevictDataRequest.tuple_offsets)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UnevictDataRequest::tuple_offsets() const {
  // @@protoc_insertion_point(field_list:peloton.message.UnevictDataRequest.tuple_offsets)
  return tuple_offsets_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UnevictDataRequest::mutable_tuple_offsets() {
  // @@protoc_insertion_point(field_mutable_list:peloton.message.UnevictDataRequest.tuple_offsets)
  return &tuple_offsets_;
}

// required int64 new_transaction_id = 7;
bool UnevictDataRequest::has_new_transaction_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UnevictDataRequest::set_has_new_transaction_id() {
  _has_bits_[0] |= 0x00000040u;
}
void UnevictDataRequest::clear_has_new_transaction_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void UnevictDataRequest::clear_new_transaction_id() {
  new_transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_new_transaction_id();
}
 ::google::protobuf::int64 UnevictDataRequest::new_transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.UnevictDataRequest.new_transaction_id)
  return new_transaction_id_;
}
 void UnevictDataRequest::set_new_transaction_id(::google::protobuf::int64 value) {
  set_has_new_transaction_id();
  new_transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.UnevictDataRequest.new_transaction_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnevictDataResponse::kSenderSiteFieldNumber;
const int UnevictDataResponse::kStatusFieldNumber;
const int UnevictDataResponse::kTransactionIdFieldNumber;
const int UnevictDataResponse::kPartitionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnevictDataResponse::UnevictDataResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.UnevictDataResponse)
}

void UnevictDataResponse::InitAsDefaultInstance() {
}

UnevictDataResponse::UnevictDataResponse(const UnevictDataResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.UnevictDataResponse)
}

void UnevictDataResponse::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  status_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
  partition_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnevictDataResponse::~UnevictDataResponse() {
  // @@protoc_insertion_point(destructor:peloton.message.UnevictDataResponse)
  SharedDtor();
}

void UnevictDataResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnevictDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnevictDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnevictDataResponse_descriptor_;
}

const UnevictDataResponse& UnevictDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

UnevictDataResponse* UnevictDataResponse::default_instance_ = NULL;

UnevictDataResponse* UnevictDataResponse::New(::google::protobuf::Arena* arena) const {
  UnevictDataResponse* n = new UnevictDataResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnevictDataResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UnevictDataResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sender_site_, partition_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UnevictDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.UnevictDataResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .peloton.message.Status status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::message::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::message::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_transaction_id;
        break;
      }

      // required int64 transaction_id = 3;
      case 3: {
        if (tag == 24) {
         parse_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_partition_id;
        break;
      }

      // required int32 partition_id = 4;
      case 4: {
        if (tag == 32) {
         parse_partition_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_id_)));
          set_has_partition_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.UnevictDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.UnevictDataResponse)
  return false;
#undef DO_
}

void UnevictDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.UnevictDataResponse)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required .peloton.message.Status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required int64 transaction_id = 3;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->transaction_id(), output);
  }

  // required int32 partition_id = 4;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->partition_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.UnevictDataResponse)
}

::google::protobuf::uint8* UnevictDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.UnevictDataResponse)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required .peloton.message.Status status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // required int64 transaction_id = 3;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->transaction_id(), target);
  }

  // required int32 partition_id = 4;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->partition_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.UnevictDataResponse)
  return target;
}

int UnevictDataResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  if (has_status()) {
    // required .peloton.message.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  if (has_transaction_id()) {
    // required int64 transaction_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_partition_id()) {
    // required int32 partition_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partition_id());
  }

  return total_size;
}
int UnevictDataResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

    // required .peloton.message.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

    // required int64 transaction_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required int32 partition_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partition_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnevictDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UnevictDataResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UnevictDataResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnevictDataResponse::MergeFrom(const UnevictDataResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_partition_id()) {
      set_partition_id(from.partition_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UnevictDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnevictDataResponse::CopyFrom(const UnevictDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnevictDataResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UnevictDataResponse::Swap(UnevictDataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnevictDataResponse::InternalSwap(UnevictDataResponse* other) {
  std::swap(sender_site_, other->sender_site_);
  std::swap(status_, other->status_);
  std::swap(transaction_id_, other->transaction_id_);
  std::swap(partition_id_, other->partition_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnevictDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnevictDataResponse_descriptor_;
  metadata.reflection = UnevictDataResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnevictDataResponse

// required int32 sender_site = 1;
bool UnevictDataResponse::has_sender_site() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UnevictDataResponse::set_has_sender_site() {
  _has_bits_[0] |= 0x00000001u;
}
void UnevictDataResponse::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000001u;
}
void UnevictDataResponse::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
 ::google::protobuf::int32 UnevictDataResponse::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.message.UnevictDataResponse.sender_site)
  return sender_site_;
}
 void UnevictDataResponse::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.UnevictDataResponse.sender_site)
}

// required .peloton.message.Status status = 2;
bool UnevictDataResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UnevictDataResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void UnevictDataResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void UnevictDataResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::peloton::message::Status UnevictDataResponse::status() const {
  // @@protoc_insertion_point(field_get:peloton.message.UnevictDataResponse.status)
  return static_cast< ::peloton::message::Status >(status_);
}
 void UnevictDataResponse::set_status(::peloton::message::Status value) {
  assert(::peloton::message::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.UnevictDataResponse.status)
}

// required int64 transaction_id = 3;
bool UnevictDataResponse::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UnevictDataResponse::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000004u;
}
void UnevictDataResponse::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void UnevictDataResponse::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
 ::google::protobuf::int64 UnevictDataResponse::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.UnevictDataResponse.transaction_id)
  return transaction_id_;
}
 void UnevictDataResponse::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.UnevictDataResponse.transaction_id)
}

// required int32 partition_id = 4;
bool UnevictDataResponse::has_partition_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UnevictDataResponse::set_has_partition_id() {
  _has_bits_[0] |= 0x00000008u;
}
void UnevictDataResponse::clear_has_partition_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void UnevictDataResponse::clear_partition_id() {
  partition_id_ = 0;
  clear_has_partition_id();
}
 ::google::protobuf::int32 UnevictDataResponse::partition_id() const {
  // @@protoc_insertion_point(field_get:peloton.message.UnevictDataResponse.partition_id)
  return partition_id_;
}
 void UnevictDataResponse::set_partition_id(::google::protobuf::int32 value) {
  set_has_partition_id();
  partition_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.UnevictDataResponse.partition_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeSyncRequest::kSenderSiteFieldNumber;
const int TimeSyncRequest::kT0SFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeSyncRequest::TimeSyncRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.TimeSyncRequest)
}

void TimeSyncRequest::InitAsDefaultInstance() {
}

TimeSyncRequest::TimeSyncRequest(const TimeSyncRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.TimeSyncRequest)
}

void TimeSyncRequest::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  t0_s_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeSyncRequest::~TimeSyncRequest() {
  // @@protoc_insertion_point(destructor:peloton.message.TimeSyncRequest)
  SharedDtor();
}

void TimeSyncRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeSyncRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSyncRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeSyncRequest_descriptor_;
}

const TimeSyncRequest& TimeSyncRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TimeSyncRequest* TimeSyncRequest::default_instance_ = NULL;

TimeSyncRequest* TimeSyncRequest::New(::google::protobuf::Arena* arena) const {
  TimeSyncRequest* n = new TimeSyncRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeSyncRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TimeSyncRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(t0_s_, sender_site_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TimeSyncRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.TimeSyncRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_t0_s;
        break;
      }

      // required int64 t0_s = 2;
      case 2: {
        if (tag == 16) {
         parse_t0_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t0_s_)));
          set_has_t0_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.TimeSyncRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.TimeSyncRequest)
  return false;
#undef DO_
}

void TimeSyncRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.TimeSyncRequest)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required int64 t0_s = 2;
  if (has_t0_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->t0_s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.TimeSyncRequest)
}

::google::protobuf::uint8* TimeSyncRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.TimeSyncRequest)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required int64 t0_s = 2;
  if (has_t0_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->t0_s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.TimeSyncRequest)
  return target;
}

int TimeSyncRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  if (has_t0_s()) {
    // required int64 t0_s = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->t0_s());
  }

  return total_size;
}
int TimeSyncRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

    // required int64 t0_s = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->t0_s());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSyncRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TimeSyncRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeSyncRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeSyncRequest::MergeFrom(const TimeSyncRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_t0_s()) {
      set_t0_s(from.t0_s());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TimeSyncRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSyncRequest::CopyFrom(const TimeSyncRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSyncRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TimeSyncRequest::Swap(TimeSyncRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeSyncRequest::InternalSwap(TimeSyncRequest* other) {
  std::swap(sender_site_, other->sender_site_);
  std::swap(t0_s_, other->t0_s_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeSyncRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeSyncRequest_descriptor_;
  metadata.reflection = TimeSyncRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeSyncRequest

// required int32 sender_site = 1;
bool TimeSyncRequest::has_sender_site() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimeSyncRequest::set_has_sender_site() {
  _has_bits_[0] |= 0x00000001u;
}
void TimeSyncRequest::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimeSyncRequest::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
 ::google::protobuf::int32 TimeSyncRequest::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.message.TimeSyncRequest.sender_site)
  return sender_site_;
}
 void TimeSyncRequest::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TimeSyncRequest.sender_site)
}

// required int64 t0_s = 2;
bool TimeSyncRequest::has_t0_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimeSyncRequest::set_has_t0_s() {
  _has_bits_[0] |= 0x00000002u;
}
void TimeSyncRequest::clear_has_t0_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void TimeSyncRequest::clear_t0_s() {
  t0_s_ = GOOGLE_LONGLONG(0);
  clear_has_t0_s();
}
 ::google::protobuf::int64 TimeSyncRequest::t0_s() const {
  // @@protoc_insertion_point(field_get:peloton.message.TimeSyncRequest.t0_s)
  return t0_s_;
}
 void TimeSyncRequest::set_t0_s(::google::protobuf::int64 value) {
  set_has_t0_s();
  t0_s_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TimeSyncRequest.t0_s)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeSyncResponse::kSenderSiteFieldNumber;
const int TimeSyncResponse::kT0SFieldNumber;
const int TimeSyncResponse::kT0RFieldNumber;
const int TimeSyncResponse::kT1SFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeSyncResponse::TimeSyncResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.TimeSyncResponse)
}

void TimeSyncResponse::InitAsDefaultInstance() {
}

TimeSyncResponse::TimeSyncResponse(const TimeSyncResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.TimeSyncResponse)
}

void TimeSyncResponse::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
  t0_s_ = GOOGLE_LONGLONG(0);
  t0_r_ = GOOGLE_LONGLONG(0);
  t1_s_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeSyncResponse::~TimeSyncResponse() {
  // @@protoc_insertion_point(destructor:peloton.message.TimeSyncResponse)
  SharedDtor();
}

void TimeSyncResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeSyncResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSyncResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeSyncResponse_descriptor_;
}

const TimeSyncResponse& TimeSyncResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

TimeSyncResponse* TimeSyncResponse::default_instance_ = NULL;

TimeSyncResponse* TimeSyncResponse::New(::google::protobuf::Arena* arena) const {
  TimeSyncResponse* n = new TimeSyncResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeSyncResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TimeSyncResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(t0_s_, sender_site_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TimeSyncResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.TimeSyncResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
          set_has_sender_site();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_t0_s;
        break;
      }

      // required int64 t0_s = 2;
      case 2: {
        if (tag == 16) {
         parse_t0_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t0_s_)));
          set_has_t0_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_t0_r;
        break;
      }

      // required int64 t0_r = 3;
      case 3: {
        if (tag == 24) {
         parse_t0_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t0_r_)));
          set_has_t0_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_t1_s;
        break;
      }

      // required int64 t1_s = 4;
      case 4: {
        if (tag == 32) {
         parse_t1_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t1_s_)));
          set_has_t1_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.TimeSyncResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.TimeSyncResponse)
  return false;
#undef DO_
}

void TimeSyncResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.TimeSyncResponse)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required int64 t0_s = 2;
  if (has_t0_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->t0_s(), output);
  }

  // required int64 t0_r = 3;
  if (has_t0_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->t0_r(), output);
  }

  // required int64 t1_s = 4;
  if (has_t1_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->t1_s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.TimeSyncResponse)
}

::google::protobuf::uint8* TimeSyncResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.TimeSyncResponse)
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required int64 t0_s = 2;
  if (has_t0_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->t0_s(), target);
  }

  // required int64 t0_r = 3;
  if (has_t0_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->t0_r(), target);
  }

  // required int64 t1_s = 4;
  if (has_t1_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->t1_s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.TimeSyncResponse)
  return target;
}

int TimeSyncResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  if (has_t0_s()) {
    // required int64 t0_s = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->t0_s());
  }

  if (has_t0_r()) {
    // required int64 t0_r = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->t0_r());
  }

  if (has_t1_s()) {
    // required int64 t1_s = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->t1_s());
  }

  return total_size;
}
int TimeSyncResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

    // required int64 t0_s = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->t0_s());

    // required int64 t0_r = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->t0_r());

    // required int64 t1_s = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->t1_s());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSyncResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TimeSyncResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeSyncResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeSyncResponse::MergeFrom(const TimeSyncResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_site()) {
      set_sender_site(from.sender_site());
    }
    if (from.has_t0_s()) {
      set_t0_s(from.t0_s());
    }
    if (from.has_t0_r()) {
      set_t0_r(from.t0_r());
    }
    if (from.has_t1_s()) {
      set_t1_s(from.t1_s());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TimeSyncResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSyncResponse::CopyFrom(const TimeSyncResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSyncResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TimeSyncResponse::Swap(TimeSyncResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeSyncResponse::InternalSwap(TimeSyncResponse* other) {
  std::swap(sender_site_, other->sender_site_);
  std::swap(t0_s_, other->t0_s_);
  std::swap(t0_r_, other->t0_r_);
  std::swap(t1_s_, other->t1_s_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeSyncResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeSyncResponse_descriptor_;
  metadata.reflection = TimeSyncResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeSyncResponse

// required int32 sender_site = 1;
bool TimeSyncResponse::has_sender_site() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimeSyncResponse::set_has_sender_site() {
  _has_bits_[0] |= 0x00000001u;
}
void TimeSyncResponse::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimeSyncResponse::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
 ::google::protobuf::int32 TimeSyncResponse::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.message.TimeSyncResponse.sender_site)
  return sender_site_;
}
 void TimeSyncResponse::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TimeSyncResponse.sender_site)
}

// required int64 t0_s = 2;
bool TimeSyncResponse::has_t0_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimeSyncResponse::set_has_t0_s() {
  _has_bits_[0] |= 0x00000002u;
}
void TimeSyncResponse::clear_has_t0_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void TimeSyncResponse::clear_t0_s() {
  t0_s_ = GOOGLE_LONGLONG(0);
  clear_has_t0_s();
}
 ::google::protobuf::int64 TimeSyncResponse::t0_s() const {
  // @@protoc_insertion_point(field_get:peloton.message.TimeSyncResponse.t0_s)
  return t0_s_;
}
 void TimeSyncResponse::set_t0_s(::google::protobuf::int64 value) {
  set_has_t0_s();
  t0_s_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TimeSyncResponse.t0_s)
}

// required int64 t0_r = 3;
bool TimeSyncResponse::has_t0_r() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TimeSyncResponse::set_has_t0_r() {
  _has_bits_[0] |= 0x00000004u;
}
void TimeSyncResponse::clear_has_t0_r() {
  _has_bits_[0] &= ~0x00000004u;
}
void TimeSyncResponse::clear_t0_r() {
  t0_r_ = GOOGLE_LONGLONG(0);
  clear_has_t0_r();
}
 ::google::protobuf::int64 TimeSyncResponse::t0_r() const {
  // @@protoc_insertion_point(field_get:peloton.message.TimeSyncResponse.t0_r)
  return t0_r_;
}
 void TimeSyncResponse::set_t0_r(::google::protobuf::int64 value) {
  set_has_t0_r();
  t0_r_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TimeSyncResponse.t0_r)
}

// required int64 t1_s = 4;
bool TimeSyncResponse::has_t1_s() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TimeSyncResponse::set_has_t1_s() {
  _has_bits_[0] |= 0x00000008u;
}
void TimeSyncResponse::clear_has_t1_s() {
  _has_bits_[0] &= ~0x00000008u;
}
void TimeSyncResponse::clear_t1_s() {
  t1_s_ = GOOGLE_LONGLONG(0);
  clear_has_t1_s();
}
 ::google::protobuf::int64 TimeSyncResponse::t1_s() const {
  // @@protoc_insertion_point(field_get:peloton.message.TimeSyncResponse.t1_s)
  return t1_s_;
}
 void TimeSyncResponse::set_t1_s(::google::protobuf::int64 value) {
  set_has_t1_s();
  t1_s_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.TimeSyncResponse.t1_s)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* PelotonMessage_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PelotonMessage_Type_descriptor_;
}
bool PelotonMessage_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PelotonMessage_Type PelotonMessage::WORK_FRAGMENT;
const PelotonMessage_Type PelotonMessage::WORK_RESULT;
const PelotonMessage_Type PelotonMessage::QUERY_ESTIMATE;
const PelotonMessage_Type PelotonMessage::TRANSACTION_INIT_REQUEST;
const PelotonMessage_Type PelotonMessage::TRANSACTION_INIT_RESPONSE;
const PelotonMessage_Type PelotonMessage::TRANSACTION_WORK_REQUEST;
const PelotonMessage_Type PelotonMessage::TRANSACTION_WORK_RESPONSE;
const PelotonMessage_Type PelotonMessage::TRANSACTION_PREFETCH_RESULT;
const PelotonMessage_Type PelotonMessage::TRANSACTION_PREFETCH_ACKNOWLEDGEMENT;
const PelotonMessage_Type PelotonMessage::TRANSACTION_MAP_REQUEST;
const PelotonMessage_Type PelotonMessage::TRANSACTION_MAP_RESPONSE;
const PelotonMessage_Type PelotonMessage::TRANSACTION_REDUCE_REQUEST;
const PelotonMessage_Type PelotonMessage::TRANSACTION_REDUCE_RESPONSE;
const PelotonMessage_Type PelotonMessage::TRANSACTION_PREPARE_REQUEST;
const PelotonMessage_Type PelotonMessage::TRANSACTION_PREPARE_RESPONSE;
const PelotonMessage_Type PelotonMessage::TRANSACTION_FINISH_REQUEST;
const PelotonMessage_Type PelotonMessage::TRANSACTION_FINISH_RESPONSE;
const PelotonMessage_Type PelotonMessage::TRANSACTION_REDIRECT_REQUEST;
const PelotonMessage_Type PelotonMessage::TRANSACTION_REDIRECT_RESPONSE;
const PelotonMessage_Type PelotonMessage::TRANSACTION_DEBUG_REQUEST;
const PelotonMessage_Type PelotonMessage::TRANSACTION_DEBUG_RESPONSE;
const PelotonMessage_Type PelotonMessage::SEND_DATA_REQUEST;
const PelotonMessage_Type PelotonMessage::SEND_DATA_RESPONSE;
const PelotonMessage_Type PelotonMessage::INITIALIZE_REQUEST;
const PelotonMessage_Type PelotonMessage::INITIALIZE_RESPONSE;
const PelotonMessage_Type PelotonMessage::SHUTDOWN_PREPARE_REQUEST;
const PelotonMessage_Type PelotonMessage::SHUTDOWN_PREPARE_RESPONSE;
const PelotonMessage_Type PelotonMessage::SHUTDOWN_REQUEST;
const PelotonMessage_Type PelotonMessage::SHUTDOWN_RESPONSE;
const PelotonMessage_Type PelotonMessage::HEARTBEAT_REQUEST;
const PelotonMessage_Type PelotonMessage::HEARTBEAT_RESPONSE;
const PelotonMessage_Type PelotonMessage::UNEVICT_DATA_REQUEST;
const PelotonMessage_Type PelotonMessage::UNEVICT_DATA_RESPONSE;
const PelotonMessage_Type PelotonMessage::TIME_SYNC_REQUEST;
const PelotonMessage_Type PelotonMessage::TIME_SYNC_RESPONSE;
const PelotonMessage_Type PelotonMessage::Type_MIN;
const PelotonMessage_Type PelotonMessage::Type_MAX;
const int PelotonMessage::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PelotonMessage::kTypeFieldNumber;
const int PelotonMessage::kWorkFragmentFieldNumber;
const int PelotonMessage::kWorkResultFieldNumber;
const int PelotonMessage::kQueryEstimateFieldNumber;
const int PelotonMessage::kTransactionInitRequestFieldNumber;
const int PelotonMessage::kTransactionInitResponseFieldNumber;
const int PelotonMessage::kTransactionWorkRequestFieldNumber;
const int PelotonMessage::kTransactionWorkResponseFieldNumber;
const int PelotonMessage::kTransactionPrefetchResultFieldNumber;
const int PelotonMessage::kTransactionPrefetchAcknowledgementFieldNumber;
const int PelotonMessage::kTransactionMapRequestFieldNumber;
const int PelotonMessage::kTransactionMapResponseFieldNumber;
const int PelotonMessage::kTransactionReduceRequestFieldNumber;
const int PelotonMessage::kTransactionReduceResponseFieldNumber;
const int PelotonMessage::kTransactionPrepareRequestFieldNumber;
const int PelotonMessage::kTransactionPrepareResponseFieldNumber;
const int PelotonMessage::kTransactionFinishRequestFieldNumber;
const int PelotonMessage::kTransactionFinishResponseFieldNumber;
const int PelotonMessage::kTransactionRedirectRequestFieldNumber;
const int PelotonMessage::kTransactionRedirectResponseFieldNumber;
const int PelotonMessage::kTransactionDebugRequestFieldNumber;
const int PelotonMessage::kTransactionDebugResponseFieldNumber;
const int PelotonMessage::kSendDataRequestFieldNumber;
const int PelotonMessage::kSendDataResponseFieldNumber;
const int PelotonMessage::kInitializeRequestFieldNumber;
const int PelotonMessage::kInitializeResponseFieldNumber;
const int PelotonMessage::kShutdownPrepareRequestFieldNumber;
const int PelotonMessage::kShutdownPrepareResponseFieldNumber;
const int PelotonMessage::kShutdownRequestFieldNumber;
const int PelotonMessage::kShutdownResponseFieldNumber;
const int PelotonMessage::kHeartbeatRequestFieldNumber;
const int PelotonMessage::kHeartbeatResponseFieldNumber;
const int PelotonMessage::kUnevictDataRequestFieldNumber;
const int PelotonMessage::kUnevictDataResponseFieldNumber;
const int PelotonMessage::kTimeSyncRequestFieldNumber;
const int PelotonMessage::kTimeSyncResponseFieldNumber;
const int PelotonMessage::kDstAddrFieldNumber;
const int PelotonMessage::kSrcAddrFieldNumber;
const int PelotonMessage::kDstAddr32FieldNumber;
const int PelotonMessage::kSrcAddr32FieldNumber;
const int PelotonMessage::kSocketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PelotonMessage::PelotonMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.message.PelotonMessage)
}

void PelotonMessage::InitAsDefaultInstance() {
  work_fragment_ = const_cast< ::peloton::message::WorkFragment*>(&::peloton::message::WorkFragment::default_instance());
  work_result_ = const_cast< ::peloton::message::WorkResult*>(&::peloton::message::WorkResult::default_instance());
  query_estimate_ = const_cast< ::peloton::message::QueryEstimate*>(&::peloton::message::QueryEstimate::default_instance());
  transaction_init_request_ = const_cast< ::peloton::message::TransactionInitRequest*>(&::peloton::message::TransactionInitRequest::default_instance());
  transaction_init_response_ = const_cast< ::peloton::message::TransactionInitResponse*>(&::peloton::message::TransactionInitResponse::default_instance());
  transaction_work_request_ = const_cast< ::peloton::message::TransactionWorkRequest*>(&::peloton::message::TransactionWorkRequest::default_instance());
  transaction_work_response_ = const_cast< ::peloton::message::TransactionWorkResponse*>(&::peloton::message::TransactionWorkResponse::default_instance());
  transaction_prefetch_result_ = const_cast< ::peloton::message::TransactionPrefetchResult*>(&::peloton::message::TransactionPrefetchResult::default_instance());
  transaction_prefetch_acknowledgement_ = const_cast< ::peloton::message::TransactionPrefetchAcknowledgement*>(&::peloton::message::TransactionPrefetchAcknowledgement::default_instance());
  transaction_map_request_ = const_cast< ::peloton::message::TransactionMapRequest*>(&::peloton::message::TransactionMapRequest::default_instance());
  transaction_map_response_ = const_cast< ::peloton::message::TransactionMapResponse*>(&::peloton::message::TransactionMapResponse::default_instance());
  transaction_reduce_request_ = const_cast< ::peloton::message::TransactionReduceRequest*>(&::peloton::message::TransactionReduceRequest::default_instance());
  transaction_reduce_response_ = const_cast< ::peloton::message::TransactionReduceResponse*>(&::peloton::message::TransactionReduceResponse::default_instance());
  transaction_prepare_request_ = const_cast< ::peloton::message::TransactionPrepareRequest*>(&::peloton::message::TransactionPrepareRequest::default_instance());
  transaction_prepare_response_ = const_cast< ::peloton::message::TransactionPrepareResponse*>(&::peloton::message::TransactionPrepareResponse::default_instance());
  transaction_finish_request_ = const_cast< ::peloton::message::TransactionFinishRequest*>(&::peloton::message::TransactionFinishRequest::default_instance());
  transaction_finish_response_ = const_cast< ::peloton::message::TransactionFinishResponse*>(&::peloton::message::TransactionFinishResponse::default_instance());
  transaction_redirect_request_ = const_cast< ::peloton::message::TransactionRedirectRequest*>(&::peloton::message::TransactionRedirectRequest::default_instance());
  transaction_redirect_response_ = const_cast< ::peloton::message::TransactionRedirectResponse*>(&::peloton::message::TransactionRedirectResponse::default_instance());
  transaction_debug_request_ = const_cast< ::peloton::message::TransactionDebugRequest*>(&::peloton::message::TransactionDebugRequest::default_instance());
  transaction_debug_response_ = const_cast< ::peloton::message::TransactionDebugResponse*>(&::peloton::message::TransactionDebugResponse::default_instance());
  send_data_request_ = const_cast< ::peloton::message::SendDataRequest*>(&::peloton::message::SendDataRequest::default_instance());
  send_data_response_ = const_cast< ::peloton::message::SendDataResponse*>(&::peloton::message::SendDataResponse::default_instance());
  initialize_request_ = const_cast< ::peloton::message::InitializeRequest*>(&::peloton::message::InitializeRequest::default_instance());
  initialize_response_ = const_cast< ::peloton::message::InitializeResponse*>(&::peloton::message::InitializeResponse::default_instance());
  shutdown_prepare_request_ = const_cast< ::peloton::message::ShutdownPrepareRequest*>(&::peloton::message::ShutdownPrepareRequest::default_instance());
  shutdown_prepare_response_ = const_cast< ::peloton::message::ShutdownPrepareResponse*>(&::peloton::message::ShutdownPrepareResponse::default_instance());
  shutdown_request_ = const_cast< ::peloton::message::ShutdownRequest*>(&::peloton::message::ShutdownRequest::default_instance());
  shutdown_response_ = const_cast< ::peloton::message::ShutdownResponse*>(&::peloton::message::ShutdownResponse::default_instance());
  heartbeat_request_ = const_cast< ::peloton::message::HeartbeatRequest*>(&::peloton::message::HeartbeatRequest::default_instance());
  heartbeat_response_ = const_cast< ::peloton::message::HeartbeatResponse*>(&::peloton::message::HeartbeatResponse::default_instance());
  unevict_data_request_ = const_cast< ::peloton::message::UnevictDataRequest*>(&::peloton::message::UnevictDataRequest::default_instance());
  unevict_data_response_ = const_cast< ::peloton::message::UnevictDataResponse*>(&::peloton::message::UnevictDataResponse::default_instance());
  time_sync_request_ = const_cast< ::peloton::message::TimeSyncRequest*>(&::peloton::message::TimeSyncRequest::default_instance());
  time_sync_response_ = const_cast< ::peloton::message::TimeSyncResponse*>(&::peloton::message::TimeSyncResponse::default_instance());
}

PelotonMessage::PelotonMessage(const PelotonMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:peloton.message.PelotonMessage)
}

void PelotonMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  work_fragment_ = NULL;
  work_result_ = NULL;
  query_estimate_ = NULL;
  transaction_init_request_ = NULL;
  transaction_init_response_ = NULL;
  transaction_work_request_ = NULL;
  transaction_work_response_ = NULL;
  transaction_prefetch_result_ = NULL;
  transaction_prefetch_acknowledgement_ = NULL;
  transaction_map_request_ = NULL;
  transaction_map_response_ = NULL;
  transaction_reduce_request_ = NULL;
  transaction_reduce_response_ = NULL;
  transaction_prepare_request_ = NULL;
  transaction_prepare_response_ = NULL;
  transaction_finish_request_ = NULL;
  transaction_finish_response_ = NULL;
  transaction_redirect_request_ = NULL;
  transaction_redirect_response_ = NULL;
  transaction_debug_request_ = NULL;
  transaction_debug_response_ = NULL;
  send_data_request_ = NULL;
  send_data_response_ = NULL;
  initialize_request_ = NULL;
  initialize_response_ = NULL;
  shutdown_prepare_request_ = NULL;
  shutdown_prepare_response_ = NULL;
  shutdown_request_ = NULL;
  shutdown_response_ = NULL;
  heartbeat_request_ = NULL;
  heartbeat_response_ = NULL;
  unevict_data_request_ = NULL;
  unevict_data_response_ = NULL;
  time_sync_request_ = NULL;
  time_sync_response_ = NULL;
  dst_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_addr_32_ = 0;
  src_addr_32_ = 0;
  socket_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PelotonMessage::~PelotonMessage() {
  // @@protoc_insertion_point(destructor:peloton.message.PelotonMessage)
  SharedDtor();
}

void PelotonMessage::SharedDtor() {
  dst_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete work_fragment_;
    delete work_result_;
    delete query_estimate_;
    delete transaction_init_request_;
    delete transaction_init_response_;
    delete transaction_work_request_;
    delete transaction_work_response_;
    delete transaction_prefetch_result_;
    delete transaction_prefetch_acknowledgement_;
    delete transaction_map_request_;
    delete transaction_map_response_;
    delete transaction_reduce_request_;
    delete transaction_reduce_response_;
    delete transaction_prepare_request_;
    delete transaction_prepare_response_;
    delete transaction_finish_request_;
    delete transaction_finish_response_;
    delete transaction_redirect_request_;
    delete transaction_redirect_response_;
    delete transaction_debug_request_;
    delete transaction_debug_response_;
    delete send_data_request_;
    delete send_data_response_;
    delete initialize_request_;
    delete initialize_response_;
    delete shutdown_prepare_request_;
    delete shutdown_prepare_response_;
    delete shutdown_request_;
    delete shutdown_response_;
    delete heartbeat_request_;
    delete heartbeat_response_;
    delete unevict_data_request_;
    delete unevict_data_response_;
    delete time_sync_request_;
    delete time_sync_response_;
  }
}

void PelotonMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PelotonMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PelotonMessage_descriptor_;
}

const PelotonMessage& PelotonMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abstract_5fservice_2eproto();
  return *default_instance_;
}

PelotonMessage* PelotonMessage::default_instance_ = NULL;

PelotonMessage* PelotonMessage::New(::google::protobuf::Arena* arena) const {
  PelotonMessage* n = new PelotonMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PelotonMessage::Clear() {
  if (_has_bits_[0 / 32] & 255u) {
    type_ = 1;
    if (has_work_fragment()) {
      if (work_fragment_ != NULL) work_fragment_->::peloton::message::WorkFragment::Clear();
    }
    if (has_work_result()) {
      if (work_result_ != NULL) work_result_->::peloton::message::WorkResult::Clear();
    }
    if (has_query_estimate()) {
      if (query_estimate_ != NULL) query_estimate_->::peloton::message::QueryEstimate::Clear();
    }
    if (has_transaction_init_request()) {
      if (transaction_init_request_ != NULL) transaction_init_request_->::peloton::message::TransactionInitRequest::Clear();
    }
    if (has_transaction_init_response()) {
      if (transaction_init_response_ != NULL) transaction_init_response_->::peloton::message::TransactionInitResponse::Clear();
    }
    if (has_transaction_work_request()) {
      if (transaction_work_request_ != NULL) transaction_work_request_->::peloton::message::TransactionWorkRequest::Clear();
    }
    if (has_transaction_work_response()) {
      if (transaction_work_response_ != NULL) transaction_work_response_->::peloton::message::TransactionWorkResponse::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_transaction_prefetch_result()) {
      if (transaction_prefetch_result_ != NULL) transaction_prefetch_result_->::peloton::message::TransactionPrefetchResult::Clear();
    }
    if (has_transaction_prefetch_acknowledgement()) {
      if (transaction_prefetch_acknowledgement_ != NULL) transaction_prefetch_acknowledgement_->::peloton::message::TransactionPrefetchAcknowledgement::Clear();
    }
    if (has_transaction_map_request()) {
      if (transaction_map_request_ != NULL) transaction_map_request_->::peloton::message::TransactionMapRequest::Clear();
    }
    if (has_transaction_map_response()) {
      if (transaction_map_response_ != NULL) transaction_map_response_->::peloton::message::TransactionMapResponse::Clear();
    }
    if (has_transaction_reduce_request()) {
      if (transaction_reduce_request_ != NULL) transaction_reduce_request_->::peloton::message::TransactionReduceRequest::Clear();
    }
    if (has_transaction_reduce_response()) {
      if (transaction_reduce_response_ != NULL) transaction_reduce_response_->::peloton::message::TransactionReduceResponse::Clear();
    }
    if (has_transaction_prepare_request()) {
      if (transaction_prepare_request_ != NULL) transaction_prepare_request_->::peloton::message::TransactionPrepareRequest::Clear();
    }
    if (has_transaction_prepare_response()) {
      if (transaction_prepare_response_ != NULL) transaction_prepare_response_->::peloton::message::TransactionPrepareResponse::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    if (has_transaction_finish_request()) {
      if (transaction_finish_request_ != NULL) transaction_finish_request_->::peloton::message::TransactionFinishRequest::Clear();
    }
    if (has_transaction_finish_response()) {
      if (transaction_finish_response_ != NULL) transaction_finish_response_->::peloton::message::TransactionFinishResponse::Clear();
    }
    if (has_transaction_redirect_request()) {
      if (transaction_redirect_request_ != NULL) transaction_redirect_request_->::peloton::message::TransactionRedirectRequest::Clear();
    }
    if (has_transaction_redirect_response()) {
      if (transaction_redirect_response_ != NULL) transaction_redirect_response_->::peloton::message::TransactionRedirectResponse::Clear();
    }
    if (has_transaction_debug_request()) {
      if (transaction_debug_request_ != NULL) transaction_debug_request_->::peloton::message::TransactionDebugRequest::Clear();
    }
    if (has_transaction_debug_response()) {
      if (transaction_debug_response_ != NULL) transaction_debug_response_->::peloton::message::TransactionDebugResponse::Clear();
    }
    if (has_send_data_request()) {
      if (send_data_request_ != NULL) send_data_request_->::peloton::message::SendDataRequest::Clear();
    }
    if (has_send_data_response()) {
      if (send_data_response_ != NULL) send_data_response_->::peloton::message::SendDataResponse::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    if (has_initialize_request()) {
      if (initialize_request_ != NULL) initialize_request_->::peloton::message::InitializeRequest::Clear();
    }
    if (has_initialize_response()) {
      if (initialize_response_ != NULL) initialize_response_->::peloton::message::InitializeResponse::Clear();
    }
    if (has_shutdown_prepare_request()) {
      if (shutdown_prepare_request_ != NULL) shutdown_prepare_request_->::peloton::message::ShutdownPrepareRequest::Clear();
    }
    if (has_shutdown_prepare_response()) {
      if (shutdown_prepare_response_ != NULL) shutdown_prepare_response_->::peloton::message::ShutdownPrepareResponse::Clear();
    }
    if (has_shutdown_request()) {
      if (shutdown_request_ != NULL) shutdown_request_->::peloton::message::ShutdownRequest::Clear();
    }
    if (has_shutdown_response()) {
      if (shutdown_response_ != NULL) shutdown_response_->::peloton::message::ShutdownResponse::Clear();
    }
    if (has_heartbeat_request()) {
      if (heartbeat_request_ != NULL) heartbeat_request_->::peloton::message::HeartbeatRequest::Clear();
    }
    if (has_heartbeat_response()) {
      if (heartbeat_response_ != NULL) heartbeat_response_->::peloton::message::HeartbeatResponse::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 255u) {
    if (has_unevict_data_request()) {
      if (unevict_data_request_ != NULL) unevict_data_request_->::peloton::message::UnevictDataRequest::Clear();
    }
    if (has_unevict_data_response()) {
      if (unevict_data_response_ != NULL) unevict_data_response_->::peloton::message::UnevictDataResponse::Clear();
    }
    if (has_time_sync_request()) {
      if (time_sync_request_ != NULL) time_sync_request_->::peloton::message::TimeSyncRequest::Clear();
    }
    if (has_time_sync_response()) {
      if (time_sync_response_ != NULL) time_sync_response_->::peloton::message::TimeSyncResponse::Clear();
    }
    if (has_dst_addr()) {
      dst_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_src_addr()) {
      src_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    dst_addr_32_ = 0;
    src_addr_32_ = 0;
  }
  socket_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PelotonMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.message.PelotonMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .peloton.message.PelotonMessage.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::message::PelotonMessage_Type_IsValid(value)) {
            set_type(static_cast< ::peloton::message::PelotonMessage_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_work_fragment;
        break;
      }

      // optional .peloton.message.WorkFragment work_fragment = 2;
      case 2: {
        if (tag == 18) {
         parse_work_fragment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_work_fragment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_work_result;
        break;
      }

      // optional .peloton.message.WorkResult work_result = 3;
      case 3: {
        if (tag == 26) {
         parse_work_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_work_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_query_estimate;
        break;
      }

      // optional .peloton.message.QueryEstimate query_estimate = 4;
      case 4: {
        if (tag == 34) {
         parse_query_estimate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query_estimate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_transaction_init_request;
        break;
      }

      // optional .peloton.message.TransactionInitRequest transaction_init_request = 5;
      case 5: {
        if (tag == 42) {
         parse_transaction_init_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_init_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_transaction_init_response;
        break;
      }

      // optional .peloton.message.TransactionInitResponse transaction_init_response = 6;
      case 6: {
        if (tag == 50) {
         parse_transaction_init_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_init_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_transaction_work_request;
        break;
      }

      // optional .peloton.message.TransactionWorkRequest transaction_work_request = 7;
      case 7: {
        if (tag == 58) {
         parse_transaction_work_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_work_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_transaction_work_response;
        break;
      }

      // optional .peloton.message.TransactionWorkResponse transaction_work_response = 8;
      case 8: {
        if (tag == 66) {
         parse_transaction_work_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_work_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_transaction_prefetch_result;
        break;
      }

      // optional .peloton.message.TransactionPrefetchResult transaction_prefetch_result = 9;
      case 9: {
        if (tag == 74) {
         parse_transaction_prefetch_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_prefetch_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_transaction_prefetch_acknowledgement;
        break;
      }

      // optional .peloton.message.TransactionPrefetchAcknowledgement transaction_prefetch_acknowledgement = 10;
      case 10: {
        if (tag == 82) {
         parse_transaction_prefetch_acknowledgement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_prefetch_acknowledgement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_transaction_map_request;
        break;
      }

      // optional .peloton.message.TransactionMapRequest transaction_map_request = 11;
      case 11: {
        if (tag == 90) {
         parse_transaction_map_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_map_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_transaction_map_response;
        break;
      }

      // optional .peloton.message.TransactionMapResponse transaction_map_response = 12;
      case 12: {
        if (tag == 98) {
         parse_transaction_map_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_map_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_transaction_reduce_request;
        break;
      }

      // optional .peloton.message.TransactionReduceRequest transaction_reduce_request = 13;
      case 13: {
        if (tag == 106) {
         parse_transaction_reduce_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_reduce_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_transaction_reduce_response;
        break;
      }

      // optional .peloton.message.TransactionReduceResponse transaction_reduce_response = 14;
      case 14: {
        if (tag == 114) {
         parse_transaction_reduce_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_reduce_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_transaction_prepare_request;
        break;
      }

      // optional .peloton.message.TransactionPrepareRequest transaction_prepare_request = 15;
      case 15: {
        if (tag == 122) {
         parse_transaction_prepare_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_prepare_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_transaction_prepare_response;
        break;
      }

      // optional .peloton.message.TransactionPrepareResponse transaction_prepare_response = 16;
      case 16: {
        if (tag == 130) {
         parse_transaction_prepare_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_prepare_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_transaction_finish_request;
        break;
      }

      // optional .peloton.message.TransactionFinishRequest transaction_finish_request = 17;
      case 17: {
        if (tag == 138) {
         parse_transaction_finish_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_finish_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_transaction_finish_response;
        break;
      }

      // optional .peloton.message.TransactionFinishResponse transaction_finish_response = 18;
      case 18: {
        if (tag == 146) {
         parse_transaction_finish_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_finish_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_transaction_redirect_request;
        break;
      }

      // optional .peloton.message.TransactionRedirectRequest transaction_redirect_request = 19;
      case 19: {
        if (tag == 154) {
         parse_transaction_redirect_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_redirect_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_transaction_redirect_response;
        break;
      }

      // optional .peloton.message.TransactionRedirectResponse transaction_redirect_response = 20;
      case 20: {
        if (tag == 162) {
         parse_transaction_redirect_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_redirect_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_transaction_debug_request;
        break;
      }

      // optional .peloton.message.TransactionDebugRequest transaction_debug_request = 21;
      case 21: {
        if (tag == 170) {
         parse_transaction_debug_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_debug_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_transaction_debug_response;
        break;
      }

      // optional .peloton.message.TransactionDebugResponse transaction_debug_response = 22;
      case 22: {
        if (tag == 178) {
         parse_transaction_debug_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_debug_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_send_data_request;
        break;
      }

      // optional .peloton.message.SendDataRequest send_data_request = 23;
      case 23: {
        if (tag == 186) {
         parse_send_data_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send_data_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_send_data_response;
        break;
      }

      // optional .peloton.message.SendDataResponse send_data_response = 24;
      case 24: {
        if (tag == 194) {
         parse_send_data_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send_data_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_initialize_request;
        break;
      }

      // optional .peloton.message.InitializeRequest initialize_request = 25;
      case 25: {
        if (tag == 202) {
         parse_initialize_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initialize_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_initialize_response;
        break;
      }

      // optional .peloton.message.InitializeResponse initialize_response = 26;
      case 26: {
        if (tag == 210) {
         parse_initialize_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initialize_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_shutdown_prepare_request;
        break;
      }

      // optional .peloton.message.ShutdownPrepareRequest shutdown_prepare_request = 27;
      case 27: {
        if (tag == 218) {
         parse_shutdown_prepare_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shutdown_prepare_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_shutdown_prepare_response;
        break;
      }

      // optional .peloton.message.ShutdownPrepareResponse shutdown_prepare_response = 28;
      case 28: {
        if (tag == 226) {
         parse_shutdown_prepare_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shutdown_prepare_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_shutdown_request;
        break;
      }

      // optional .peloton.message.ShutdownRequest shutdown_request = 29;
      case 29: {
        if (tag == 234) {
         parse_shutdown_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shutdown_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_shutdown_response;
        break;
      }

      // optional .peloton.message.ShutdownResponse shutdown_response = 30;
      case 30: {
        if (tag == 242) {
         parse_shutdown_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shutdown_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_heartbeat_request;
        break;
      }

      // optional .peloton.message.HeartbeatRequest heartbeat_request = 31;
      case 31: {
        if (tag == 250) {
         parse_heartbeat_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeat_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_heartbeat_response;
        break;
      }

      // optional .peloton.message.HeartbeatResponse heartbeat_response = 32;
      case 32: {
        if (tag == 258) {
         parse_heartbeat_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeat_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_unevict_data_request;
        break;
      }

      // optional .peloton.message.UnevictDataRequest unevict_data_request = 33;
      case 33: {
        if (tag == 266) {
         parse_unevict_data_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unevict_data_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_unevict_data_response;
        break;
      }

      // optional .peloton.message.UnevictDataResponse unevict_data_response = 34;
      case 34: {
        if (tag == 274) {
         parse_unevict_data_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unevict_data_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_time_sync_request;
        break;
      }

      // optional .peloton.message.TimeSyncRequest time_sync_request = 35;
      case 35: {
        if (tag == 282) {
         parse_time_sync_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_sync_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_time_sync_response;
        break;
      }

      // optional .peloton.message.TimeSyncResponse time_sync_response = 36;
      case 36: {
        if (tag == 290) {
         parse_time_sync_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_sync_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_dst_addr;
        break;
      }

      // optional string dst_addr = 37;
      case 37: {
        if (tag == 298) {
         parse_dst_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dst_addr().data(), this->dst_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peloton.message.PelotonMessage.dst_addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_src_addr;
        break;
      }

      // optional string src_addr = 38;
      case 38: {
        if (tag == 306) {
         parse_src_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src_addr().data(), this->src_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peloton.message.PelotonMessage.src_addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_dst_addr_32;
        break;
      }

      // optional int32 dst_addr_32 = 39;
      case 39: {
        if (tag == 312) {
         parse_dst_addr_32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_addr_32_)));
          set_has_dst_addr_32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_src_addr_32;
        break;
      }

      // optional int32 src_addr_32 = 40;
      case 40: {
        if (tag == 320) {
         parse_src_addr_32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_addr_32_)));
          set_has_src_addr_32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_socket;
        break;
      }

      // optional int32 socket = 41;
      case 41: {
        if (tag == 328) {
         parse_socket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &socket_)));
          set_has_socket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.message.PelotonMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.message.PelotonMessage)
  return false;
#undef DO_
}

void PelotonMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.message.PelotonMessage)
  // required .peloton.message.PelotonMessage.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .peloton.message.WorkFragment work_fragment = 2;
  if (has_work_fragment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->work_fragment_, output);
  }

  // optional .peloton.message.WorkResult work_result = 3;
  if (has_work_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->work_result_, output);
  }

  // optional .peloton.message.QueryEstimate query_estimate = 4;
  if (has_query_estimate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->query_estimate_, output);
  }

  // optional .peloton.message.TransactionInitRequest transaction_init_request = 5;
  if (has_transaction_init_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->transaction_init_request_, output);
  }

  // optional .peloton.message.TransactionInitResponse transaction_init_response = 6;
  if (has_transaction_init_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->transaction_init_response_, output);
  }

  // optional .peloton.message.TransactionWorkRequest transaction_work_request = 7;
  if (has_transaction_work_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->transaction_work_request_, output);
  }

  // optional .peloton.message.TransactionWorkResponse transaction_work_response = 8;
  if (has_transaction_work_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->transaction_work_response_, output);
  }

  // optional .peloton.message.TransactionPrefetchResult transaction_prefetch_result = 9;
  if (has_transaction_prefetch_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->transaction_prefetch_result_, output);
  }

  // optional .peloton.message.TransactionPrefetchAcknowledgement transaction_prefetch_acknowledgement = 10;
  if (has_transaction_prefetch_acknowledgement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->transaction_prefetch_acknowledgement_, output);
  }

  // optional .peloton.message.TransactionMapRequest transaction_map_request = 11;
  if (has_transaction_map_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->transaction_map_request_, output);
  }

  // optional .peloton.message.TransactionMapResponse transaction_map_response = 12;
  if (has_transaction_map_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->transaction_map_response_, output);
  }

  // optional .peloton.message.TransactionReduceRequest transaction_reduce_request = 13;
  if (has_transaction_reduce_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->transaction_reduce_request_, output);
  }

  // optional .peloton.message.TransactionReduceResponse transaction_reduce_response = 14;
  if (has_transaction_reduce_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->transaction_reduce_response_, output);
  }

  // optional .peloton.message.TransactionPrepareRequest transaction_prepare_request = 15;
  if (has_transaction_prepare_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->transaction_prepare_request_, output);
  }

  // optional .peloton.message.TransactionPrepareResponse transaction_prepare_response = 16;
  if (has_transaction_prepare_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->transaction_prepare_response_, output);
  }

  // optional .peloton.message.TransactionFinishRequest transaction_finish_request = 17;
  if (has_transaction_finish_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->transaction_finish_request_, output);
  }

  // optional .peloton.message.TransactionFinishResponse transaction_finish_response = 18;
  if (has_transaction_finish_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->transaction_finish_response_, output);
  }

  // optional .peloton.message.TransactionRedirectRequest transaction_redirect_request = 19;
  if (has_transaction_redirect_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->transaction_redirect_request_, output);
  }

  // optional .peloton.message.TransactionRedirectResponse transaction_redirect_response = 20;
  if (has_transaction_redirect_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->transaction_redirect_response_, output);
  }

  // optional .peloton.message.TransactionDebugRequest transaction_debug_request = 21;
  if (has_transaction_debug_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->transaction_debug_request_, output);
  }

  // optional .peloton.message.TransactionDebugResponse transaction_debug_response = 22;
  if (has_transaction_debug_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->transaction_debug_response_, output);
  }

  // optional .peloton.message.SendDataRequest send_data_request = 23;
  if (has_send_data_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->send_data_request_, output);
  }

  // optional .peloton.message.SendDataResponse send_data_response = 24;
  if (has_send_data_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->send_data_response_, output);
  }

  // optional .peloton.message.InitializeRequest initialize_request = 25;
  if (has_initialize_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->initialize_request_, output);
  }

  // optional .peloton.message.InitializeResponse initialize_response = 26;
  if (has_initialize_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->initialize_response_, output);
  }

  // optional .peloton.message.ShutdownPrepareRequest shutdown_prepare_request = 27;
  if (has_shutdown_prepare_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->shutdown_prepare_request_, output);
  }

  // optional .peloton.message.ShutdownPrepareResponse shutdown_prepare_response = 28;
  if (has_shutdown_prepare_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->shutdown_prepare_response_, output);
  }

  // optional .peloton.message.ShutdownRequest shutdown_request = 29;
  if (has_shutdown_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->shutdown_request_, output);
  }

  // optional .peloton.message.ShutdownResponse shutdown_response = 30;
  if (has_shutdown_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->shutdown_response_, output);
  }

  // optional .peloton.message.HeartbeatRequest heartbeat_request = 31;
  if (has_heartbeat_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->heartbeat_request_, output);
  }

  // optional .peloton.message.HeartbeatResponse heartbeat_response = 32;
  if (has_heartbeat_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, *this->heartbeat_response_, output);
  }

  // optional .peloton.message.UnevictDataRequest unevict_data_request = 33;
  if (has_unevict_data_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, *this->unevict_data_request_, output);
  }

  // optional .peloton.message.UnevictDataResponse unevict_data_response = 34;
  if (has_unevict_data_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *this->unevict_data_response_, output);
  }

  // optional .peloton.message.TimeSyncRequest time_sync_request = 35;
  if (has_time_sync_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, *this->time_sync_request_, output);
  }

  // optional .peloton.message.TimeSyncResponse time_sync_response = 36;
  if (has_time_sync_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, *this->time_sync_response_, output);
  }

  // optional string dst_addr = 37;
  if (has_dst_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dst_addr().data(), this->dst_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peloton.message.PelotonMessage.dst_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      37, this->dst_addr(), output);
  }

  // optional string src_addr = 38;
  if (has_src_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_addr().data(), this->src_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peloton.message.PelotonMessage.src_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      38, this->src_addr(), output);
  }

  // optional int32 dst_addr_32 = 39;
  if (has_dst_addr_32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->dst_addr_32(), output);
  }

  // optional int32 src_addr_32 = 40;
  if (has_src_addr_32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->src_addr_32(), output);
  }

  // optional int32 socket = 41;
  if (has_socket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->socket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.message.PelotonMessage)
}

::google::protobuf::uint8* PelotonMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:peloton.message.PelotonMessage)
  // required .peloton.message.PelotonMessage.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .peloton.message.WorkFragment work_fragment = 2;
  if (has_work_fragment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->work_fragment_, target);
  }

  // optional .peloton.message.WorkResult work_result = 3;
  if (has_work_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->work_result_, target);
  }

  // optional .peloton.message.QueryEstimate query_estimate = 4;
  if (has_query_estimate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->query_estimate_, target);
  }

  // optional .peloton.message.TransactionInitRequest transaction_init_request = 5;
  if (has_transaction_init_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->transaction_init_request_, target);
  }

  // optional .peloton.message.TransactionInitResponse transaction_init_response = 6;
  if (has_transaction_init_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->transaction_init_response_, target);
  }

  // optional .peloton.message.TransactionWorkRequest transaction_work_request = 7;
  if (has_transaction_work_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->transaction_work_request_, target);
  }

  // optional .peloton.message.TransactionWorkResponse transaction_work_response = 8;
  if (has_transaction_work_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->transaction_work_response_, target);
  }

  // optional .peloton.message.TransactionPrefetchResult transaction_prefetch_result = 9;
  if (has_transaction_prefetch_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->transaction_prefetch_result_, target);
  }

  // optional .peloton.message.TransactionPrefetchAcknowledgement transaction_prefetch_acknowledgement = 10;
  if (has_transaction_prefetch_acknowledgement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->transaction_prefetch_acknowledgement_, target);
  }

  // optional .peloton.message.TransactionMapRequest transaction_map_request = 11;
  if (has_transaction_map_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *this->transaction_map_request_, target);
  }

  // optional .peloton.message.TransactionMapResponse transaction_map_response = 12;
  if (has_transaction_map_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *this->transaction_map_response_, target);
  }

  // optional .peloton.message.TransactionReduceRequest transaction_reduce_request = 13;
  if (has_transaction_reduce_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, *this->transaction_reduce_request_, target);
  }

  // optional .peloton.message.TransactionReduceResponse transaction_reduce_response = 14;
  if (has_transaction_reduce_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, *this->transaction_reduce_response_, target);
  }

  // optional .peloton.message.TransactionPrepareRequest transaction_prepare_request = 15;
  if (has_transaction_prepare_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, *this->transaction_prepare_request_, target);
  }

  // optional .peloton.message.TransactionPrepareResponse transaction_prepare_response = 16;
  if (has_transaction_prepare_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, *this->transaction_prepare_response_, target);
  }

  // optional .peloton.message.TransactionFinishRequest transaction_finish_request = 17;
  if (has_transaction_finish_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, *this->transaction_finish_request_, target);
  }

  // optional .peloton.message.TransactionFinishResponse transaction_finish_response = 18;
  if (has_transaction_finish_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, *this->transaction_finish_response_, target);
  }

  // optional .peloton.message.TransactionRedirectRequest transaction_redirect_request = 19;
  if (has_transaction_redirect_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, *this->transaction_redirect_request_, target);
  }

  // optional .peloton.message.TransactionRedirectResponse transaction_redirect_response = 20;
  if (has_transaction_redirect_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, *this->transaction_redirect_response_, target);
  }

  // optional .peloton.message.TransactionDebugRequest transaction_debug_request = 21;
  if (has_transaction_debug_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, *this->transaction_debug_request_, target);
  }

  // optional .peloton.message.TransactionDebugResponse transaction_debug_response = 22;
  if (has_transaction_debug_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, *this->transaction_debug_response_, target);
  }

  // optional .peloton.message.SendDataRequest send_data_request = 23;
  if (has_send_data_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, *this->send_data_request_, target);
  }

  // optional .peloton.message.SendDataResponse send_data_response = 24;
  if (has_send_data_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, *this->send_data_response_, target);
  }

  // optional .peloton.message.InitializeRequest initialize_request = 25;
  if (has_initialize_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, *this->initialize_request_, target);
  }

  // optional .peloton.message.InitializeResponse initialize_response = 26;
  if (has_initialize_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, *this->initialize_response_, target);
  }

  // optional .peloton.message.ShutdownPrepareRequest shutdown_prepare_request = 27;
  if (has_shutdown_prepare_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, *this->shutdown_prepare_request_, target);
  }

  // optional .peloton.message.ShutdownPrepareResponse shutdown_prepare_response = 28;
  if (has_shutdown_prepare_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, *this->shutdown_prepare_response_, target);
  }

  // optional .peloton.message.ShutdownRequest shutdown_request = 29;
  if (has_shutdown_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, *this->shutdown_request_, target);
  }

  // optional .peloton.message.ShutdownResponse shutdown_response = 30;
  if (has_shutdown_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, *this->shutdown_response_, target);
  }

  // optional .peloton.message.HeartbeatRequest heartbeat_request = 31;
  if (has_heartbeat_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, *this->heartbeat_request_, target);
  }

  // optional .peloton.message.HeartbeatResponse heartbeat_response = 32;
  if (has_heartbeat_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, *this->heartbeat_response_, target);
  }

  // optional .peloton.message.UnevictDataRequest unevict_data_request = 33;
  if (has_unevict_data_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, *this->unevict_data_request_, target);
  }

  // optional .peloton.message.UnevictDataResponse unevict_data_response = 34;
  if (has_unevict_data_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, *this->unevict_data_response_, target);
  }

  // optional .peloton.message.TimeSyncRequest time_sync_request = 35;
  if (has_time_sync_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, *this->time_sync_request_, target);
  }

  // optional .peloton.message.TimeSyncResponse time_sync_response = 36;
  if (has_time_sync_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, *this->time_sync_response_, target);
  }

  // optional string dst_addr = 37;
  if (has_dst_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dst_addr().data(), this->dst_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peloton.message.PelotonMessage.dst_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->dst_addr(), target);
  }

  // optional string src_addr = 38;
  if (has_src_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_addr().data(), this->src_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peloton.message.PelotonMessage.src_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->src_addr(), target);
  }

  // optional int32 dst_addr_32 = 39;
  if (has_dst_addr_32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->dst_addr_32(), target);
  }

  // optional int32 src_addr_32 = 40;
  if (has_src_addr_32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->src_addr_32(), target);
  }

  // optional int32 socket = 41;
  if (has_socket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->socket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.message.PelotonMessage)
  return target;
}

int PelotonMessage::ByteSize() const {
  int total_size = 0;

  // required .peloton.message.PelotonMessage.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional .peloton.message.WorkFragment work_fragment = 2;
    if (has_work_fragment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->work_fragment_);
    }

    // optional .peloton.message.WorkResult work_result = 3;
    if (has_work_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->work_result_);
    }

    // optional .peloton.message.QueryEstimate query_estimate = 4;
    if (has_query_estimate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->query_estimate_);
    }

    // optional .peloton.message.TransactionInitRequest transaction_init_request = 5;
    if (has_transaction_init_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_init_request_);
    }

    // optional .peloton.message.TransactionInitResponse transaction_init_response = 6;
    if (has_transaction_init_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_init_response_);
    }

    // optional .peloton.message.TransactionWorkRequest transaction_work_request = 7;
    if (has_transaction_work_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_work_request_);
    }

    // optional .peloton.message.TransactionWorkResponse transaction_work_response = 8;
    if (has_transaction_work_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_work_response_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .peloton.message.TransactionPrefetchResult transaction_prefetch_result = 9;
    if (has_transaction_prefetch_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_prefetch_result_);
    }

    // optional .peloton.message.TransactionPrefetchAcknowledgement transaction_prefetch_acknowledgement = 10;
    if (has_transaction_prefetch_acknowledgement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_prefetch_acknowledgement_);
    }

    // optional .peloton.message.TransactionMapRequest transaction_map_request = 11;
    if (has_transaction_map_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_map_request_);
    }

    // optional .peloton.message.TransactionMapResponse transaction_map_response = 12;
    if (has_transaction_map_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_map_response_);
    }

    // optional .peloton.message.TransactionReduceRequest transaction_reduce_request = 13;
    if (has_transaction_reduce_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_reduce_request_);
    }

    // optional .peloton.message.TransactionReduceResponse transaction_reduce_response = 14;
    if (has_transaction_reduce_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_reduce_response_);
    }

    // optional .peloton.message.TransactionPrepareRequest transaction_prepare_request = 15;
    if (has_transaction_prepare_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_prepare_request_);
    }

    // optional .peloton.message.TransactionPrepareResponse transaction_prepare_response = 16;
    if (has_transaction_prepare_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_prepare_response_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .peloton.message.TransactionFinishRequest transaction_finish_request = 17;
    if (has_transaction_finish_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_finish_request_);
    }

    // optional .peloton.message.TransactionFinishResponse transaction_finish_response = 18;
    if (has_transaction_finish_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_finish_response_);
    }

    // optional .peloton.message.TransactionRedirectRequest transaction_redirect_request = 19;
    if (has_transaction_redirect_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_redirect_request_);
    }

    // optional .peloton.message.TransactionRedirectResponse transaction_redirect_response = 20;
    if (has_transaction_redirect_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_redirect_response_);
    }

    // optional .peloton.message.TransactionDebugRequest transaction_debug_request = 21;
    if (has_transaction_debug_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_debug_request_);
    }

    // optional .peloton.message.TransactionDebugResponse transaction_debug_response = 22;
    if (has_transaction_debug_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_debug_response_);
    }

    // optional .peloton.message.SendDataRequest send_data_request = 23;
    if (has_send_data_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->send_data_request_);
    }

    // optional .peloton.message.SendDataResponse send_data_response = 24;
    if (has_send_data_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->send_data_response_);
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .peloton.message.InitializeRequest initialize_request = 25;
    if (has_initialize_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->initialize_request_);
    }

    // optional .peloton.message.InitializeResponse initialize_response = 26;
    if (has_initialize_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->initialize_response_);
    }

    // optional .peloton.message.ShutdownPrepareRequest shutdown_prepare_request = 27;
    if (has_shutdown_prepare_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shutdown_prepare_request_);
    }

    // optional .peloton.message.ShutdownPrepareResponse shutdown_prepare_response = 28;
    if (has_shutdown_prepare_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shutdown_prepare_response_);
    }

    // optional .peloton.message.ShutdownRequest shutdown_request = 29;
    if (has_shutdown_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shutdown_request_);
    }

    // optional .peloton.message.ShutdownResponse shutdown_response = 30;
    if (has_shutdown_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shutdown_response_);
    }

    // optional .peloton.message.HeartbeatRequest heartbeat_request = 31;
    if (has_heartbeat_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->heartbeat_request_);
    }

    // optional .peloton.message.HeartbeatResponse heartbeat_response = 32;
    if (has_heartbeat_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->heartbeat_response_);
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional .peloton.message.UnevictDataRequest unevict_data_request = 33;
    if (has_unevict_data_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->unevict_data_request_);
    }

    // optional .peloton.message.UnevictDataResponse unevict_data_response = 34;
    if (has_unevict_data_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->unevict_data_response_);
    }

    // optional .peloton.message.TimeSyncRequest time_sync_request = 35;
    if (has_time_sync_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->time_sync_request_);
    }

    // optional .peloton.message.TimeSyncResponse time_sync_response = 36;
    if (has_time_sync_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->time_sync_response_);
    }

    // optional string dst_addr = 37;
    if (has_dst_addr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dst_addr());
    }

    // optional string src_addr = 38;
    if (has_src_addr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src_addr());
    }

    // optional int32 dst_addr_32 = 39;
    if (has_dst_addr_32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_addr_32());
    }

    // optional int32 src_addr_32 = 40;
    if (has_src_addr_32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_addr_32());
    }

  }
  // optional int32 socket = 41;
  if (has_socket()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->socket());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PelotonMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PelotonMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PelotonMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PelotonMessage::MergeFrom(const PelotonMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_work_fragment()) {
      mutable_work_fragment()->::peloton::message::WorkFragment::MergeFrom(from.work_fragment());
    }
    if (from.has_work_result()) {
      mutable_work_result()->::peloton::message::WorkResult::MergeFrom(from.work_result());
    }
    if (from.has_query_estimate()) {
      mutable_query_estimate()->::peloton::message::QueryEstimate::MergeFrom(from.query_estimate());
    }
    if (from.has_transaction_init_request()) {
      mutable_transaction_init_request()->::peloton::message::TransactionInitRequest::MergeFrom(from.transaction_init_request());
    }
    if (from.has_transaction_init_response()) {
      mutable_transaction_init_response()->::peloton::message::TransactionInitResponse::MergeFrom(from.transaction_init_response());
    }
    if (from.has_transaction_work_request()) {
      mutable_transaction_work_request()->::peloton::message::TransactionWorkRequest::MergeFrom(from.transaction_work_request());
    }
    if (from.has_transaction_work_response()) {
      mutable_transaction_work_response()->::peloton::message::TransactionWorkResponse::MergeFrom(from.transaction_work_response());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_transaction_prefetch_result()) {
      mutable_transaction_prefetch_result()->::peloton::message::TransactionPrefetchResult::MergeFrom(from.transaction_prefetch_result());
    }
    if (from.has_transaction_prefetch_acknowledgement()) {
      mutable_transaction_prefetch_acknowledgement()->::peloton::message::TransactionPrefetchAcknowledgement::MergeFrom(from.transaction_prefetch_acknowledgement());
    }
    if (from.has_transaction_map_request()) {
      mutable_transaction_map_request()->::peloton::message::TransactionMapRequest::MergeFrom(from.transaction_map_request());
    }
    if (from.has_transaction_map_response()) {
      mutable_transaction_map_response()->::peloton::message::TransactionMapResponse::MergeFrom(from.transaction_map_response());
    }
    if (from.has_transaction_reduce_request()) {
      mutable_transaction_reduce_request()->::peloton::message::TransactionReduceRequest::MergeFrom(from.transaction_reduce_request());
    }
    if (from.has_transaction_reduce_response()) {
      mutable_transaction_reduce_response()->::peloton::message::TransactionReduceResponse::MergeFrom(from.transaction_reduce_response());
    }
    if (from.has_transaction_prepare_request()) {
      mutable_transaction_prepare_request()->::peloton::message::TransactionPrepareRequest::MergeFrom(from.transaction_prepare_request());
    }
    if (from.has_transaction_prepare_response()) {
      mutable_transaction_prepare_response()->::peloton::message::TransactionPrepareResponse::MergeFrom(from.transaction_prepare_response());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_transaction_finish_request()) {
      mutable_transaction_finish_request()->::peloton::message::TransactionFinishRequest::MergeFrom(from.transaction_finish_request());
    }
    if (from.has_transaction_finish_response()) {
      mutable_transaction_finish_response()->::peloton::message::TransactionFinishResponse::MergeFrom(from.transaction_finish_response());
    }
    if (from.has_transaction_redirect_request()) {
      mutable_transaction_redirect_request()->::peloton::message::TransactionRedirectRequest::MergeFrom(from.transaction_redirect_request());
    }
    if (from.has_transaction_redirect_response()) {
      mutable_transaction_redirect_response()->::peloton::message::TransactionRedirectResponse::MergeFrom(from.transaction_redirect_response());
    }
    if (from.has_transaction_debug_request()) {
      mutable_transaction_debug_request()->::peloton::message::TransactionDebugRequest::MergeFrom(from.transaction_debug_request());
    }
    if (from.has_transaction_debug_response()) {
      mutable_transaction_debug_response()->::peloton::message::TransactionDebugResponse::MergeFrom(from.transaction_debug_response());
    }
    if (from.has_send_data_request()) {
      mutable_send_data_request()->::peloton::message::SendDataRequest::MergeFrom(from.send_data_request());
    }
    if (from.has_send_data_response()) {
      mutable_send_data_response()->::peloton::message::SendDataResponse::MergeFrom(from.send_data_response());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_initialize_request()) {
      mutable_initialize_request()->::peloton::message::InitializeRequest::MergeFrom(from.initialize_request());
    }
    if (from.has_initialize_response()) {
      mutable_initialize_response()->::peloton::message::InitializeResponse::MergeFrom(from.initialize_response());
    }
    if (from.has_shutdown_prepare_request()) {
      mutable_shutdown_prepare_request()->::peloton::message::ShutdownPrepareRequest::MergeFrom(from.shutdown_prepare_request());
    }
    if (from.has_shutdown_prepare_response()) {
      mutable_shutdown_prepare_response()->::peloton::message::ShutdownPrepareResponse::MergeFrom(from.shutdown_prepare_response());
    }
    if (from.has_shutdown_request()) {
      mutable_shutdown_request()->::peloton::message::ShutdownRequest::MergeFrom(from.shutdown_request());
    }
    if (from.has_shutdown_response()) {
      mutable_shutdown_response()->::peloton::message::ShutdownResponse::MergeFrom(from.shutdown_response());
    }
    if (from.has_heartbeat_request()) {
      mutable_heartbeat_request()->::peloton::message::HeartbeatRequest::MergeFrom(from.heartbeat_request());
    }
    if (from.has_heartbeat_response()) {
      mutable_heartbeat_response()->::peloton::message::HeartbeatResponse::MergeFrom(from.heartbeat_response());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_unevict_data_request()) {
      mutable_unevict_data_request()->::peloton::message::UnevictDataRequest::MergeFrom(from.unevict_data_request());
    }
    if (from.has_unevict_data_response()) {
      mutable_unevict_data_response()->::peloton::message::UnevictDataResponse::MergeFrom(from.unevict_data_response());
    }
    if (from.has_time_sync_request()) {
      mutable_time_sync_request()->::peloton::message::TimeSyncRequest::MergeFrom(from.time_sync_request());
    }
    if (from.has_time_sync_response()) {
      mutable_time_sync_response()->::peloton::message::TimeSyncResponse::MergeFrom(from.time_sync_response());
    }
    if (from.has_dst_addr()) {
      set_has_dst_addr();
      dst_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_addr_);
    }
    if (from.has_src_addr()) {
      set_has_src_addr();
      src_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_addr_);
    }
    if (from.has_dst_addr_32()) {
      set_dst_addr_32(from.dst_addr_32());
    }
    if (from.has_src_addr_32()) {
      set_src_addr_32(from.src_addr_32());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_socket()) {
      set_socket(from.socket());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PelotonMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PelotonMessage::CopyFrom(const PelotonMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PelotonMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_work_fragment()) {
    if (!this->work_fragment_->IsInitialized()) return false;
  }
  if (has_work_result()) {
    if (!this->work_result_->IsInitialized()) return false;
  }
  if (has_transaction_init_request()) {
    if (!this->transaction_init_request_->IsInitialized()) return false;
  }
  if (has_transaction_init_response()) {
    if (!this->transaction_init_response_->IsInitialized()) return false;
  }
  if (has_transaction_work_request()) {
    if (!this->transaction_work_request_->IsInitialized()) return false;
  }
  if (has_transaction_work_response()) {
    if (!this->transaction_work_response_->IsInitialized()) return false;
  }
  if (has_transaction_prefetch_result()) {
    if (!this->transaction_prefetch_result_->IsInitialized()) return false;
  }
  if (has_transaction_prefetch_acknowledgement()) {
    if (!this->transaction_prefetch_acknowledgement_->IsInitialized()) return false;
  }
  if (has_transaction_map_request()) {
    if (!this->transaction_map_request_->IsInitialized()) return false;
  }
  if (has_transaction_map_response()) {
    if (!this->transaction_map_response_->IsInitialized()) return false;
  }
  if (has_transaction_reduce_request()) {
    if (!this->transaction_reduce_request_->IsInitialized()) return false;
  }
  if (has_transaction_reduce_response()) {
    if (!this->transaction_reduce_response_->IsInitialized()) return false;
  }
  if (has_transaction_prepare_request()) {
    if (!this->transaction_prepare_request_->IsInitialized()) return false;
  }
  if (has_transaction_prepare_response()) {
    if (!this->transaction_prepare_response_->IsInitialized()) return false;
  }
  if (has_transaction_finish_request()) {
    if (!this->transaction_finish_request_->IsInitialized()) return false;
  }
  if (has_transaction_finish_response()) {
    if (!this->transaction_finish_response_->IsInitialized()) return false;
  }
  if (has_transaction_redirect_request()) {
    if (!this->transaction_redirect_request_->IsInitialized()) return false;
  }
  if (has_transaction_redirect_response()) {
    if (!this->transaction_redirect_response_->IsInitialized()) return false;
  }
  if (has_transaction_debug_request()) {
    if (!this->transaction_debug_request_->IsInitialized()) return false;
  }
  if (has_transaction_debug_response()) {
    if (!this->transaction_debug_response_->IsInitialized()) return false;
  }
  if (has_send_data_request()) {
    if (!this->send_data_request_->IsInitialized()) return false;
  }
  if (has_send_data_response()) {
    if (!this->send_data_response_->IsInitialized()) return false;
  }
  if (has_initialize_request()) {
    if (!this->initialize_request_->IsInitialized()) return false;
  }
  if (has_initialize_response()) {
    if (!this->initialize_response_->IsInitialized()) return false;
  }
  if (has_shutdown_prepare_request()) {
    if (!this->shutdown_prepare_request_->IsInitialized()) return false;
  }
  if (has_shutdown_prepare_response()) {
    if (!this->shutdown_prepare_response_->IsInitialized()) return false;
  }
  if (has_shutdown_request()) {
    if (!this->shutdown_request_->IsInitialized()) return false;
  }
  if (has_shutdown_response()) {
    if (!this->shutdown_response_->IsInitialized()) return false;
  }
  if (has_heartbeat_request()) {
    if (!this->heartbeat_request_->IsInitialized()) return false;
  }
  if (has_heartbeat_response()) {
    if (!this->heartbeat_response_->IsInitialized()) return false;
  }
  if (has_unevict_data_request()) {
    if (!this->unevict_data_request_->IsInitialized()) return false;
  }
  if (has_unevict_data_response()) {
    if (!this->unevict_data_response_->IsInitialized()) return false;
  }
  if (has_time_sync_request()) {
    if (!this->time_sync_request_->IsInitialized()) return false;
  }
  if (has_time_sync_response()) {
    if (!this->time_sync_response_->IsInitialized()) return false;
  }
  return true;
}

void PelotonMessage::Swap(PelotonMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PelotonMessage::InternalSwap(PelotonMessage* other) {
  std::swap(type_, other->type_);
  std::swap(work_fragment_, other->work_fragment_);
  std::swap(work_result_, other->work_result_);
  std::swap(query_estimate_, other->query_estimate_);
  std::swap(transaction_init_request_, other->transaction_init_request_);
  std::swap(transaction_init_response_, other->transaction_init_response_);
  std::swap(transaction_work_request_, other->transaction_work_request_);
  std::swap(transaction_work_response_, other->transaction_work_response_);
  std::swap(transaction_prefetch_result_, other->transaction_prefetch_result_);
  std::swap(transaction_prefetch_acknowledgement_, other->transaction_prefetch_acknowledgement_);
  std::swap(transaction_map_request_, other->transaction_map_request_);
  std::swap(transaction_map_response_, other->transaction_map_response_);
  std::swap(transaction_reduce_request_, other->transaction_reduce_request_);
  std::swap(transaction_reduce_response_, other->transaction_reduce_response_);
  std::swap(transaction_prepare_request_, other->transaction_prepare_request_);
  std::swap(transaction_prepare_response_, other->transaction_prepare_response_);
  std::swap(transaction_finish_request_, other->transaction_finish_request_);
  std::swap(transaction_finish_response_, other->transaction_finish_response_);
  std::swap(transaction_redirect_request_, other->transaction_redirect_request_);
  std::swap(transaction_redirect_response_, other->transaction_redirect_response_);
  std::swap(transaction_debug_request_, other->transaction_debug_request_);
  std::swap(transaction_debug_response_, other->transaction_debug_response_);
  std::swap(send_data_request_, other->send_data_request_);
  std::swap(send_data_response_, other->send_data_response_);
  std::swap(initialize_request_, other->initialize_request_);
  std::swap(initialize_response_, other->initialize_response_);
  std::swap(shutdown_prepare_request_, other->shutdown_prepare_request_);
  std::swap(shutdown_prepare_response_, other->shutdown_prepare_response_);
  std::swap(shutdown_request_, other->shutdown_request_);
  std::swap(shutdown_response_, other->shutdown_response_);
  std::swap(heartbeat_request_, other->heartbeat_request_);
  std::swap(heartbeat_response_, other->heartbeat_response_);
  std::swap(unevict_data_request_, other->unevict_data_request_);
  std::swap(unevict_data_response_, other->unevict_data_response_);
  std::swap(time_sync_request_, other->time_sync_request_);
  std::swap(time_sync_response_, other->time_sync_response_);
  dst_addr_.Swap(&other->dst_addr_);
  src_addr_.Swap(&other->src_addr_);
  std::swap(dst_addr_32_, other->dst_addr_32_);
  std::swap(src_addr_32_, other->src_addr_32_);
  std::swap(socket_, other->socket_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PelotonMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PelotonMessage_descriptor_;
  metadata.reflection = PelotonMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PelotonMessage

// required .peloton.message.PelotonMessage.Type type = 1;
bool PelotonMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PelotonMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void PelotonMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void PelotonMessage::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::peloton::message::PelotonMessage_Type PelotonMessage::type() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.type)
  return static_cast< ::peloton::message::PelotonMessage_Type >(type_);
}
 void PelotonMessage::set_type(::peloton::message::PelotonMessage_Type value) {
  assert(::peloton::message::PelotonMessage_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.PelotonMessage.type)
}

// optional .peloton.message.WorkFragment work_fragment = 2;
bool PelotonMessage::has_work_fragment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PelotonMessage::set_has_work_fragment() {
  _has_bits_[0] |= 0x00000002u;
}
void PelotonMessage::clear_has_work_fragment() {
  _has_bits_[0] &= ~0x00000002u;
}
void PelotonMessage::clear_work_fragment() {
  if (work_fragment_ != NULL) work_fragment_->::peloton::message::WorkFragment::Clear();
  clear_has_work_fragment();
}
const ::peloton::message::WorkFragment& PelotonMessage::work_fragment() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.work_fragment)
  return work_fragment_ != NULL ? *work_fragment_ : *default_instance_->work_fragment_;
}
::peloton::message::WorkFragment* PelotonMessage::mutable_work_fragment() {
  set_has_work_fragment();
  if (work_fragment_ == NULL) {
    work_fragment_ = new ::peloton::message::WorkFragment;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.work_fragment)
  return work_fragment_;
}
::peloton::message::WorkFragment* PelotonMessage::release_work_fragment() {
  clear_has_work_fragment();
  ::peloton::message::WorkFragment* temp = work_fragment_;
  work_fragment_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_work_fragment(::peloton::message::WorkFragment* work_fragment) {
  delete work_fragment_;
  work_fragment_ = work_fragment;
  if (work_fragment) {
    set_has_work_fragment();
  } else {
    clear_has_work_fragment();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.work_fragment)
}

// optional .peloton.message.WorkResult work_result = 3;
bool PelotonMessage::has_work_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PelotonMessage::set_has_work_result() {
  _has_bits_[0] |= 0x00000004u;
}
void PelotonMessage::clear_has_work_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void PelotonMessage::clear_work_result() {
  if (work_result_ != NULL) work_result_->::peloton::message::WorkResult::Clear();
  clear_has_work_result();
}
const ::peloton::message::WorkResult& PelotonMessage::work_result() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.work_result)
  return work_result_ != NULL ? *work_result_ : *default_instance_->work_result_;
}
::peloton::message::WorkResult* PelotonMessage::mutable_work_result() {
  set_has_work_result();
  if (work_result_ == NULL) {
    work_result_ = new ::peloton::message::WorkResult;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.work_result)
  return work_result_;
}
::peloton::message::WorkResult* PelotonMessage::release_work_result() {
  clear_has_work_result();
  ::peloton::message::WorkResult* temp = work_result_;
  work_result_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_work_result(::peloton::message::WorkResult* work_result) {
  delete work_result_;
  work_result_ = work_result;
  if (work_result) {
    set_has_work_result();
  } else {
    clear_has_work_result();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.work_result)
}

// optional .peloton.message.QueryEstimate query_estimate = 4;
bool PelotonMessage::has_query_estimate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PelotonMessage::set_has_query_estimate() {
  _has_bits_[0] |= 0x00000008u;
}
void PelotonMessage::clear_has_query_estimate() {
  _has_bits_[0] &= ~0x00000008u;
}
void PelotonMessage::clear_query_estimate() {
  if (query_estimate_ != NULL) query_estimate_->::peloton::message::QueryEstimate::Clear();
  clear_has_query_estimate();
}
const ::peloton::message::QueryEstimate& PelotonMessage::query_estimate() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.query_estimate)
  return query_estimate_ != NULL ? *query_estimate_ : *default_instance_->query_estimate_;
}
::peloton::message::QueryEstimate* PelotonMessage::mutable_query_estimate() {
  set_has_query_estimate();
  if (query_estimate_ == NULL) {
    query_estimate_ = new ::peloton::message::QueryEstimate;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.query_estimate)
  return query_estimate_;
}
::peloton::message::QueryEstimate* PelotonMessage::release_query_estimate() {
  clear_has_query_estimate();
  ::peloton::message::QueryEstimate* temp = query_estimate_;
  query_estimate_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_query_estimate(::peloton::message::QueryEstimate* query_estimate) {
  delete query_estimate_;
  query_estimate_ = query_estimate;
  if (query_estimate) {
    set_has_query_estimate();
  } else {
    clear_has_query_estimate();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.query_estimate)
}

// optional .peloton.message.TransactionInitRequest transaction_init_request = 5;
bool PelotonMessage::has_transaction_init_request() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PelotonMessage::set_has_transaction_init_request() {
  _has_bits_[0] |= 0x00000010u;
}
void PelotonMessage::clear_has_transaction_init_request() {
  _has_bits_[0] &= ~0x00000010u;
}
void PelotonMessage::clear_transaction_init_request() {
  if (transaction_init_request_ != NULL) transaction_init_request_->::peloton::message::TransactionInitRequest::Clear();
  clear_has_transaction_init_request();
}
const ::peloton::message::TransactionInitRequest& PelotonMessage::transaction_init_request() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.transaction_init_request)
  return transaction_init_request_ != NULL ? *transaction_init_request_ : *default_instance_->transaction_init_request_;
}
::peloton::message::TransactionInitRequest* PelotonMessage::mutable_transaction_init_request() {
  set_has_transaction_init_request();
  if (transaction_init_request_ == NULL) {
    transaction_init_request_ = new ::peloton::message::TransactionInitRequest;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.transaction_init_request)
  return transaction_init_request_;
}
::peloton::message::TransactionInitRequest* PelotonMessage::release_transaction_init_request() {
  clear_has_transaction_init_request();
  ::peloton::message::TransactionInitRequest* temp = transaction_init_request_;
  transaction_init_request_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_transaction_init_request(::peloton::message::TransactionInitRequest* transaction_init_request) {
  delete transaction_init_request_;
  transaction_init_request_ = transaction_init_request;
  if (transaction_init_request) {
    set_has_transaction_init_request();
  } else {
    clear_has_transaction_init_request();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.transaction_init_request)
}

// optional .peloton.message.TransactionInitResponse transaction_init_response = 6;
bool PelotonMessage::has_transaction_init_response() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PelotonMessage::set_has_transaction_init_response() {
  _has_bits_[0] |= 0x00000020u;
}
void PelotonMessage::clear_has_transaction_init_response() {
  _has_bits_[0] &= ~0x00000020u;
}
void PelotonMessage::clear_transaction_init_response() {
  if (transaction_init_response_ != NULL) transaction_init_response_->::peloton::message::TransactionInitResponse::Clear();
  clear_has_transaction_init_response();
}
const ::peloton::message::TransactionInitResponse& PelotonMessage::transaction_init_response() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.transaction_init_response)
  return transaction_init_response_ != NULL ? *transaction_init_response_ : *default_instance_->transaction_init_response_;
}
::peloton::message::TransactionInitResponse* PelotonMessage::mutable_transaction_init_response() {
  set_has_transaction_init_response();
  if (transaction_init_response_ == NULL) {
    transaction_init_response_ = new ::peloton::message::TransactionInitResponse;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.transaction_init_response)
  return transaction_init_response_;
}
::peloton::message::TransactionInitResponse* PelotonMessage::release_transaction_init_response() {
  clear_has_transaction_init_response();
  ::peloton::message::TransactionInitResponse* temp = transaction_init_response_;
  transaction_init_response_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_transaction_init_response(::peloton::message::TransactionInitResponse* transaction_init_response) {
  delete transaction_init_response_;
  transaction_init_response_ = transaction_init_response;
  if (transaction_init_response) {
    set_has_transaction_init_response();
  } else {
    clear_has_transaction_init_response();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.transaction_init_response)
}

// optional .peloton.message.TransactionWorkRequest transaction_work_request = 7;
bool PelotonMessage::has_transaction_work_request() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PelotonMessage::set_has_transaction_work_request() {
  _has_bits_[0] |= 0x00000040u;
}
void PelotonMessage::clear_has_transaction_work_request() {
  _has_bits_[0] &= ~0x00000040u;
}
void PelotonMessage::clear_transaction_work_request() {
  if (transaction_work_request_ != NULL) transaction_work_request_->::peloton::message::TransactionWorkRequest::Clear();
  clear_has_transaction_work_request();
}
const ::peloton::message::TransactionWorkRequest& PelotonMessage::transaction_work_request() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.transaction_work_request)
  return transaction_work_request_ != NULL ? *transaction_work_request_ : *default_instance_->transaction_work_request_;
}
::peloton::message::TransactionWorkRequest* PelotonMessage::mutable_transaction_work_request() {
  set_has_transaction_work_request();
  if (transaction_work_request_ == NULL) {
    transaction_work_request_ = new ::peloton::message::TransactionWorkRequest;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.transaction_work_request)
  return transaction_work_request_;
}
::peloton::message::TransactionWorkRequest* PelotonMessage::release_transaction_work_request() {
  clear_has_transaction_work_request();
  ::peloton::message::TransactionWorkRequest* temp = transaction_work_request_;
  transaction_work_request_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_transaction_work_request(::peloton::message::TransactionWorkRequest* transaction_work_request) {
  delete transaction_work_request_;
  transaction_work_request_ = transaction_work_request;
  if (transaction_work_request) {
    set_has_transaction_work_request();
  } else {
    clear_has_transaction_work_request();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.transaction_work_request)
}

// optional .peloton.message.TransactionWorkResponse transaction_work_response = 8;
bool PelotonMessage::has_transaction_work_response() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PelotonMessage::set_has_transaction_work_response() {
  _has_bits_[0] |= 0x00000080u;
}
void PelotonMessage::clear_has_transaction_work_response() {
  _has_bits_[0] &= ~0x00000080u;
}
void PelotonMessage::clear_transaction_work_response() {
  if (transaction_work_response_ != NULL) transaction_work_response_->::peloton::message::TransactionWorkResponse::Clear();
  clear_has_transaction_work_response();
}
const ::peloton::message::TransactionWorkResponse& PelotonMessage::transaction_work_response() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.transaction_work_response)
  return transaction_work_response_ != NULL ? *transaction_work_response_ : *default_instance_->transaction_work_response_;
}
::peloton::message::TransactionWorkResponse* PelotonMessage::mutable_transaction_work_response() {
  set_has_transaction_work_response();
  if (transaction_work_response_ == NULL) {
    transaction_work_response_ = new ::peloton::message::TransactionWorkResponse;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.transaction_work_response)
  return transaction_work_response_;
}
::peloton::message::TransactionWorkResponse* PelotonMessage::release_transaction_work_response() {
  clear_has_transaction_work_response();
  ::peloton::message::TransactionWorkResponse* temp = transaction_work_response_;
  transaction_work_response_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_transaction_work_response(::peloton::message::TransactionWorkResponse* transaction_work_response) {
  delete transaction_work_response_;
  transaction_work_response_ = transaction_work_response;
  if (transaction_work_response) {
    set_has_transaction_work_response();
  } else {
    clear_has_transaction_work_response();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.transaction_work_response)
}

// optional .peloton.message.TransactionPrefetchResult transaction_prefetch_result = 9;
bool PelotonMessage::has_transaction_prefetch_result() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PelotonMessage::set_has_transaction_prefetch_result() {
  _has_bits_[0] |= 0x00000100u;
}
void PelotonMessage::clear_has_transaction_prefetch_result() {
  _has_bits_[0] &= ~0x00000100u;
}
void PelotonMessage::clear_transaction_prefetch_result() {
  if (transaction_prefetch_result_ != NULL) transaction_prefetch_result_->::peloton::message::TransactionPrefetchResult::Clear();
  clear_has_transaction_prefetch_result();
}
const ::peloton::message::TransactionPrefetchResult& PelotonMessage::transaction_prefetch_result() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.transaction_prefetch_result)
  return transaction_prefetch_result_ != NULL ? *transaction_prefetch_result_ : *default_instance_->transaction_prefetch_result_;
}
::peloton::message::TransactionPrefetchResult* PelotonMessage::mutable_transaction_prefetch_result() {
  set_has_transaction_prefetch_result();
  if (transaction_prefetch_result_ == NULL) {
    transaction_prefetch_result_ = new ::peloton::message::TransactionPrefetchResult;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.transaction_prefetch_result)
  return transaction_prefetch_result_;
}
::peloton::message::TransactionPrefetchResult* PelotonMessage::release_transaction_prefetch_result() {
  clear_has_transaction_prefetch_result();
  ::peloton::message::TransactionPrefetchResult* temp = transaction_prefetch_result_;
  transaction_prefetch_result_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_transaction_prefetch_result(::peloton::message::TransactionPrefetchResult* transaction_prefetch_result) {
  delete transaction_prefetch_result_;
  transaction_prefetch_result_ = transaction_prefetch_result;
  if (transaction_prefetch_result) {
    set_has_transaction_prefetch_result();
  } else {
    clear_has_transaction_prefetch_result();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.transaction_prefetch_result)
}

// optional .peloton.message.TransactionPrefetchAcknowledgement transaction_prefetch_acknowledgement = 10;
bool PelotonMessage::has_transaction_prefetch_acknowledgement() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PelotonMessage::set_has_transaction_prefetch_acknowledgement() {
  _has_bits_[0] |= 0x00000200u;
}
void PelotonMessage::clear_has_transaction_prefetch_acknowledgement() {
  _has_bits_[0] &= ~0x00000200u;
}
void PelotonMessage::clear_transaction_prefetch_acknowledgement() {
  if (transaction_prefetch_acknowledgement_ != NULL) transaction_prefetch_acknowledgement_->::peloton::message::TransactionPrefetchAcknowledgement::Clear();
  clear_has_transaction_prefetch_acknowledgement();
}
const ::peloton::message::TransactionPrefetchAcknowledgement& PelotonMessage::transaction_prefetch_acknowledgement() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.transaction_prefetch_acknowledgement)
  return transaction_prefetch_acknowledgement_ != NULL ? *transaction_prefetch_acknowledgement_ : *default_instance_->transaction_prefetch_acknowledgement_;
}
::peloton::message::TransactionPrefetchAcknowledgement* PelotonMessage::mutable_transaction_prefetch_acknowledgement() {
  set_has_transaction_prefetch_acknowledgement();
  if (transaction_prefetch_acknowledgement_ == NULL) {
    transaction_prefetch_acknowledgement_ = new ::peloton::message::TransactionPrefetchAcknowledgement;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.transaction_prefetch_acknowledgement)
  return transaction_prefetch_acknowledgement_;
}
::peloton::message::TransactionPrefetchAcknowledgement* PelotonMessage::release_transaction_prefetch_acknowledgement() {
  clear_has_transaction_prefetch_acknowledgement();
  ::peloton::message::TransactionPrefetchAcknowledgement* temp = transaction_prefetch_acknowledgement_;
  transaction_prefetch_acknowledgement_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_transaction_prefetch_acknowledgement(::peloton::message::TransactionPrefetchAcknowledgement* transaction_prefetch_acknowledgement) {
  delete transaction_prefetch_acknowledgement_;
  transaction_prefetch_acknowledgement_ = transaction_prefetch_acknowledgement;
  if (transaction_prefetch_acknowledgement) {
    set_has_transaction_prefetch_acknowledgement();
  } else {
    clear_has_transaction_prefetch_acknowledgement();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.transaction_prefetch_acknowledgement)
}

// optional .peloton.message.TransactionMapRequest transaction_map_request = 11;
bool PelotonMessage::has_transaction_map_request() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PelotonMessage::set_has_transaction_map_request() {
  _has_bits_[0] |= 0x00000400u;
}
void PelotonMessage::clear_has_transaction_map_request() {
  _has_bits_[0] &= ~0x00000400u;
}
void PelotonMessage::clear_transaction_map_request() {
  if (transaction_map_request_ != NULL) transaction_map_request_->::peloton::message::TransactionMapRequest::Clear();
  clear_has_transaction_map_request();
}
const ::peloton::message::TransactionMapRequest& PelotonMessage::transaction_map_request() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.transaction_map_request)
  return transaction_map_request_ != NULL ? *transaction_map_request_ : *default_instance_->transaction_map_request_;
}
::peloton::message::TransactionMapRequest* PelotonMessage::mutable_transaction_map_request() {
  set_has_transaction_map_request();
  if (transaction_map_request_ == NULL) {
    transaction_map_request_ = new ::peloton::message::TransactionMapRequest;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.transaction_map_request)
  return transaction_map_request_;
}
::peloton::message::TransactionMapRequest* PelotonMessage::release_transaction_map_request() {
  clear_has_transaction_map_request();
  ::peloton::message::TransactionMapRequest* temp = transaction_map_request_;
  transaction_map_request_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_transaction_map_request(::peloton::message::TransactionMapRequest* transaction_map_request) {
  delete transaction_map_request_;
  transaction_map_request_ = transaction_map_request;
  if (transaction_map_request) {
    set_has_transaction_map_request();
  } else {
    clear_has_transaction_map_request();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.transaction_map_request)
}

// optional .peloton.message.TransactionMapResponse transaction_map_response = 12;
bool PelotonMessage::has_transaction_map_response() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PelotonMessage::set_has_transaction_map_response() {
  _has_bits_[0] |= 0x00000800u;
}
void PelotonMessage::clear_has_transaction_map_response() {
  _has_bits_[0] &= ~0x00000800u;
}
void PelotonMessage::clear_transaction_map_response() {
  if (transaction_map_response_ != NULL) transaction_map_response_->::peloton::message::TransactionMapResponse::Clear();
  clear_has_transaction_map_response();
}
const ::peloton::message::TransactionMapResponse& PelotonMessage::transaction_map_response() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.transaction_map_response)
  return transaction_map_response_ != NULL ? *transaction_map_response_ : *default_instance_->transaction_map_response_;
}
::peloton::message::TransactionMapResponse* PelotonMessage::mutable_transaction_map_response() {
  set_has_transaction_map_response();
  if (transaction_map_response_ == NULL) {
    transaction_map_response_ = new ::peloton::message::TransactionMapResponse;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.transaction_map_response)
  return transaction_map_response_;
}
::peloton::message::TransactionMapResponse* PelotonMessage::release_transaction_map_response() {
  clear_has_transaction_map_response();
  ::peloton::message::TransactionMapResponse* temp = transaction_map_response_;
  transaction_map_response_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_transaction_map_response(::peloton::message::TransactionMapResponse* transaction_map_response) {
  delete transaction_map_response_;
  transaction_map_response_ = transaction_map_response;
  if (transaction_map_response) {
    set_has_transaction_map_response();
  } else {
    clear_has_transaction_map_response();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.transaction_map_response)
}

// optional .peloton.message.TransactionReduceRequest transaction_reduce_request = 13;
bool PelotonMessage::has_transaction_reduce_request() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PelotonMessage::set_has_transaction_reduce_request() {
  _has_bits_[0] |= 0x00001000u;
}
void PelotonMessage::clear_has_transaction_reduce_request() {
  _has_bits_[0] &= ~0x00001000u;
}
void PelotonMessage::clear_transaction_reduce_request() {
  if (transaction_reduce_request_ != NULL) transaction_reduce_request_->::peloton::message::TransactionReduceRequest::Clear();
  clear_has_transaction_reduce_request();
}
const ::peloton::message::TransactionReduceRequest& PelotonMessage::transaction_reduce_request() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.transaction_reduce_request)
  return transaction_reduce_request_ != NULL ? *transaction_reduce_request_ : *default_instance_->transaction_reduce_request_;
}
::peloton::message::TransactionReduceRequest* PelotonMessage::mutable_transaction_reduce_request() {
  set_has_transaction_reduce_request();
  if (transaction_reduce_request_ == NULL) {
    transaction_reduce_request_ = new ::peloton::message::TransactionReduceRequest;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.transaction_reduce_request)
  return transaction_reduce_request_;
}
::peloton::message::TransactionReduceRequest* PelotonMessage::release_transaction_reduce_request() {
  clear_has_transaction_reduce_request();
  ::peloton::message::TransactionReduceRequest* temp = transaction_reduce_request_;
  transaction_reduce_request_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_transaction_reduce_request(::peloton::message::TransactionReduceRequest* transaction_reduce_request) {
  delete transaction_reduce_request_;
  transaction_reduce_request_ = transaction_reduce_request;
  if (transaction_reduce_request) {
    set_has_transaction_reduce_request();
  } else {
    clear_has_transaction_reduce_request();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.transaction_reduce_request)
}

// optional .peloton.message.TransactionReduceResponse transaction_reduce_response = 14;
bool PelotonMessage::has_transaction_reduce_response() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PelotonMessage::set_has_transaction_reduce_response() {
  _has_bits_[0] |= 0x00002000u;
}
void PelotonMessage::clear_has_transaction_reduce_response() {
  _has_bits_[0] &= ~0x00002000u;
}
void PelotonMessage::clear_transaction_reduce_response() {
  if (transaction_reduce_response_ != NULL) transaction_reduce_response_->::peloton::message::TransactionReduceResponse::Clear();
  clear_has_transaction_reduce_response();
}
const ::peloton::message::TransactionReduceResponse& PelotonMessage::transaction_reduce_response() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.transaction_reduce_response)
  return transaction_reduce_response_ != NULL ? *transaction_reduce_response_ : *default_instance_->transaction_reduce_response_;
}
::peloton::message::TransactionReduceResponse* PelotonMessage::mutable_transaction_reduce_response() {
  set_has_transaction_reduce_response();
  if (transaction_reduce_response_ == NULL) {
    transaction_reduce_response_ = new ::peloton::message::TransactionReduceResponse;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.transaction_reduce_response)
  return transaction_reduce_response_;
}
::peloton::message::TransactionReduceResponse* PelotonMessage::release_transaction_reduce_response() {
  clear_has_transaction_reduce_response();
  ::peloton::message::TransactionReduceResponse* temp = transaction_reduce_response_;
  transaction_reduce_response_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_transaction_reduce_response(::peloton::message::TransactionReduceResponse* transaction_reduce_response) {
  delete transaction_reduce_response_;
  transaction_reduce_response_ = transaction_reduce_response;
  if (transaction_reduce_response) {
    set_has_transaction_reduce_response();
  } else {
    clear_has_transaction_reduce_response();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.transaction_reduce_response)
}

// optional .peloton.message.TransactionPrepareRequest transaction_prepare_request = 15;
bool PelotonMessage::has_transaction_prepare_request() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PelotonMessage::set_has_transaction_prepare_request() {
  _has_bits_[0] |= 0x00004000u;
}
void PelotonMessage::clear_has_transaction_prepare_request() {
  _has_bits_[0] &= ~0x00004000u;
}
void PelotonMessage::clear_transaction_prepare_request() {
  if (transaction_prepare_request_ != NULL) transaction_prepare_request_->::peloton::message::TransactionPrepareRequest::Clear();
  clear_has_transaction_prepare_request();
}
const ::peloton::message::TransactionPrepareRequest& PelotonMessage::transaction_prepare_request() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.transaction_prepare_request)
  return transaction_prepare_request_ != NULL ? *transaction_prepare_request_ : *default_instance_->transaction_prepare_request_;
}
::peloton::message::TransactionPrepareRequest* PelotonMessage::mutable_transaction_prepare_request() {
  set_has_transaction_prepare_request();
  if (transaction_prepare_request_ == NULL) {
    transaction_prepare_request_ = new ::peloton::message::TransactionPrepareRequest;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.transaction_prepare_request)
  return transaction_prepare_request_;
}
::peloton::message::TransactionPrepareRequest* PelotonMessage::release_transaction_prepare_request() {
  clear_has_transaction_prepare_request();
  ::peloton::message::TransactionPrepareRequest* temp = transaction_prepare_request_;
  transaction_prepare_request_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_transaction_prepare_request(::peloton::message::TransactionPrepareRequest* transaction_prepare_request) {
  delete transaction_prepare_request_;
  transaction_prepare_request_ = transaction_prepare_request;
  if (transaction_prepare_request) {
    set_has_transaction_prepare_request();
  } else {
    clear_has_transaction_prepare_request();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.transaction_prepare_request)
}

// optional .peloton.message.TransactionPrepareResponse transaction_prepare_response = 16;
bool PelotonMessage::has_transaction_prepare_response() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PelotonMessage::set_has_transaction_prepare_response() {
  _has_bits_[0] |= 0x00008000u;
}
void PelotonMessage::clear_has_transaction_prepare_response() {
  _has_bits_[0] &= ~0x00008000u;
}
void PelotonMessage::clear_transaction_prepare_response() {
  if (transaction_prepare_response_ != NULL) transaction_prepare_response_->::peloton::message::TransactionPrepareResponse::Clear();
  clear_has_transaction_prepare_response();
}
const ::peloton::message::TransactionPrepareResponse& PelotonMessage::transaction_prepare_response() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.transaction_prepare_response)
  return transaction_prepare_response_ != NULL ? *transaction_prepare_response_ : *default_instance_->transaction_prepare_response_;
}
::peloton::message::TransactionPrepareResponse* PelotonMessage::mutable_transaction_prepare_response() {
  set_has_transaction_prepare_response();
  if (transaction_prepare_response_ == NULL) {
    transaction_prepare_response_ = new ::peloton::message::TransactionPrepareResponse;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.transaction_prepare_response)
  return transaction_prepare_response_;
}
::peloton::message::TransactionPrepareResponse* PelotonMessage::release_transaction_prepare_response() {
  clear_has_transaction_prepare_response();
  ::peloton::message::TransactionPrepareResponse* temp = transaction_prepare_response_;
  transaction_prepare_response_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_transaction_prepare_response(::peloton::message::TransactionPrepareResponse* transaction_prepare_response) {
  delete transaction_prepare_response_;
  transaction_prepare_response_ = transaction_prepare_response;
  if (transaction_prepare_response) {
    set_has_transaction_prepare_response();
  } else {
    clear_has_transaction_prepare_response();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.transaction_prepare_response)
}

// optional .peloton.message.TransactionFinishRequest transaction_finish_request = 17;
bool PelotonMessage::has_transaction_finish_request() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void PelotonMessage::set_has_transaction_finish_request() {
  _has_bits_[0] |= 0x00010000u;
}
void PelotonMessage::clear_has_transaction_finish_request() {
  _has_bits_[0] &= ~0x00010000u;
}
void PelotonMessage::clear_transaction_finish_request() {
  if (transaction_finish_request_ != NULL) transaction_finish_request_->::peloton::message::TransactionFinishRequest::Clear();
  clear_has_transaction_finish_request();
}
const ::peloton::message::TransactionFinishRequest& PelotonMessage::transaction_finish_request() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.transaction_finish_request)
  return transaction_finish_request_ != NULL ? *transaction_finish_request_ : *default_instance_->transaction_finish_request_;
}
::peloton::message::TransactionFinishRequest* PelotonMessage::mutable_transaction_finish_request() {
  set_has_transaction_finish_request();
  if (transaction_finish_request_ == NULL) {
    transaction_finish_request_ = new ::peloton::message::TransactionFinishRequest;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.transaction_finish_request)
  return transaction_finish_request_;
}
::peloton::message::TransactionFinishRequest* PelotonMessage::release_transaction_finish_request() {
  clear_has_transaction_finish_request();
  ::peloton::message::TransactionFinishRequest* temp = transaction_finish_request_;
  transaction_finish_request_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_transaction_finish_request(::peloton::message::TransactionFinishRequest* transaction_finish_request) {
  delete transaction_finish_request_;
  transaction_finish_request_ = transaction_finish_request;
  if (transaction_finish_request) {
    set_has_transaction_finish_request();
  } else {
    clear_has_transaction_finish_request();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.transaction_finish_request)
}

// optional .peloton.message.TransactionFinishResponse transaction_finish_response = 18;
bool PelotonMessage::has_transaction_finish_response() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void PelotonMessage::set_has_transaction_finish_response() {
  _has_bits_[0] |= 0x00020000u;
}
void PelotonMessage::clear_has_transaction_finish_response() {
  _has_bits_[0] &= ~0x00020000u;
}
void PelotonMessage::clear_transaction_finish_response() {
  if (transaction_finish_response_ != NULL) transaction_finish_response_->::peloton::message::TransactionFinishResponse::Clear();
  clear_has_transaction_finish_response();
}
const ::peloton::message::TransactionFinishResponse& PelotonMessage::transaction_finish_response() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.transaction_finish_response)
  return transaction_finish_response_ != NULL ? *transaction_finish_response_ : *default_instance_->transaction_finish_response_;
}
::peloton::message::TransactionFinishResponse* PelotonMessage::mutable_transaction_finish_response() {
  set_has_transaction_finish_response();
  if (transaction_finish_response_ == NULL) {
    transaction_finish_response_ = new ::peloton::message::TransactionFinishResponse;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.transaction_finish_response)
  return transaction_finish_response_;
}
::peloton::message::TransactionFinishResponse* PelotonMessage::release_transaction_finish_response() {
  clear_has_transaction_finish_response();
  ::peloton::message::TransactionFinishResponse* temp = transaction_finish_response_;
  transaction_finish_response_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_transaction_finish_response(::peloton::message::TransactionFinishResponse* transaction_finish_response) {
  delete transaction_finish_response_;
  transaction_finish_response_ = transaction_finish_response;
  if (transaction_finish_response) {
    set_has_transaction_finish_response();
  } else {
    clear_has_transaction_finish_response();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.transaction_finish_response)
}

// optional .peloton.message.TransactionRedirectRequest transaction_redirect_request = 19;
bool PelotonMessage::has_transaction_redirect_request() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void PelotonMessage::set_has_transaction_redirect_request() {
  _has_bits_[0] |= 0x00040000u;
}
void PelotonMessage::clear_has_transaction_redirect_request() {
  _has_bits_[0] &= ~0x00040000u;
}
void PelotonMessage::clear_transaction_redirect_request() {
  if (transaction_redirect_request_ != NULL) transaction_redirect_request_->::peloton::message::TransactionRedirectRequest::Clear();
  clear_has_transaction_redirect_request();
}
const ::peloton::message::TransactionRedirectRequest& PelotonMessage::transaction_redirect_request() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.transaction_redirect_request)
  return transaction_redirect_request_ != NULL ? *transaction_redirect_request_ : *default_instance_->transaction_redirect_request_;
}
::peloton::message::TransactionRedirectRequest* PelotonMessage::mutable_transaction_redirect_request() {
  set_has_transaction_redirect_request();
  if (transaction_redirect_request_ == NULL) {
    transaction_redirect_request_ = new ::peloton::message::TransactionRedirectRequest;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.transaction_redirect_request)
  return transaction_redirect_request_;
}
::peloton::message::TransactionRedirectRequest* PelotonMessage::release_transaction_redirect_request() {
  clear_has_transaction_redirect_request();
  ::peloton::message::TransactionRedirectRequest* temp = transaction_redirect_request_;
  transaction_redirect_request_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_transaction_redirect_request(::peloton::message::TransactionRedirectRequest* transaction_redirect_request) {
  delete transaction_redirect_request_;
  transaction_redirect_request_ = transaction_redirect_request;
  if (transaction_redirect_request) {
    set_has_transaction_redirect_request();
  } else {
    clear_has_transaction_redirect_request();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.transaction_redirect_request)
}

// optional .peloton.message.TransactionRedirectResponse transaction_redirect_response = 20;
bool PelotonMessage::has_transaction_redirect_response() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void PelotonMessage::set_has_transaction_redirect_response() {
  _has_bits_[0] |= 0x00080000u;
}
void PelotonMessage::clear_has_transaction_redirect_response() {
  _has_bits_[0] &= ~0x00080000u;
}
void PelotonMessage::clear_transaction_redirect_response() {
  if (transaction_redirect_response_ != NULL) transaction_redirect_response_->::peloton::message::TransactionRedirectResponse::Clear();
  clear_has_transaction_redirect_response();
}
const ::peloton::message::TransactionRedirectResponse& PelotonMessage::transaction_redirect_response() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.transaction_redirect_response)
  return transaction_redirect_response_ != NULL ? *transaction_redirect_response_ : *default_instance_->transaction_redirect_response_;
}
::peloton::message::TransactionRedirectResponse* PelotonMessage::mutable_transaction_redirect_response() {
  set_has_transaction_redirect_response();
  if (transaction_redirect_response_ == NULL) {
    transaction_redirect_response_ = new ::peloton::message::TransactionRedirectResponse;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.transaction_redirect_response)
  return transaction_redirect_response_;
}
::peloton::message::TransactionRedirectResponse* PelotonMessage::release_transaction_redirect_response() {
  clear_has_transaction_redirect_response();
  ::peloton::message::TransactionRedirectResponse* temp = transaction_redirect_response_;
  transaction_redirect_response_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_transaction_redirect_response(::peloton::message::TransactionRedirectResponse* transaction_redirect_response) {
  delete transaction_redirect_response_;
  transaction_redirect_response_ = transaction_redirect_response;
  if (transaction_redirect_response) {
    set_has_transaction_redirect_response();
  } else {
    clear_has_transaction_redirect_response();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.transaction_redirect_response)
}

// optional .peloton.message.TransactionDebugRequest transaction_debug_request = 21;
bool PelotonMessage::has_transaction_debug_request() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void PelotonMessage::set_has_transaction_debug_request() {
  _has_bits_[0] |= 0x00100000u;
}
void PelotonMessage::clear_has_transaction_debug_request() {
  _has_bits_[0] &= ~0x00100000u;
}
void PelotonMessage::clear_transaction_debug_request() {
  if (transaction_debug_request_ != NULL) transaction_debug_request_->::peloton::message::TransactionDebugRequest::Clear();
  clear_has_transaction_debug_request();
}
const ::peloton::message::TransactionDebugRequest& PelotonMessage::transaction_debug_request() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.transaction_debug_request)
  return transaction_debug_request_ != NULL ? *transaction_debug_request_ : *default_instance_->transaction_debug_request_;
}
::peloton::message::TransactionDebugRequest* PelotonMessage::mutable_transaction_debug_request() {
  set_has_transaction_debug_request();
  if (transaction_debug_request_ == NULL) {
    transaction_debug_request_ = new ::peloton::message::TransactionDebugRequest;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.transaction_debug_request)
  return transaction_debug_request_;
}
::peloton::message::TransactionDebugRequest* PelotonMessage::release_transaction_debug_request() {
  clear_has_transaction_debug_request();
  ::peloton::message::TransactionDebugRequest* temp = transaction_debug_request_;
  transaction_debug_request_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_transaction_debug_request(::peloton::message::TransactionDebugRequest* transaction_debug_request) {
  delete transaction_debug_request_;
  transaction_debug_request_ = transaction_debug_request;
  if (transaction_debug_request) {
    set_has_transaction_debug_request();
  } else {
    clear_has_transaction_debug_request();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.transaction_debug_request)
}

// optional .peloton.message.TransactionDebugResponse transaction_debug_response = 22;
bool PelotonMessage::has_transaction_debug_response() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void PelotonMessage::set_has_transaction_debug_response() {
  _has_bits_[0] |= 0x00200000u;
}
void PelotonMessage::clear_has_transaction_debug_response() {
  _has_bits_[0] &= ~0x00200000u;
}
void PelotonMessage::clear_transaction_debug_response() {
  if (transaction_debug_response_ != NULL) transaction_debug_response_->::peloton::message::TransactionDebugResponse::Clear();
  clear_has_transaction_debug_response();
}
const ::peloton::message::TransactionDebugResponse& PelotonMessage::transaction_debug_response() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.transaction_debug_response)
  return transaction_debug_response_ != NULL ? *transaction_debug_response_ : *default_instance_->transaction_debug_response_;
}
::peloton::message::TransactionDebugResponse* PelotonMessage::mutable_transaction_debug_response() {
  set_has_transaction_debug_response();
  if (transaction_debug_response_ == NULL) {
    transaction_debug_response_ = new ::peloton::message::TransactionDebugResponse;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.transaction_debug_response)
  return transaction_debug_response_;
}
::peloton::message::TransactionDebugResponse* PelotonMessage::release_transaction_debug_response() {
  clear_has_transaction_debug_response();
  ::peloton::message::TransactionDebugResponse* temp = transaction_debug_response_;
  transaction_debug_response_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_transaction_debug_response(::peloton::message::TransactionDebugResponse* transaction_debug_response) {
  delete transaction_debug_response_;
  transaction_debug_response_ = transaction_debug_response;
  if (transaction_debug_response) {
    set_has_transaction_debug_response();
  } else {
    clear_has_transaction_debug_response();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.transaction_debug_response)
}

// optional .peloton.message.SendDataRequest send_data_request = 23;
bool PelotonMessage::has_send_data_request() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void PelotonMessage::set_has_send_data_request() {
  _has_bits_[0] |= 0x00400000u;
}
void PelotonMessage::clear_has_send_data_request() {
  _has_bits_[0] &= ~0x00400000u;
}
void PelotonMessage::clear_send_data_request() {
  if (send_data_request_ != NULL) send_data_request_->::peloton::message::SendDataRequest::Clear();
  clear_has_send_data_request();
}
const ::peloton::message::SendDataRequest& PelotonMessage::send_data_request() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.send_data_request)
  return send_data_request_ != NULL ? *send_data_request_ : *default_instance_->send_data_request_;
}
::peloton::message::SendDataRequest* PelotonMessage::mutable_send_data_request() {
  set_has_send_data_request();
  if (send_data_request_ == NULL) {
    send_data_request_ = new ::peloton::message::SendDataRequest;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.send_data_request)
  return send_data_request_;
}
::peloton::message::SendDataRequest* PelotonMessage::release_send_data_request() {
  clear_has_send_data_request();
  ::peloton::message::SendDataRequest* temp = send_data_request_;
  send_data_request_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_send_data_request(::peloton::message::SendDataRequest* send_data_request) {
  delete send_data_request_;
  send_data_request_ = send_data_request;
  if (send_data_request) {
    set_has_send_data_request();
  } else {
    clear_has_send_data_request();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.send_data_request)
}

// optional .peloton.message.SendDataResponse send_data_response = 24;
bool PelotonMessage::has_send_data_response() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void PelotonMessage::set_has_send_data_response() {
  _has_bits_[0] |= 0x00800000u;
}
void PelotonMessage::clear_has_send_data_response() {
  _has_bits_[0] &= ~0x00800000u;
}
void PelotonMessage::clear_send_data_response() {
  if (send_data_response_ != NULL) send_data_response_->::peloton::message::SendDataResponse::Clear();
  clear_has_send_data_response();
}
const ::peloton::message::SendDataResponse& PelotonMessage::send_data_response() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.send_data_response)
  return send_data_response_ != NULL ? *send_data_response_ : *default_instance_->send_data_response_;
}
::peloton::message::SendDataResponse* PelotonMessage::mutable_send_data_response() {
  set_has_send_data_response();
  if (send_data_response_ == NULL) {
    send_data_response_ = new ::peloton::message::SendDataResponse;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.send_data_response)
  return send_data_response_;
}
::peloton::message::SendDataResponse* PelotonMessage::release_send_data_response() {
  clear_has_send_data_response();
  ::peloton::message::SendDataResponse* temp = send_data_response_;
  send_data_response_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_send_data_response(::peloton::message::SendDataResponse* send_data_response) {
  delete send_data_response_;
  send_data_response_ = send_data_response;
  if (send_data_response) {
    set_has_send_data_response();
  } else {
    clear_has_send_data_response();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.send_data_response)
}

// optional .peloton.message.InitializeRequest initialize_request = 25;
bool PelotonMessage::has_initialize_request() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void PelotonMessage::set_has_initialize_request() {
  _has_bits_[0] |= 0x01000000u;
}
void PelotonMessage::clear_has_initialize_request() {
  _has_bits_[0] &= ~0x01000000u;
}
void PelotonMessage::clear_initialize_request() {
  if (initialize_request_ != NULL) initialize_request_->::peloton::message::InitializeRequest::Clear();
  clear_has_initialize_request();
}
const ::peloton::message::InitializeRequest& PelotonMessage::initialize_request() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.initialize_request)
  return initialize_request_ != NULL ? *initialize_request_ : *default_instance_->initialize_request_;
}
::peloton::message::InitializeRequest* PelotonMessage::mutable_initialize_request() {
  set_has_initialize_request();
  if (initialize_request_ == NULL) {
    initialize_request_ = new ::peloton::message::InitializeRequest;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.initialize_request)
  return initialize_request_;
}
::peloton::message::InitializeRequest* PelotonMessage::release_initialize_request() {
  clear_has_initialize_request();
  ::peloton::message::InitializeRequest* temp = initialize_request_;
  initialize_request_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_initialize_request(::peloton::message::InitializeRequest* initialize_request) {
  delete initialize_request_;
  initialize_request_ = initialize_request;
  if (initialize_request) {
    set_has_initialize_request();
  } else {
    clear_has_initialize_request();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.initialize_request)
}

// optional .peloton.message.InitializeResponse initialize_response = 26;
bool PelotonMessage::has_initialize_response() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void PelotonMessage::set_has_initialize_response() {
  _has_bits_[0] |= 0x02000000u;
}
void PelotonMessage::clear_has_initialize_response() {
  _has_bits_[0] &= ~0x02000000u;
}
void PelotonMessage::clear_initialize_response() {
  if (initialize_response_ != NULL) initialize_response_->::peloton::message::InitializeResponse::Clear();
  clear_has_initialize_response();
}
const ::peloton::message::InitializeResponse& PelotonMessage::initialize_response() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.initialize_response)
  return initialize_response_ != NULL ? *initialize_response_ : *default_instance_->initialize_response_;
}
::peloton::message::InitializeResponse* PelotonMessage::mutable_initialize_response() {
  set_has_initialize_response();
  if (initialize_response_ == NULL) {
    initialize_response_ = new ::peloton::message::InitializeResponse;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.initialize_response)
  return initialize_response_;
}
::peloton::message::InitializeResponse* PelotonMessage::release_initialize_response() {
  clear_has_initialize_response();
  ::peloton::message::InitializeResponse* temp = initialize_response_;
  initialize_response_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_initialize_response(::peloton::message::InitializeResponse* initialize_response) {
  delete initialize_response_;
  initialize_response_ = initialize_response;
  if (initialize_response) {
    set_has_initialize_response();
  } else {
    clear_has_initialize_response();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.initialize_response)
}

// optional .peloton.message.ShutdownPrepareRequest shutdown_prepare_request = 27;
bool PelotonMessage::has_shutdown_prepare_request() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void PelotonMessage::set_has_shutdown_prepare_request() {
  _has_bits_[0] |= 0x04000000u;
}
void PelotonMessage::clear_has_shutdown_prepare_request() {
  _has_bits_[0] &= ~0x04000000u;
}
void PelotonMessage::clear_shutdown_prepare_request() {
  if (shutdown_prepare_request_ != NULL) shutdown_prepare_request_->::peloton::message::ShutdownPrepareRequest::Clear();
  clear_has_shutdown_prepare_request();
}
const ::peloton::message::ShutdownPrepareRequest& PelotonMessage::shutdown_prepare_request() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.shutdown_prepare_request)
  return shutdown_prepare_request_ != NULL ? *shutdown_prepare_request_ : *default_instance_->shutdown_prepare_request_;
}
::peloton::message::ShutdownPrepareRequest* PelotonMessage::mutable_shutdown_prepare_request() {
  set_has_shutdown_prepare_request();
  if (shutdown_prepare_request_ == NULL) {
    shutdown_prepare_request_ = new ::peloton::message::ShutdownPrepareRequest;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.shutdown_prepare_request)
  return shutdown_prepare_request_;
}
::peloton::message::ShutdownPrepareRequest* PelotonMessage::release_shutdown_prepare_request() {
  clear_has_shutdown_prepare_request();
  ::peloton::message::ShutdownPrepareRequest* temp = shutdown_prepare_request_;
  shutdown_prepare_request_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_shutdown_prepare_request(::peloton::message::ShutdownPrepareRequest* shutdown_prepare_request) {
  delete shutdown_prepare_request_;
  shutdown_prepare_request_ = shutdown_prepare_request;
  if (shutdown_prepare_request) {
    set_has_shutdown_prepare_request();
  } else {
    clear_has_shutdown_prepare_request();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.shutdown_prepare_request)
}

// optional .peloton.message.ShutdownPrepareResponse shutdown_prepare_response = 28;
bool PelotonMessage::has_shutdown_prepare_response() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void PelotonMessage::set_has_shutdown_prepare_response() {
  _has_bits_[0] |= 0x08000000u;
}
void PelotonMessage::clear_has_shutdown_prepare_response() {
  _has_bits_[0] &= ~0x08000000u;
}
void PelotonMessage::clear_shutdown_prepare_response() {
  if (shutdown_prepare_response_ != NULL) shutdown_prepare_response_->::peloton::message::ShutdownPrepareResponse::Clear();
  clear_has_shutdown_prepare_response();
}
const ::peloton::message::ShutdownPrepareResponse& PelotonMessage::shutdown_prepare_response() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.shutdown_prepare_response)
  return shutdown_prepare_response_ != NULL ? *shutdown_prepare_response_ : *default_instance_->shutdown_prepare_response_;
}
::peloton::message::ShutdownPrepareResponse* PelotonMessage::mutable_shutdown_prepare_response() {
  set_has_shutdown_prepare_response();
  if (shutdown_prepare_response_ == NULL) {
    shutdown_prepare_response_ = new ::peloton::message::ShutdownPrepareResponse;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.shutdown_prepare_response)
  return shutdown_prepare_response_;
}
::peloton::message::ShutdownPrepareResponse* PelotonMessage::release_shutdown_prepare_response() {
  clear_has_shutdown_prepare_response();
  ::peloton::message::ShutdownPrepareResponse* temp = shutdown_prepare_response_;
  shutdown_prepare_response_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_shutdown_prepare_response(::peloton::message::ShutdownPrepareResponse* shutdown_prepare_response) {
  delete shutdown_prepare_response_;
  shutdown_prepare_response_ = shutdown_prepare_response;
  if (shutdown_prepare_response) {
    set_has_shutdown_prepare_response();
  } else {
    clear_has_shutdown_prepare_response();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.shutdown_prepare_response)
}

// optional .peloton.message.ShutdownRequest shutdown_request = 29;
bool PelotonMessage::has_shutdown_request() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void PelotonMessage::set_has_shutdown_request() {
  _has_bits_[0] |= 0x10000000u;
}
void PelotonMessage::clear_has_shutdown_request() {
  _has_bits_[0] &= ~0x10000000u;
}
void PelotonMessage::clear_shutdown_request() {
  if (shutdown_request_ != NULL) shutdown_request_->::peloton::message::ShutdownRequest::Clear();
  clear_has_shutdown_request();
}
const ::peloton::message::ShutdownRequest& PelotonMessage::shutdown_request() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.shutdown_request)
  return shutdown_request_ != NULL ? *shutdown_request_ : *default_instance_->shutdown_request_;
}
::peloton::message::ShutdownRequest* PelotonMessage::mutable_shutdown_request() {
  set_has_shutdown_request();
  if (shutdown_request_ == NULL) {
    shutdown_request_ = new ::peloton::message::ShutdownRequest;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.shutdown_request)
  return shutdown_request_;
}
::peloton::message::ShutdownRequest* PelotonMessage::release_shutdown_request() {
  clear_has_shutdown_request();
  ::peloton::message::ShutdownRequest* temp = shutdown_request_;
  shutdown_request_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_shutdown_request(::peloton::message::ShutdownRequest* shutdown_request) {
  delete shutdown_request_;
  shutdown_request_ = shutdown_request;
  if (shutdown_request) {
    set_has_shutdown_request();
  } else {
    clear_has_shutdown_request();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.shutdown_request)
}

// optional .peloton.message.ShutdownResponse shutdown_response = 30;
bool PelotonMessage::has_shutdown_response() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void PelotonMessage::set_has_shutdown_response() {
  _has_bits_[0] |= 0x20000000u;
}
void PelotonMessage::clear_has_shutdown_response() {
  _has_bits_[0] &= ~0x20000000u;
}
void PelotonMessage::clear_shutdown_response() {
  if (shutdown_response_ != NULL) shutdown_response_->::peloton::message::ShutdownResponse::Clear();
  clear_has_shutdown_response();
}
const ::peloton::message::ShutdownResponse& PelotonMessage::shutdown_response() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.shutdown_response)
  return shutdown_response_ != NULL ? *shutdown_response_ : *default_instance_->shutdown_response_;
}
::peloton::message::ShutdownResponse* PelotonMessage::mutable_shutdown_response() {
  set_has_shutdown_response();
  if (shutdown_response_ == NULL) {
    shutdown_response_ = new ::peloton::message::ShutdownResponse;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.shutdown_response)
  return shutdown_response_;
}
::peloton::message::ShutdownResponse* PelotonMessage::release_shutdown_response() {
  clear_has_shutdown_response();
  ::peloton::message::ShutdownResponse* temp = shutdown_response_;
  shutdown_response_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_shutdown_response(::peloton::message::ShutdownResponse* shutdown_response) {
  delete shutdown_response_;
  shutdown_response_ = shutdown_response;
  if (shutdown_response) {
    set_has_shutdown_response();
  } else {
    clear_has_shutdown_response();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.shutdown_response)
}

// optional .peloton.message.HeartbeatRequest heartbeat_request = 31;
bool PelotonMessage::has_heartbeat_request() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void PelotonMessage::set_has_heartbeat_request() {
  _has_bits_[0] |= 0x40000000u;
}
void PelotonMessage::clear_has_heartbeat_request() {
  _has_bits_[0] &= ~0x40000000u;
}
void PelotonMessage::clear_heartbeat_request() {
  if (heartbeat_request_ != NULL) heartbeat_request_->::peloton::message::HeartbeatRequest::Clear();
  clear_has_heartbeat_request();
}
const ::peloton::message::HeartbeatRequest& PelotonMessage::heartbeat_request() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.heartbeat_request)
  return heartbeat_request_ != NULL ? *heartbeat_request_ : *default_instance_->heartbeat_request_;
}
::peloton::message::HeartbeatRequest* PelotonMessage::mutable_heartbeat_request() {
  set_has_heartbeat_request();
  if (heartbeat_request_ == NULL) {
    heartbeat_request_ = new ::peloton::message::HeartbeatRequest;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.heartbeat_request)
  return heartbeat_request_;
}
::peloton::message::HeartbeatRequest* PelotonMessage::release_heartbeat_request() {
  clear_has_heartbeat_request();
  ::peloton::message::HeartbeatRequest* temp = heartbeat_request_;
  heartbeat_request_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_heartbeat_request(::peloton::message::HeartbeatRequest* heartbeat_request) {
  delete heartbeat_request_;
  heartbeat_request_ = heartbeat_request;
  if (heartbeat_request) {
    set_has_heartbeat_request();
  } else {
    clear_has_heartbeat_request();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.heartbeat_request)
}

// optional .peloton.message.HeartbeatResponse heartbeat_response = 32;
bool PelotonMessage::has_heartbeat_response() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void PelotonMessage::set_has_heartbeat_response() {
  _has_bits_[0] |= 0x80000000u;
}
void PelotonMessage::clear_has_heartbeat_response() {
  _has_bits_[0] &= ~0x80000000u;
}
void PelotonMessage::clear_heartbeat_response() {
  if (heartbeat_response_ != NULL) heartbeat_response_->::peloton::message::HeartbeatResponse::Clear();
  clear_has_heartbeat_response();
}
const ::peloton::message::HeartbeatResponse& PelotonMessage::heartbeat_response() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.heartbeat_response)
  return heartbeat_response_ != NULL ? *heartbeat_response_ : *default_instance_->heartbeat_response_;
}
::peloton::message::HeartbeatResponse* PelotonMessage::mutable_heartbeat_response() {
  set_has_heartbeat_response();
  if (heartbeat_response_ == NULL) {
    heartbeat_response_ = new ::peloton::message::HeartbeatResponse;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.heartbeat_response)
  return heartbeat_response_;
}
::peloton::message::HeartbeatResponse* PelotonMessage::release_heartbeat_response() {
  clear_has_heartbeat_response();
  ::peloton::message::HeartbeatResponse* temp = heartbeat_response_;
  heartbeat_response_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_heartbeat_response(::peloton::message::HeartbeatResponse* heartbeat_response) {
  delete heartbeat_response_;
  heartbeat_response_ = heartbeat_response;
  if (heartbeat_response) {
    set_has_heartbeat_response();
  } else {
    clear_has_heartbeat_response();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.heartbeat_response)
}

// optional .peloton.message.UnevictDataRequest unevict_data_request = 33;
bool PelotonMessage::has_unevict_data_request() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void PelotonMessage::set_has_unevict_data_request() {
  _has_bits_[1] |= 0x00000001u;
}
void PelotonMessage::clear_has_unevict_data_request() {
  _has_bits_[1] &= ~0x00000001u;
}
void PelotonMessage::clear_unevict_data_request() {
  if (unevict_data_request_ != NULL) unevict_data_request_->::peloton::message::UnevictDataRequest::Clear();
  clear_has_unevict_data_request();
}
const ::peloton::message::UnevictDataRequest& PelotonMessage::unevict_data_request() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.unevict_data_request)
  return unevict_data_request_ != NULL ? *unevict_data_request_ : *default_instance_->unevict_data_request_;
}
::peloton::message::UnevictDataRequest* PelotonMessage::mutable_unevict_data_request() {
  set_has_unevict_data_request();
  if (unevict_data_request_ == NULL) {
    unevict_data_request_ = new ::peloton::message::UnevictDataRequest;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.unevict_data_request)
  return unevict_data_request_;
}
::peloton::message::UnevictDataRequest* PelotonMessage::release_unevict_data_request() {
  clear_has_unevict_data_request();
  ::peloton::message::UnevictDataRequest* temp = unevict_data_request_;
  unevict_data_request_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_unevict_data_request(::peloton::message::UnevictDataRequest* unevict_data_request) {
  delete unevict_data_request_;
  unevict_data_request_ = unevict_data_request;
  if (unevict_data_request) {
    set_has_unevict_data_request();
  } else {
    clear_has_unevict_data_request();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.unevict_data_request)
}

// optional .peloton.message.UnevictDataResponse unevict_data_response = 34;
bool PelotonMessage::has_unevict_data_response() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void PelotonMessage::set_has_unevict_data_response() {
  _has_bits_[1] |= 0x00000002u;
}
void PelotonMessage::clear_has_unevict_data_response() {
  _has_bits_[1] &= ~0x00000002u;
}
void PelotonMessage::clear_unevict_data_response() {
  if (unevict_data_response_ != NULL) unevict_data_response_->::peloton::message::UnevictDataResponse::Clear();
  clear_has_unevict_data_response();
}
const ::peloton::message::UnevictDataResponse& PelotonMessage::unevict_data_response() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.unevict_data_response)
  return unevict_data_response_ != NULL ? *unevict_data_response_ : *default_instance_->unevict_data_response_;
}
::peloton::message::UnevictDataResponse* PelotonMessage::mutable_unevict_data_response() {
  set_has_unevict_data_response();
  if (unevict_data_response_ == NULL) {
    unevict_data_response_ = new ::peloton::message::UnevictDataResponse;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.unevict_data_response)
  return unevict_data_response_;
}
::peloton::message::UnevictDataResponse* PelotonMessage::release_unevict_data_response() {
  clear_has_unevict_data_response();
  ::peloton::message::UnevictDataResponse* temp = unevict_data_response_;
  unevict_data_response_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_unevict_data_response(::peloton::message::UnevictDataResponse* unevict_data_response) {
  delete unevict_data_response_;
  unevict_data_response_ = unevict_data_response;
  if (unevict_data_response) {
    set_has_unevict_data_response();
  } else {
    clear_has_unevict_data_response();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.unevict_data_response)
}

// optional .peloton.message.TimeSyncRequest time_sync_request = 35;
bool PelotonMessage::has_time_sync_request() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void PelotonMessage::set_has_time_sync_request() {
  _has_bits_[1] |= 0x00000004u;
}
void PelotonMessage::clear_has_time_sync_request() {
  _has_bits_[1] &= ~0x00000004u;
}
void PelotonMessage::clear_time_sync_request() {
  if (time_sync_request_ != NULL) time_sync_request_->::peloton::message::TimeSyncRequest::Clear();
  clear_has_time_sync_request();
}
const ::peloton::message::TimeSyncRequest& PelotonMessage::time_sync_request() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.time_sync_request)
  return time_sync_request_ != NULL ? *time_sync_request_ : *default_instance_->time_sync_request_;
}
::peloton::message::TimeSyncRequest* PelotonMessage::mutable_time_sync_request() {
  set_has_time_sync_request();
  if (time_sync_request_ == NULL) {
    time_sync_request_ = new ::peloton::message::TimeSyncRequest;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.time_sync_request)
  return time_sync_request_;
}
::peloton::message::TimeSyncRequest* PelotonMessage::release_time_sync_request() {
  clear_has_time_sync_request();
  ::peloton::message::TimeSyncRequest* temp = time_sync_request_;
  time_sync_request_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_time_sync_request(::peloton::message::TimeSyncRequest* time_sync_request) {
  delete time_sync_request_;
  time_sync_request_ = time_sync_request;
  if (time_sync_request) {
    set_has_time_sync_request();
  } else {
    clear_has_time_sync_request();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.time_sync_request)
}

// optional .peloton.message.TimeSyncResponse time_sync_response = 36;
bool PelotonMessage::has_time_sync_response() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void PelotonMessage::set_has_time_sync_response() {
  _has_bits_[1] |= 0x00000008u;
}
void PelotonMessage::clear_has_time_sync_response() {
  _has_bits_[1] &= ~0x00000008u;
}
void PelotonMessage::clear_time_sync_response() {
  if (time_sync_response_ != NULL) time_sync_response_->::peloton::message::TimeSyncResponse::Clear();
  clear_has_time_sync_response();
}
const ::peloton::message::TimeSyncResponse& PelotonMessage::time_sync_response() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.time_sync_response)
  return time_sync_response_ != NULL ? *time_sync_response_ : *default_instance_->time_sync_response_;
}
::peloton::message::TimeSyncResponse* PelotonMessage::mutable_time_sync_response() {
  set_has_time_sync_response();
  if (time_sync_response_ == NULL) {
    time_sync_response_ = new ::peloton::message::TimeSyncResponse;
  }
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.time_sync_response)
  return time_sync_response_;
}
::peloton::message::TimeSyncResponse* PelotonMessage::release_time_sync_response() {
  clear_has_time_sync_response();
  ::peloton::message::TimeSyncResponse* temp = time_sync_response_;
  time_sync_response_ = NULL;
  return temp;
}
void PelotonMessage::set_allocated_time_sync_response(::peloton::message::TimeSyncResponse* time_sync_response) {
  delete time_sync_response_;
  time_sync_response_ = time_sync_response;
  if (time_sync_response) {
    set_has_time_sync_response();
  } else {
    clear_has_time_sync_response();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.time_sync_response)
}

// optional string dst_addr = 37;
bool PelotonMessage::has_dst_addr() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void PelotonMessage::set_has_dst_addr() {
  _has_bits_[1] |= 0x00000010u;
}
void PelotonMessage::clear_has_dst_addr() {
  _has_bits_[1] &= ~0x00000010u;
}
void PelotonMessage::clear_dst_addr() {
  dst_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dst_addr();
}
 const ::std::string& PelotonMessage::dst_addr() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.dst_addr)
  return dst_addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PelotonMessage::set_dst_addr(const ::std::string& value) {
  set_has_dst_addr();
  dst_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.message.PelotonMessage.dst_addr)
}
 void PelotonMessage::set_dst_addr(const char* value) {
  set_has_dst_addr();
  dst_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.message.PelotonMessage.dst_addr)
}
 void PelotonMessage::set_dst_addr(const char* value, size_t size) {
  set_has_dst_addr();
  dst_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.message.PelotonMessage.dst_addr)
}
 ::std::string* PelotonMessage::mutable_dst_addr() {
  set_has_dst_addr();
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.dst_addr)
  return dst_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PelotonMessage::release_dst_addr() {
  clear_has_dst_addr();
  return dst_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PelotonMessage::set_allocated_dst_addr(::std::string* dst_addr) {
  if (dst_addr != NULL) {
    set_has_dst_addr();
  } else {
    clear_has_dst_addr();
  }
  dst_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dst_addr);
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.dst_addr)
}

// optional string src_addr = 38;
bool PelotonMessage::has_src_addr() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void PelotonMessage::set_has_src_addr() {
  _has_bits_[1] |= 0x00000020u;
}
void PelotonMessage::clear_has_src_addr() {
  _has_bits_[1] &= ~0x00000020u;
}
void PelotonMessage::clear_src_addr() {
  src_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src_addr();
}
 const ::std::string& PelotonMessage::src_addr() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.src_addr)
  return src_addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PelotonMessage::set_src_addr(const ::std::string& value) {
  set_has_src_addr();
  src_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.message.PelotonMessage.src_addr)
}
 void PelotonMessage::set_src_addr(const char* value) {
  set_has_src_addr();
  src_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.message.PelotonMessage.src_addr)
}
 void PelotonMessage::set_src_addr(const char* value, size_t size) {
  set_has_src_addr();
  src_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.message.PelotonMessage.src_addr)
}
 ::std::string* PelotonMessage::mutable_src_addr() {
  set_has_src_addr();
  // @@protoc_insertion_point(field_mutable:peloton.message.PelotonMessage.src_addr)
  return src_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PelotonMessage::release_src_addr() {
  clear_has_src_addr();
  return src_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PelotonMessage::set_allocated_src_addr(::std::string* src_addr) {
  if (src_addr != NULL) {
    set_has_src_addr();
  } else {
    clear_has_src_addr();
  }
  src_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_addr);
  // @@protoc_insertion_point(field_set_allocated:peloton.message.PelotonMessage.src_addr)
}

// optional int32 dst_addr_32 = 39;
bool PelotonMessage::has_dst_addr_32() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void PelotonMessage::set_has_dst_addr_32() {
  _has_bits_[1] |= 0x00000040u;
}
void PelotonMessage::clear_has_dst_addr_32() {
  _has_bits_[1] &= ~0x00000040u;
}
void PelotonMessage::clear_dst_addr_32() {
  dst_addr_32_ = 0;
  clear_has_dst_addr_32();
}
 ::google::protobuf::int32 PelotonMessage::dst_addr_32() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.dst_addr_32)
  return dst_addr_32_;
}
 void PelotonMessage::set_dst_addr_32(::google::protobuf::int32 value) {
  set_has_dst_addr_32();
  dst_addr_32_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.PelotonMessage.dst_addr_32)
}

// optional int32 src_addr_32 = 40;
bool PelotonMessage::has_src_addr_32() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void PelotonMessage::set_has_src_addr_32() {
  _has_bits_[1] |= 0x00000080u;
}
void PelotonMessage::clear_has_src_addr_32() {
  _has_bits_[1] &= ~0x00000080u;
}
void PelotonMessage::clear_src_addr_32() {
  src_addr_32_ = 0;
  clear_has_src_addr_32();
}
 ::google::protobuf::int32 PelotonMessage::src_addr_32() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.src_addr_32)
  return src_addr_32_;
}
 void PelotonMessage::set_src_addr_32(::google::protobuf::int32 value) {
  set_has_src_addr_32();
  src_addr_32_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.PelotonMessage.src_addr_32)
}

// optional int32 socket = 41;
bool PelotonMessage::has_socket() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void PelotonMessage::set_has_socket() {
  _has_bits_[1] |= 0x00000100u;
}
void PelotonMessage::clear_has_socket() {
  _has_bits_[1] &= ~0x00000100u;
}
void PelotonMessage::clear_socket() {
  socket_ = 0;
  clear_has_socket();
}
 ::google::protobuf::int32 PelotonMessage::socket() const {
  // @@protoc_insertion_point(field_get:peloton.message.PelotonMessage.socket)
  return socket_;
}
 void PelotonMessage::set_socket(::google::protobuf::int32 value) {
  set_has_socket();
  socket_ = value;
  // @@protoc_insertion_point(field_set:peloton.message.PelotonMessage.socket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

AbstractPelotonService::~AbstractPelotonService() {}

const ::google::protobuf::ServiceDescriptor* AbstractPelotonService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AbstractPelotonService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* AbstractPelotonService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return AbstractPelotonService_descriptor_;
}

void AbstractPelotonService::TransactionInit(::google::protobuf::RpcController* controller,
                         const ::peloton::message::TransactionInitRequest*,
                         ::peloton::message::TransactionInitResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionInit() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionWork(::google::protobuf::RpcController* controller,
                         const ::peloton::message::TransactionWorkRequest*,
                         ::peloton::message::TransactionWorkResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionWork() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionPrefetch(::google::protobuf::RpcController* controller,
                         const ::peloton::message::TransactionPrefetchResult*,
                         ::peloton::message::TransactionPrefetchAcknowledgement*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionPrefetch() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionMap(::google::protobuf::RpcController* controller,
                         const ::peloton::message::TransactionMapRequest*,
                         ::peloton::message::TransactionMapResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionMap() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionReduce(::google::protobuf::RpcController* controller,
                         const ::peloton::message::TransactionReduceRequest*,
                         ::peloton::message::TransactionReduceResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionReduce() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionPrepare(::google::protobuf::RpcController* controller,
                         const ::peloton::message::TransactionPrepareRequest*,
                         ::peloton::message::TransactionPrepareResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionPrepare() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionFinish(::google::protobuf::RpcController* controller,
                         const ::peloton::message::TransactionFinishRequest*,
                         ::peloton::message::TransactionFinishResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionFinish() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionRedirect(::google::protobuf::RpcController* controller,
                         const ::peloton::message::TransactionRedirectRequest*,
                         ::peloton::message::TransactionRedirectResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionRedirect() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionDebug(::google::protobuf::RpcController* controller,
                         const ::peloton::message::TransactionDebugRequest*,
                         ::peloton::message::TransactionDebugResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionDebug() not implemented.");
  done->Run();
}

void AbstractPelotonService::SendData(::google::protobuf::RpcController* controller,
                         const ::peloton::message::SendDataRequest*,
                         ::peloton::message::SendDataResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendData() not implemented.");
  done->Run();
}

void AbstractPelotonService::Initialize(::google::protobuf::RpcController* controller,
                         const ::peloton::message::InitializeRequest*,
                         ::peloton::message::InitializeResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Initialize() not implemented.");
  done->Run();
}

void AbstractPelotonService::ShutdownPrepare(::google::protobuf::RpcController* controller,
                         const ::peloton::message::ShutdownPrepareRequest*,
                         ::peloton::message::ShutdownPrepareResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ShutdownPrepare() not implemented.");
  done->Run();
}

void AbstractPelotonService::Shutdown(::google::protobuf::RpcController* controller,
                         const ::peloton::message::ShutdownRequest*,
                         ::peloton::message::ShutdownResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Shutdown() not implemented.");
  done->Run();
}

void AbstractPelotonService::Heartbeat(::google::protobuf::RpcController* controller,
                         const ::peloton::message::HeartbeatRequest*,
                         ::peloton::message::HeartbeatResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Heartbeat() not implemented.");
  done->Run();
}

void AbstractPelotonService::UnevictData(::google::protobuf::RpcController* controller,
                         const ::peloton::message::UnevictDataRequest*,
                         ::peloton::message::UnevictDataResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UnevictData() not implemented.");
  done->Run();
}

void AbstractPelotonService::TimeSync(::google::protobuf::RpcController* controller,
                         const ::peloton::message::TimeSyncRequest*,
                         ::peloton::message::TimeSyncResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TimeSync() not implemented.");
  done->Run();
}

void AbstractPelotonService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), AbstractPelotonService_descriptor_);
  switch(method->index()) {
    case 0:
      TransactionInit(controller,
             ::google::protobuf::down_cast<const ::peloton::message::TransactionInitRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::message::TransactionInitResponse*>(response),
             done);
      break;
    case 1:
      TransactionWork(controller,
             ::google::protobuf::down_cast<const ::peloton::message::TransactionWorkRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::message::TransactionWorkResponse*>(response),
             done);
      break;
    case 2:
      TransactionPrefetch(controller,
             ::google::protobuf::down_cast<const ::peloton::message::TransactionPrefetchResult*>(request),
             ::google::protobuf::down_cast< ::peloton::message::TransactionPrefetchAcknowledgement*>(response),
             done);
      break;
    case 3:
      TransactionMap(controller,
             ::google::protobuf::down_cast<const ::peloton::message::TransactionMapRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::message::TransactionMapResponse*>(response),
             done);
      break;
    case 4:
      TransactionReduce(controller,
             ::google::protobuf::down_cast<const ::peloton::message::TransactionReduceRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::message::TransactionReduceResponse*>(response),
             done);
      break;
    case 5:
      TransactionPrepare(controller,
             ::google::protobuf::down_cast<const ::peloton::message::TransactionPrepareRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::message::TransactionPrepareResponse*>(response),
             done);
      break;
    case 6:
      TransactionFinish(controller,
             ::google::protobuf::down_cast<const ::peloton::message::TransactionFinishRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::message::TransactionFinishResponse*>(response),
             done);
      break;
    case 7:
      TransactionRedirect(controller,
             ::google::protobuf::down_cast<const ::peloton::message::TransactionRedirectRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::message::TransactionRedirectResponse*>(response),
             done);
      break;
    case 8:
      TransactionDebug(controller,
             ::google::protobuf::down_cast<const ::peloton::message::TransactionDebugRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::message::TransactionDebugResponse*>(response),
             done);
      break;
    case 9:
      SendData(controller,
             ::google::protobuf::down_cast<const ::peloton::message::SendDataRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::message::SendDataResponse*>(response),
             done);
      break;
    case 10:
      Initialize(controller,
             ::google::protobuf::down_cast<const ::peloton::message::InitializeRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::message::InitializeResponse*>(response),
             done);
      break;
    case 11:
      ShutdownPrepare(controller,
             ::google::protobuf::down_cast<const ::peloton::message::ShutdownPrepareRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::message::ShutdownPrepareResponse*>(response),
             done);
      break;
    case 12:
      Shutdown(controller,
             ::google::protobuf::down_cast<const ::peloton::message::ShutdownRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::message::ShutdownResponse*>(response),
             done);
      break;
    case 13:
      Heartbeat(controller,
             ::google::protobuf::down_cast<const ::peloton::message::HeartbeatRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::message::HeartbeatResponse*>(response),
             done);
      break;
    case 14:
      UnevictData(controller,
             ::google::protobuf::down_cast<const ::peloton::message::UnevictDataRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::message::UnevictDataResponse*>(response),
             done);
      break;
    case 15:
      TimeSync(controller,
             ::google::protobuf::down_cast<const ::peloton::message::TimeSyncRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::message::TimeSyncResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& AbstractPelotonService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::peloton::message::TransactionInitRequest::default_instance();
    case 1:
      return ::peloton::message::TransactionWorkRequest::default_instance();
    case 2:
      return ::peloton::message::TransactionPrefetchResult::default_instance();
    case 3:
      return ::peloton::message::TransactionMapRequest::default_instance();
    case 4:
      return ::peloton::message::TransactionReduceRequest::default_instance();
    case 5:
      return ::peloton::message::TransactionPrepareRequest::default_instance();
    case 6:
      return ::peloton::message::TransactionFinishRequest::default_instance();
    case 7:
      return ::peloton::message::TransactionRedirectRequest::default_instance();
    case 8:
      return ::peloton::message::TransactionDebugRequest::default_instance();
    case 9:
      return ::peloton::message::SendDataRequest::default_instance();
    case 10:
      return ::peloton::message::InitializeRequest::default_instance();
    case 11:
      return ::peloton::message::ShutdownPrepareRequest::default_instance();
    case 12:
      return ::peloton::message::ShutdownRequest::default_instance();
    case 13:
      return ::peloton::message::HeartbeatRequest::default_instance();
    case 14:
      return ::peloton::message::UnevictDataRequest::default_instance();
    case 15:
      return ::peloton::message::TimeSyncRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *static_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& AbstractPelotonService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::peloton::message::TransactionInitResponse::default_instance();
    case 1:
      return ::peloton::message::TransactionWorkResponse::default_instance();
    case 2:
      return ::peloton::message::TransactionPrefetchAcknowledgement::default_instance();
    case 3:
      return ::peloton::message::TransactionMapResponse::default_instance();
    case 4:
      return ::peloton::message::TransactionReduceResponse::default_instance();
    case 5:
      return ::peloton::message::TransactionPrepareResponse::default_instance();
    case 6:
      return ::peloton::message::TransactionFinishResponse::default_instance();
    case 7:
      return ::peloton::message::TransactionRedirectResponse::default_instance();
    case 8:
      return ::peloton::message::TransactionDebugResponse::default_instance();
    case 9:
      return ::peloton::message::SendDataResponse::default_instance();
    case 10:
      return ::peloton::message::InitializeResponse::default_instance();
    case 11:
      return ::peloton::message::ShutdownPrepareResponse::default_instance();
    case 12:
      return ::peloton::message::ShutdownResponse::default_instance();
    case 13:
      return ::peloton::message::HeartbeatResponse::default_instance();
    case 14:
      return ::peloton::message::UnevictDataResponse::default_instance();
    case 15:
      return ::peloton::message::TimeSyncResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *static_cast< ::google::protobuf::Message*>(NULL);
  }
}

AbstractPelotonService_Stub::AbstractPelotonService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
AbstractPelotonService_Stub::AbstractPelotonService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
AbstractPelotonService_Stub::~AbstractPelotonService_Stub() {
  if (owns_channel_) delete channel_;
}

void AbstractPelotonService_Stub::TransactionInit(::google::protobuf::RpcController* controller,
                              const ::peloton::message::TransactionInitRequest* request,
                              ::peloton::message::TransactionInitResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionWork(::google::protobuf::RpcController* controller,
                              const ::peloton::message::TransactionWorkRequest* request,
                              ::peloton::message::TransactionWorkResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionPrefetch(::google::protobuf::RpcController* controller,
                              const ::peloton::message::TransactionPrefetchResult* request,
                              ::peloton::message::TransactionPrefetchAcknowledgement* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionMap(::google::protobuf::RpcController* controller,
                              const ::peloton::message::TransactionMapRequest* request,
                              ::peloton::message::TransactionMapResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionReduce(::google::protobuf::RpcController* controller,
                              const ::peloton::message::TransactionReduceRequest* request,
                              ::peloton::message::TransactionReduceResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionPrepare(::google::protobuf::RpcController* controller,
                              const ::peloton::message::TransactionPrepareRequest* request,
                              ::peloton::message::TransactionPrepareResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionFinish(::google::protobuf::RpcController* controller,
                              const ::peloton::message::TransactionFinishRequest* request,
                              ::peloton::message::TransactionFinishResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionRedirect(::google::protobuf::RpcController* controller,
                              const ::peloton::message::TransactionRedirectRequest* request,
                              ::peloton::message::TransactionRedirectResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionDebug(::google::protobuf::RpcController* controller,
                              const ::peloton::message::TransactionDebugRequest* request,
                              ::peloton::message::TransactionDebugResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::SendData(::google::protobuf::RpcController* controller,
                              const ::peloton::message::SendDataRequest* request,
                              ::peloton::message::SendDataResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::Initialize(::google::protobuf::RpcController* controller,
                              const ::peloton::message::InitializeRequest* request,
                              ::peloton::message::InitializeResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::ShutdownPrepare(::google::protobuf::RpcController* controller,
                              const ::peloton::message::ShutdownPrepareRequest* request,
                              ::peloton::message::ShutdownPrepareResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::Shutdown(::google::protobuf::RpcController* controller,
                              const ::peloton::message::ShutdownRequest* request,
                              ::peloton::message::ShutdownResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::Heartbeat(::google::protobuf::RpcController* controller,
                              const ::peloton::message::HeartbeatRequest* request,
                              ::peloton::message::HeartbeatResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::UnevictData(::google::protobuf::RpcController* controller,
                              const ::peloton::message::UnevictDataRequest* request,
                              ::peloton::message::UnevictDataResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TimeSync(::google::protobuf::RpcController* controller,
                              const ::peloton::message::TimeSyncRequest* request,
                              ::peloton::message::TimeSyncResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace peloton

// @@protoc_insertion_point(global_scope)
