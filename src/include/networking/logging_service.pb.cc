// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logging_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "logging_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace peloton {
namespace networking {

namespace {

const ::google::protobuf::Descriptor* LogRecordReplayRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogRecordReplayRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogRecordReplayResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogRecordReplayResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LoggingStatus_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* PelotonLoggingService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_logging_5fservice_2eproto() {
  protobuf_AddDesc_logging_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "logging_service.proto");
  GOOGLE_CHECK(file != NULL);
  LogRecordReplayRequest_descriptor_ = file->message_type(0);
  static const int LogRecordReplayRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecordReplayRequest, log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecordReplayRequest, sync_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecordReplayRequest, sequence_number_),
  };
  LogRecordReplayRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogRecordReplayRequest_descriptor_,
      LogRecordReplayRequest::default_instance_,
      LogRecordReplayRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecordReplayRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecordReplayRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogRecordReplayRequest));
  LogRecordReplayResponse_descriptor_ = file->message_type(1);
  static const int LogRecordReplayResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecordReplayResponse, sequence_number_),
  };
  LogRecordReplayResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogRecordReplayResponse_descriptor_,
      LogRecordReplayResponse::default_instance_,
      LogRecordReplayResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecordReplayResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecordReplayResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogRecordReplayResponse));
  ResponseType_descriptor_ = file->enum_type(0);
  LoggingStatus_descriptor_ = file->enum_type(1);
  PelotonLoggingService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_logging_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogRecordReplayRequest_descriptor_, &LogRecordReplayRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogRecordReplayResponse_descriptor_, &LogRecordReplayResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_logging_5fservice_2eproto() {
  delete LogRecordReplayRequest::default_instance_;
  delete LogRecordReplayRequest_reflection_;
  delete LogRecordReplayResponse::default_instance_;
  delete LogRecordReplayResponse_reflection_;
}

void protobuf_AddDesc_logging_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025logging_service.proto\022\022peloton.network"
    "ing\"s\n\026LogRecordReplayRequest\022\013\n\003log\030\001 \002"
    "(\014\0223\n\tsync_type\030\002 \002(\0162 .peloton.networki"
    "ng.ResponseType\022\027\n\017sequence_number\030\003 \002(\003"
    "\"2\n\027LogRecordReplayResponse\022\027\n\017sequence_"
    "number\030\001 \002(\003*1\n\014ResponseType\022\010\n\004SYNC\020\000\022\t"
    "\n\005ASYNC\020\001\022\014\n\010SEMISYNC\020\002*6\n\rLoggingStatus"
    "\022\023\n\017REPLAY_COMPLETE\020\000\022\020\n\014REPLAY_ERROR\020\0012"
    "\203\001\n\025PelotonLoggingService\022j\n\017LogRecordRe"
    "play\022*.peloton.networking.LogRecordRepla"
    "yRequest\032+.peloton.networking.LogRecordR"
    "eplayResponseB\003\200\001\001", 458);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "logging_service.proto", &protobuf_RegisterTypes);
  LogRecordReplayRequest::default_instance_ = new LogRecordReplayRequest();
  LogRecordReplayResponse::default_instance_ = new LogRecordReplayResponse();
  LogRecordReplayRequest::default_instance_->InitAsDefaultInstance();
  LogRecordReplayResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_logging_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_logging_5fservice_2eproto {
  StaticDescriptorInitializer_logging_5fservice_2eproto() {
    protobuf_AddDesc_logging_5fservice_2eproto();
  }
} static_descriptor_initializer_logging_5fservice_2eproto_;
const ::google::protobuf::EnumDescriptor* ResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseType_descriptor_;
}
bool ResponseType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LoggingStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoggingStatus_descriptor_;
}
bool LoggingStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LogRecordReplayRequest::kLogFieldNumber;
const int LogRecordReplayRequest::kSyncTypeFieldNumber;
const int LogRecordReplayRequest::kSequenceNumberFieldNumber;
#endif  // !_MSC_VER

LogRecordReplayRequest::LogRecordReplayRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogRecordReplayRequest::InitAsDefaultInstance() {
}

LogRecordReplayRequest::LogRecordReplayRequest(const LogRecordReplayRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogRecordReplayRequest::SharedCtor() {
  _cached_size_ = 0;
  log_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sync_type_ = 0;
  sequence_number_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogRecordReplayRequest::~LogRecordReplayRequest() {
  SharedDtor();
}

void LogRecordReplayRequest::SharedDtor() {
  if (log_ != &::google::protobuf::internal::kEmptyString) {
    delete log_;
  }
  if (this != default_instance_) {
  }
}

void LogRecordReplayRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogRecordReplayRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogRecordReplayRequest_descriptor_;
}

const LogRecordReplayRequest& LogRecordReplayRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logging_5fservice_2eproto();
  return *default_instance_;
}

LogRecordReplayRequest* LogRecordReplayRequest::default_instance_ = NULL;

LogRecordReplayRequest* LogRecordReplayRequest::New() const {
  return new LogRecordReplayRequest;
}

void LogRecordReplayRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_log()) {
      if (log_ != &::google::protobuf::internal::kEmptyString) {
        log_->clear();
      }
    }
    sync_type_ = 0;
    sequence_number_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogRecordReplayRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes log = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sync_type;
        break;
      }

      // required .peloton.networking.ResponseType sync_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sync_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::ResponseType_IsValid(value)) {
            set_sync_type(static_cast< ::peloton::networking::ResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sequence_number;
        break;
      }

      // required int64 sequence_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_number_)));
          set_has_sequence_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogRecordReplayRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes log = 1;
  if (has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->log(), output);
  }

  // required .peloton.networking.ResponseType sync_type = 2;
  if (has_sync_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sync_type(), output);
  }

  // required int64 sequence_number = 3;
  if (has_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sequence_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogRecordReplayRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes log = 1;
  if (has_log()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->log(), target);
  }

  // required .peloton.networking.ResponseType sync_type = 2;
  if (has_sync_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sync_type(), target);
  }

  // required int64 sequence_number = 3;
  if (has_sequence_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->sequence_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogRecordReplayRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes log = 1;
    if (has_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->log());
    }

    // required .peloton.networking.ResponseType sync_type = 2;
    if (has_sync_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sync_type());
    }

    // required int64 sequence_number = 3;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sequence_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRecordReplayRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogRecordReplayRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogRecordReplayRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogRecordReplayRequest::MergeFrom(const LogRecordReplayRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log()) {
      set_log(from.log());
    }
    if (from.has_sync_type()) {
      set_sync_type(from.sync_type());
    }
    if (from.has_sequence_number()) {
      set_sequence_number(from.sequence_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogRecordReplayRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRecordReplayRequest::CopyFrom(const LogRecordReplayRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRecordReplayRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LogRecordReplayRequest::Swap(LogRecordReplayRequest* other) {
  if (other != this) {
    std::swap(log_, other->log_);
    std::swap(sync_type_, other->sync_type_);
    std::swap(sequence_number_, other->sequence_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogRecordReplayRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogRecordReplayRequest_descriptor_;
  metadata.reflection = LogRecordReplayRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogRecordReplayResponse::kSequenceNumberFieldNumber;
#endif  // !_MSC_VER

LogRecordReplayResponse::LogRecordReplayResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogRecordReplayResponse::InitAsDefaultInstance() {
}

LogRecordReplayResponse::LogRecordReplayResponse(const LogRecordReplayResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogRecordReplayResponse::SharedCtor() {
  _cached_size_ = 0;
  sequence_number_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogRecordReplayResponse::~LogRecordReplayResponse() {
  SharedDtor();
}

void LogRecordReplayResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogRecordReplayResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogRecordReplayResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogRecordReplayResponse_descriptor_;
}

const LogRecordReplayResponse& LogRecordReplayResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logging_5fservice_2eproto();
  return *default_instance_;
}

LogRecordReplayResponse* LogRecordReplayResponse::default_instance_ = NULL;

LogRecordReplayResponse* LogRecordReplayResponse::New() const {
  return new LogRecordReplayResponse;
}

void LogRecordReplayResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sequence_number_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogRecordReplayResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sequence_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_number_)));
          set_has_sequence_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogRecordReplayResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 sequence_number = 1;
  if (has_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sequence_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogRecordReplayResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 sequence_number = 1;
  if (has_sequence_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sequence_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogRecordReplayResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 sequence_number = 1;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sequence_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRecordReplayResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogRecordReplayResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogRecordReplayResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogRecordReplayResponse::MergeFrom(const LogRecordReplayResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence_number()) {
      set_sequence_number(from.sequence_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogRecordReplayResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRecordReplayResponse::CopyFrom(const LogRecordReplayResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRecordReplayResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LogRecordReplayResponse::Swap(LogRecordReplayResponse* other) {
  if (other != this) {
    std::swap(sequence_number_, other->sequence_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogRecordReplayResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogRecordReplayResponse_descriptor_;
  metadata.reflection = LogRecordReplayResponse_reflection_;
  return metadata;
}


// ===================================================================

PelotonLoggingService::~PelotonLoggingService() {}

const ::google::protobuf::ServiceDescriptor* PelotonLoggingService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PelotonLoggingService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* PelotonLoggingService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return PelotonLoggingService_descriptor_;
}

void PelotonLoggingService::LogRecordReplay(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::LogRecordReplayRequest*,
                         ::peloton::networking::LogRecordReplayResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LogRecordReplay() not implemented.");
  done->Run();
}

void PelotonLoggingService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), PelotonLoggingService_descriptor_);
  switch(method->index()) {
    case 0:
      LogRecordReplay(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::LogRecordReplayRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::LogRecordReplayResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& PelotonLoggingService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::peloton::networking::LogRecordReplayRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& PelotonLoggingService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::peloton::networking::LogRecordReplayResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

PelotonLoggingService_Stub::PelotonLoggingService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
PelotonLoggingService_Stub::PelotonLoggingService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
PelotonLoggingService_Stub::~PelotonLoggingService_Stub() {
  if (owns_channel_) delete channel_;
}

void PelotonLoggingService_Stub::LogRecordReplay(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::LogRecordReplayRequest* request,
                              ::peloton::networking::LogRecordReplayResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace networking
}  // namespace peloton

// @@protoc_insertion_point(global_scope)
