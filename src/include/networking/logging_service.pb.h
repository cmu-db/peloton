//===----------------------------------------------------------------------===//
//
//                         Peloton
//
// logging_service.pb.h
//
// Identification: src/include/networking/logging_service.pb.h
//
// Copyright (c) 2015-16, Carnegie Mellon University Database Group
//
//===----------------------------------------------------------------------===//

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logging_service.proto

#ifndef PROTOBUF_logging_5fservice_2eproto__INCLUDED
#define PROTOBUF_logging_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace peloton {
namespace networking {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_logging_5fservice_2eproto();
void protobuf_AssignDesc_logging_5fservice_2eproto();
void protobuf_ShutdownFile_logging_5fservice_2eproto();

class LogRecordReplayRequest;
class LogRecordReplayResponse;

enum ResponseType { SYNC = 0, ASYNC = 1, SEMISYNC = 2 };
bool ResponseType_IsValid(int value);
const ResponseType ResponseType_MIN = SYNC;
const ResponseType ResponseType_MAX = SEMISYNC;
const int ResponseType_ARRAYSIZE = ResponseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseType_descriptor();
inline const ::std::string& ResponseType_Name(ResponseType value) {
  return ::google::protobuf::internal::NameOfEnum(ResponseType_descriptor(),
                                                  value);
}
inline bool ResponseType_Parse(const ::std::string& name, ResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseType>(
      ResponseType_descriptor(), name, value);
}
enum LoggingStatus { REPLAY_COMPLETE = 0, REPLAY_ERROR = 1 };
bool LoggingStatus_IsValid(int value);
const LoggingStatus LoggingStatus_MIN = REPLAY_COMPLETE;
const LoggingStatus LoggingStatus_MAX = REPLAY_ERROR;
const int LoggingStatus_ARRAYSIZE = LoggingStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoggingStatus_descriptor();
inline const ::std::string& LoggingStatus_Name(LoggingStatus value) {
  return ::google::protobuf::internal::NameOfEnum(LoggingStatus_descriptor(),
                                                  value);
}
inline bool LoggingStatus_Parse(const ::std::string& name,
                                LoggingStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoggingStatus>(
      LoggingStatus_descriptor(), name, value);
}
// ===================================================================

class LogRecordReplayRequest : public ::google::protobuf::Message {
 public:
  LogRecordReplayRequest();
  virtual ~LogRecordReplayRequest();

  LogRecordReplayRequest(const LogRecordReplayRequest& from);

  inline LogRecordReplayRequest& operator=(const LogRecordReplayRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogRecordReplayRequest& default_instance();

  void Swap(LogRecordReplayRequest* other);

  // implements Message ----------------------------------------------

  LogRecordReplayRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogRecordReplayRequest& from);
  void MergeFrom(const LogRecordReplayRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes log = 1;
  inline bool has_log() const;
  inline void clear_log();
  static const int kLogFieldNumber = 1;
  inline const ::std::string& log() const;
  inline void set_log(const ::std::string& value);
  inline void set_log(const char* value);
  inline void set_log(const void* value, size_t size);
  inline ::std::string* mutable_log();
  inline ::std::string* release_log();
  inline void set_allocated_log(::std::string* log);

  // required .peloton.networking.ResponseType sync_type = 2;
  inline bool has_sync_type() const;
  inline void clear_sync_type();
  static const int kSyncTypeFieldNumber = 2;
  inline ::peloton::networking::ResponseType sync_type() const;
  inline void set_sync_type(::peloton::networking::ResponseType value);

  // required int64 sequence_number = 3;
  inline bool has_sequence_number() const;
  inline void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 3;
  inline ::google::protobuf::int64 sequence_number() const;
  inline void set_sequence_number(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:peloton.networking.LogRecordReplayRequest)
 private:
  inline void set_has_log();
  inline void clear_has_log();
  inline void set_has_sync_type();
  inline void clear_has_sync_type();
  inline void set_has_sequence_number();
  inline void clear_has_sequence_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* log_;
  ::google::protobuf::int64 sequence_number_;
  int sync_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void protobuf_AddDesc_logging_5fservice_2eproto();
  friend void protobuf_AssignDesc_logging_5fservice_2eproto();
  friend void protobuf_ShutdownFile_logging_5fservice_2eproto();

  void InitAsDefaultInstance();
  static LogRecordReplayRequest* default_instance_;
};
// -------------------------------------------------------------------

class LogRecordReplayResponse : public ::google::protobuf::Message {
 public:
  LogRecordReplayResponse();
  virtual ~LogRecordReplayResponse();

  LogRecordReplayResponse(const LogRecordReplayResponse& from);

  inline LogRecordReplayResponse& operator=(
      const LogRecordReplayResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogRecordReplayResponse& default_instance();

  void Swap(LogRecordReplayResponse* other);

  // implements Message ----------------------------------------------

  LogRecordReplayResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogRecordReplayResponse& from);
  void MergeFrom(const LogRecordReplayResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 sequence_number = 1;
  inline bool has_sequence_number() const;
  inline void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 1;
  inline ::google::protobuf::int64 sequence_number() const;
  inline void set_sequence_number(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:peloton.networking.LogRecordReplayResponse)
 private:
  inline void set_has_sequence_number();
  inline void clear_has_sequence_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 sequence_number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void protobuf_AddDesc_logging_5fservice_2eproto();
  friend void protobuf_AssignDesc_logging_5fservice_2eproto();
  friend void protobuf_ShutdownFile_logging_5fservice_2eproto();

  void InitAsDefaultInstance();
  static LogRecordReplayResponse* default_instance_;
};
// ===================================================================

class PelotonLoggingService_Stub;

class PelotonLoggingService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline PelotonLoggingService(){};

 public:
  virtual ~PelotonLoggingService();

  typedef PelotonLoggingService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void LogRecordReplay(
      ::google::protobuf::RpcController* controller,
      const ::peloton::networking::LogRecordReplayRequest* request,
      ::peloton::networking::LogRecordReplayResponse* response,
      ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
      const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
      const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PelotonLoggingService);
};

class PelotonLoggingService_Stub : public PelotonLoggingService {
 public:
  PelotonLoggingService_Stub(::google::protobuf::RpcChannel* channel);
  PelotonLoggingService_Stub(
      ::google::protobuf::RpcChannel* channel,
      ::google::protobuf::Service::ChannelOwnership ownership);
  ~PelotonLoggingService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements PelotonLoggingService ------------------------------------------

  void LogRecordReplay(
      ::google::protobuf::RpcController* controller,
      const ::peloton::networking::LogRecordReplayRequest* request,
      ::peloton::networking::LogRecordReplayResponse* response,
      ::google::protobuf::Closure* done);

 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PelotonLoggingService_Stub);
};

// ===================================================================

// ===================================================================

// LogRecordReplayRequest

// required bytes log = 1;
inline bool LogRecordReplayRequest::has_log() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogRecordReplayRequest::set_has_log() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogRecordReplayRequest::clear_has_log() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogRecordReplayRequest::clear_log() {
  if (log_ != &::google::protobuf::internal::kEmptyString) {
    log_->clear();
  }
  clear_has_log();
}
inline const ::std::string& LogRecordReplayRequest::log() const {
  return *log_;
}
inline void LogRecordReplayRequest::set_log(const ::std::string& value) {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  log_->assign(value);
}
inline void LogRecordReplayRequest::set_log(const char* value) {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  log_->assign(value);
}
inline void LogRecordReplayRequest::set_log(const void* value, size_t size) {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  log_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRecordReplayRequest::mutable_log() {
  set_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    log_ = new ::std::string;
  }
  return log_;
}
inline ::std::string* LogRecordReplayRequest::release_log() {
  clear_has_log();
  if (log_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = log_;
    log_ = const_cast< ::std::string*>(
        &::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogRecordReplayRequest::set_allocated_log(::std::string* log) {
  if (log_ != &::google::protobuf::internal::kEmptyString) {
    delete log_;
  }
  if (log) {
    set_has_log();
    log_ = log;
  } else {
    clear_has_log();
    log_ = const_cast< ::std::string*>(
        &::google::protobuf::internal::kEmptyString);
  }
}

// required .peloton.networking.ResponseType sync_type = 2;
inline bool LogRecordReplayRequest::has_sync_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogRecordReplayRequest::set_has_sync_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogRecordReplayRequest::clear_has_sync_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogRecordReplayRequest::clear_sync_type() {
  sync_type_ = 0;
  clear_has_sync_type();
}
inline ::peloton::networking::ResponseType LogRecordReplayRequest::sync_type()
    const {
  return static_cast< ::peloton::networking::ResponseType>(sync_type_);
}
inline void LogRecordReplayRequest::set_sync_type(
    ::peloton::networking::ResponseType value) {
  assert(::peloton::networking::ResponseType_IsValid(value));
  set_has_sync_type();
  sync_type_ = value;
}

// required int64 sequence_number = 3;
inline bool LogRecordReplayRequest::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogRecordReplayRequest::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogRecordReplayRequest::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogRecordReplayRequest::clear_sequence_number() {
  sequence_number_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_number();
}
inline ::google::protobuf::int64 LogRecordReplayRequest::sequence_number()
    const {
  return sequence_number_;
}
inline void LogRecordReplayRequest::set_sequence_number(
    ::google::protobuf::int64 value) {
  set_has_sequence_number();
  sequence_number_ = value;
}

// -------------------------------------------------------------------

// LogRecordReplayResponse

// required int64 sequence_number = 1;
inline bool LogRecordReplayResponse::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogRecordReplayResponse::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogRecordReplayResponse::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogRecordReplayResponse::clear_sequence_number() {
  sequence_number_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_number();
}
inline ::google::protobuf::int64 LogRecordReplayResponse::sequence_number()
    const {
  return sequence_number_;
}
inline void LogRecordReplayResponse::set_sequence_number(
    ::google::protobuf::int64 value) {
  set_has_sequence_number();
  sequence_number_ = value;
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace networking
}  // namespace peloton

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor*
GetEnumDescriptor< ::peloton::networking::ResponseType>() {
  return ::peloton::networking::ResponseType_descriptor();
}
template <>
inline const EnumDescriptor*
GetEnumDescriptor< ::peloton::networking::LoggingStatus>() {
  return ::peloton::networking::LoggingStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_logging_5fservice_2eproto__INCLUDED
