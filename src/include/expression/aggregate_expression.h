//===----------------------------------------------------------------------===//
//
//                         Peloton
//
// operator_expression.h
//
// Identification: src/include/expression/function_expression.h
//
// Copyright (c) 2015-16, Carnegie Mellon University Database Group
//
//===----------------------------------------------------------------------===//

#pragma once

#include "common/abstract_tuple.h"
#include "common/logger.h"
#include "common/sql_node_visitor.h"
#include "expression/abstract_expression.h"
#include "planner/binding_context.h"
#include "type/value_factory.h"

namespace peloton {
namespace expression {

//===----------------------------------------------------------------------===//
// OperatorExpression
//===----------------------------------------------------------------------===//

// This expression should never be evaluated, it is only used for
// parrsing/planning/optimizing
class AggregateExpression : public AbstractExpression {
 public:
  AggregateExpression(ExpressionType type, bool distinct,
                      AbstractExpression *child)
      : AbstractExpression(type) {
    distinct_ = distinct;
    switch (type) {
      case ExpressionType::AGGREGATE_COUNT:
        if (child != nullptr &&
            child->GetExpressionType() == ExpressionType::STAR) {
          delete child;
          child = nullptr;
          exp_type_ = ExpressionType::AGGREGATE_COUNT_STAR;
          expr_name_ = "count(*)";
        } else {
          expr_name_ = "count";
        }
        break;
      case ExpressionType::AGGREGATE_SUM:
        expr_name_ = "sum";
        break;
      case ExpressionType::AGGREGATE_MIN:
        expr_name_ = "min";
        break;
      case ExpressionType::AGGREGATE_MAX:
        expr_name_ = "max";
        break;
      case ExpressionType::AGGREGATE_AVG:
        expr_name_ = "avg";
        break;
      default:
        throw Exception("Aggregate type not supported");
    }
    if (child != nullptr) {
      children_.push_back(std::unique_ptr<AbstractExpression>(child));
    }
  }

  // The only situation this function is called is in Projection for expression
  // such as sum(a) + max(b). At this point, all aggregate functions sum(a) and
  // max(b) should have been generated by GroupBy or Aggregation. So here we
  // simply use value_idx to get those values
  type::Value Evaluate(
      const AbstractTuple *tuple1, UNUSED_ATTRIBUTE const AbstractTuple *tuple2,
      UNUSED_ATTRIBUTE executor::ExecutorContext *context) const override {
    // for now support only one child
    PELOTON_ASSERT(tuple1 != nullptr);
    return tuple1->GetValue(value_idx_);
  }

  // Attribute binding
  void PerformBinding(const std::vector<const planner::BindingContext *>
                          &binding_contexts) override {
    const auto &context = binding_contexts[0];
    ai_ = context->Find(value_idx_);
    PELOTON_ASSERT(ai_ != nullptr);
    LOG_TRACE("AggregateOutput Column ID %u.%u binds to AI %p (%s)", 0,
              value_idx_, ai_, ai_->name.c_str());
  }

  const planner::AttributeInfo *GetAttributeRef() const { return ai_; }

  inline void SetValueIdx(int value_idx) { value_idx_ = value_idx; }

  AbstractExpression *Copy() const override {
    return new AggregateExpression(*this);
  }

  void DeduceExpressionType() override {
    switch (exp_type_) {
      // if count return an integer
      case ExpressionType::AGGREGATE_COUNT:
      case ExpressionType::AGGREGATE_COUNT_STAR:
        return_value_type_ = type::TypeId::INTEGER;
        break;
      // return the type of the base
      case ExpressionType::AGGREGATE_MAX:
      case ExpressionType::AGGREGATE_MIN:
      case ExpressionType::AGGREGATE_SUM:
        PELOTON_ASSERT(children_.size() >= 1);
        return_value_type_ = children_[0]->GetValueType();
        break;
      case ExpressionType::AGGREGATE_AVG:
        return_value_type_ = type::TypeId::DECIMAL;
        break;
      default:
        break;
    }
  }

  virtual void Accept(SqlNodeVisitor *v) override { v->Visit(this); }

  const std::string GetInfo(int num_indent) const override;

  const std::string GetInfo() const override;

 protected:
  AggregateExpression(const AggregateExpression &other)
      : AbstractExpression(other), value_idx_(other.value_idx_) {}

 private:
  int value_idx_ = -1;
  const planner::AttributeInfo *ai_;
};

}  // namespace expression
}  // namespace peloton
