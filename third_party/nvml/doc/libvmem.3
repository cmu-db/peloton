.\"
.\" Copyright (c) 2014-2015, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of Intel Corporation nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\"
.\" libvmem.3 -- man page for libvmem
.\"
.\" Format this man page with:
.\"	man -l libvmem.3
.\" or
.\"	groff -man -Tascii libvmem.3
.\"
.TH libvmem 3 "vmem API version 0.8.3" "NVM Library"
.SH NAME
libvmem \- volatile memory allocation library
.SH SYNOPSIS
.nf
.B #include <libvmem.h>
.sp
.B cc ... -lvmem
.sp
.B Memory pool management:
.sp
.BI "VMEM *vmem_create(const char *" dir ", size_t " size );
.BI "VMEM *vmem_create_in_region(void *" addr ", size_t " size );
.BI "void vmem_delete(VMEM *" vmp );
.BI "int vmem_check(VMEM *" vmp );
.BI "void vmem_stats_print(VMEM *" vmp ", const char *" opts );
.sp
.B Memory allocation related functions:
.sp
.BI "void *vmem_malloc(VMEM *" vmp ", size_t " size );
.BI "void vmem_free(VMEM *" vmp ", void *" ptr );
.BI "void *vmem_calloc(VMEM *" vmp ", size_t " nmemb ", size_t " size );
.BI "void *vmem_realloc(VMEM *" vmp ", void *" ptr ", size_t " size );
.BI "void *vmem_aligned_alloc(VMEM *" vmp ", size_t " alignment ", size_t " size );
.BI "char *vmem_strdup(VMEM *" vmp ", const char *" s );
.BI "size_t vmem_malloc_usable_size(VMEM *" vmp ", void *" ptr );
.sp
.B Managing overall library behavior:
.sp
.BI "const char *vmem_check_version("
.BI "           unsigned " major_required ,
.BI "           unsigned " minor_required );
.BI "void vmem_set_funcs("
.BI "           void *(*" malloc_func ")(size_t " size ),
.BI "           void (*" free_func ")(void *" ptr ),
.BI "           void *(*" realloc_func ")(void *" ptr ", size_t " size ),
.BI "           char *(*" strdup_func ")(const char *" s ),
.BI "           void (*" print_func ")(const char *" s ));
.sp
.B Error handling:
.sp
.BI "const char *vmem_errormsg(void);
.fi
.sp
.SH DESCRIPTION
.PP
.B libvmem
provides common
.I malloc-like
interfaces to memory pools built on memory-mapped files.
These interfaces are for traditional
.B volatile
memory allocation but, unlike the functions described in
.BR malloc (3),
the memory managed by
.B libvmem
may have different attributes, depending on the file system
containing the memory-mapped files.  In particular,
.B libvmem
is part of the
.I Non-Volatile Memory Library
because it is sometimes useful to use non-volatile memory as a volatile
memory pool, leveraging its capacity, cost, or performance characteristics.
.PP
.B libvmem
uses the
.BR mmap (2)
system call to create a pool of volatile memory.  The library
is most useful when used with
.I Direct Access
storage (DAX), which is memory-addressable persistent storage
that supports load/store access without being paged via the system page cache.
A Persistent Memory-aware file system is typically used to provide this
type of access.  Memory-mapping a file from a Persistent
Memory-aware file system provides the raw memory pools, and this library
supplies the more familiar
.I malloc-like
interfaces on top of those pools.
.PP
Under normal usage,
.B libvmem
will never print messages or intentionally cause the process to exit.
Exceptions to this are prints caused by calls to
.BR vmem_stats_print (),
or by enabling debugging as described under
.B DEBUGGING AND ERROR HANDLING
below.
The library uses
.BR pthreads (7)
to be fully MT-safe, but never creates or destroys threads itself.
The library does not make use of any signals, networking, and
never calls
.BR select ()
or
.BR poll ().
The system memory allocation routines like
.BR malloc ()
and
.BR free ()
are used by
.B libvmem
for managing a small amount of run-time state, but applications
are allowed to override these calls if necessary (see the description
of
.BR vmem_set_funcs ()
below).
.PP
.B libvmem
interfaces are grouped into three categories: those that manage
memory pools, those providing the basic
memory allocation functions, and those interfaces
less commonly used for managing
the overall library behavior.  These groups of interfaces are
described in the following three sections.
.SH MANAGING MEMORY POOLS
.PP
To use
.BR libvmem ,
a
.I memory pool
is first created.  This is most commonly done with the
.BR vmem_create ()
function described in this section.
The other functions
described in this section are for less common cases, where
applications have special needs for creating pools or examining
library state.
.PP
Once created, a memory pool is represented by an opaque pool handle,
of type
.IR "VMEM *" ,
which is passed to the functions for memory allocation described in
the next section.
.PP
.BI "VMEM *vmem_create(const char *" dir ", size_t " size );
.IP
The
.BR vmem_create ()
function creates a memory pool.  The resulting pool is then used with
functions like
.BR vmem_malloc ()
and
.BR vmem_free ()
to provide the familiar
.I malloc-like
programming model for the memory pool.
.BR vmem_create ()
creates the pool by allocating a
temporary file in the given directory
.IR dir .
The file is created in a fashion similar to
.BR tmpfile (3),
so that the file name does not appear when the directory is listed and
the space is automatically freed when the program terminates.
.I size
bytes are allocated
and the resulting space is memory-mapped.
The minimum
.I size
value allowed by the library is defined in
.B <libvmem.h>
as
.BR VMEM_MIN_POOL .
Calling
.BR vmem_create ()
with a size smaller than that will return an error.
The maximum allowed size is not limited by
.BR libvmem ,
but by the file system specified by the
.I dir
argument.
The
.I size
passed in is the raw size of the memory pool and
.B libvmem
will use some of that space for its own metadata.
.BR vmem_create ()
returns an opaque memory pool handle or NULL if an error occurred
(in which case
.I errno
is set appropriately).  The opaque memory pool handle
is then used with the other functions
described in this man page that operate on a specific memory pool.
.PP
.BI "VMEM *vmem_create_in_region(void *" addr ", size_t " size );
.IP
The
.BR vmem_create_in_region ()
is an alternate
.B libvmem
entry point for creating a memory pool.
It is for the rare case where an application needs to create
a memory pool from an already memory-mapped region.
Instead of allocating space from a given file system,
.BR vmem_create_in_region ()
is given the memory region explicitly via the
.I addr
and
.I size
arguments.
Any data in the region is lost by calling
.BR vmem_create_in_region (),
which will immediately store its own data structures for managing
the pool there.
Like
.BR vmem_create ()
above, the minimum
.I size
allowed is defined as
.BR VMEM_MIN_POOL .
The
.I addr
argument must be page aligned.
.BR vmem_create_in_region ()
returns an opaque memory pool handle or NULL if an error occurred
(in which case
.I errno
is set appropriately).
Undefined behavior occurs if
.I addr
does not point to the contiguous memory region in the virtual address
space of the calling process, or if the
.I size
is larger than the actual size of the memory region pointed by
.IR addr .
.PP
.BI "void vmem_delete(VMEM *" vmp );
.IP
The
.BR vmem_delete ()
function releases the memory pool
.IR vmp .
If the memory pool was created using
.BR vmem_create_pool (),
deleting it allows the space to be reclaimed.
.PP
.BI "int vmem_check(VMEM *" vmp );
.IP
The
.BR vmem_check ()
function
performs an extensive consistency check of all
.B libvmem
internal data structures in memory pool
.IR vmp .
It returns 1 if the memory pool during the check is found to be consistent
and 0 otherwise. Cases where the check couldn't be performed,
are indicated by a return value of -1.
Since an error return indicates memory pool corruption, applications
should not continue to use a pool in this state.
Additional details about errors found are logged when the log level
is at least 1 (see
.B DEBUGGING AND ERROR HANDLING
below).
During the consistency check performed by
.BR vmem_check (),
other operations on the same memory pool are locked out.
The checks are all read-only;
.BR vmem_check ()
never modifies the memory pool.
This function is mostly useful for
.B libvmem
developers during testing/debugging.
.PP
.BI "void vmem_stats_print(VMEM *" vmp ", const char *" opts );
.IP
The
.BR vmem_stats_print ()
function produces messages containing statistics about the
given memory pool.
The output is printed using
.BR libvmem 's
internal
.I print_func
function (see
.BR vmem_set_funcs ()
below).  That means the output typically appears on
.B stderr
unless the caller supplies a replacement
.I print_func
or sets the environment variable
.B VMEM_LOG_FILE
to direct output elsewhere.
The
.I opts
string can either be NULL or it can contain a list of options
that change the stats printed.
General information that never changes during execution can be
omitted by specifying "g" as a character within the opts string.
The characters "m" and "a" can be specified to omit merged arena
and per arena statistics, respectively; "b" and "l" can be specified
to omit per size class statistics for bins and large objects, respectively.
Unrecognized characters are silently ignored.
Note that thread caching may prevent some statistics from being
completely up to date.
See
.BR jemalloc (3)
for more detail (the description of the available
.I opts
above was taken from that man page).
.SH MEMORY ALLOCATION
.PP
This section describes the
.I malloc-like
API provided by
.BR libvmem .
These functions provide the same semantics as their libc namesakes,
but operate on the memory pools specified by their first arguments.
.PP
.BI "void *vmem_malloc(VMEM *" vmp ", size_t " size );
.IP
The
.BR vmem_malloc ()
function provides the same semantics as
.BR malloc (3),
but operates on the memory pool
.I vmp
instead of the process heap supplied by the system.
It allocates
.I size
bytes and returns a pointer to the allocated memory.
.IR "The memory is not initialized" .
If
.I size
is 0, then
.BR vmem_malloc ()
returns either NULL,
or a unique pointer value that can later be successfully passed to
.BR vmem_free ().
If
.BR vmem_malloc ()
is unable to satisfy the allocation request, a NULL pointer is
returned and errno is set appropriately.
.PP
.BI "void vmem_free(VMEM *" vmp ", void *" ptr );
.IP
The
.BR vmem_free ()
function provides the same semantics as
.BR free (3),
but operates on the memory pool
.I vmp
instead of the process heap supplied by the system.
It frees the memory space pointed to by
.IR ptr ,
which must have been returned by a previous call to
.BR vmem_malloc (),
.BR vmem_calloc ()
or
.BR vmem_realloc ()
for
.IR "the same pool of memory" .
Undefined behavior occurs if frees do not correspond to allocated
memory from the same memory pool.
If
.I ptr
is NULL, no operation is performed.
.PP
.BI "void *vmem_calloc(VMEM *" vmp ", size_t " nmemb ", size_t " size );
.IP
The
.BR vmem_calloc ()
function provides the same semantics as
.BR calloc (3),
but operates on the memory pool
.I vmp
instead of the process heap supplied by the system.
It allocates memory for an array of
.I nmemb
elements of
.I size
bytes each and returns a pointer to the allocated memory.
The memory is set to zero.
If
.I nmemb
or
.I size
is 0, then
.BR vmem_calloc ()
returns either NULL,
or a unique pointer value that can later be successfully passed to
.BR vmem_free ().
If
.BR vmem_calloc ()
is unable to satisfy the allocation request, a NULL pointer is
returned and errno is set appropriately.
.PP
.BI "void *vmem_realloc(VMEM *" vmp ", void *" ptr ", size_t " size );
.IP
The
.BR vmem_realloc ()
function provides the same semantics as
.BR realloc (3),
but operates on the memory pool
.I vmp
instead of the process heap supplied by the system.
It changes the size of the memory block pointed to by
.I ptr
to
.I size
bytes.
The contents will be unchanged in the range from the start of the region
up to the minimum of the old and new sizes.
If the new size is larger than the old size, the added memory will
.I not
be initialized.
If
.I ptr
is NULL, then the call is equivalent to
.IR "vmem_malloc(vmp, size)" ,
for all values of
.IR size ;
if
.I size
is equal to zero,
and
.I ptr
is not NULL, then the call is equivalent to
.IR "vmem_free(vmp, ptr)" .
Unless
.I ptr
is NULL, it must have been returned by an earlier call to
.BR vmem_malloc (),
.BR vmem_calloc ()
or
.BR vmem_realloc ().
If the area pointed to was moved, a
.I vmem_free(vmp, ptr)
is done.
If
.BR vmem_realloc ()
is unable to satisfy the allocation request, a NULL pointer is
returned and errno is set appropriately.
.PP
.BI "void *vmem_aligned_alloc(VMEM *" vmp ", size_t " alignment ", size_t " size );
.IP
The
.BR vmem_aligned_alloc ()
function provides the same semantics as
.BR aligned_alloc (3),
but operates on the memory pool
.I vmp
instead of the process heap supplied by the system.
It allocates
.I size
bytes from the memory pool and returns a pointer
to the allocated memory.
The memory address will be a multiple of
.IR alignment ,
which must be a power of two.
If
.BR vmem_aligned_alloc ()
is unable to satisfy the allocation request, a NULL pointer is
returned and errno is set appropriately.
.PP
.BI "char *vmem_strdup(VMEM *" vmp ", const char *" s );
.IP
The
.BR vmem_strdup ()
function provides the same semantics as
.BR strdup (3),
but operates on the memory pool
.I vmp
instead of the process heap supplied by the system.
It returns a pointer to a new string which is a
duplicate of the string
.IR s .
Memory for the new string is obtained
with
.BR vmem_malloc (),
on the given memory pool, and can be freed with
.BR vmem_free ()
on the same memory pool.
If
.BR vmem_strdup ()
is unable to satisfy the allocation request, a NULL pointer is
returned and errno is set appropriately.
.PP
.BI "size_t vmem_malloc_usable_size(VMEM *" vmp ", void *" ptr );
.IP
The
.BR vmem_malloc_usable_size ()
function provides the same semantics as
.BR malloc_usable_size (3),
but operates on the memory pool
.I vmp
instead of the process heap supplied by the system.
It returns the number of usable bytes in the block of allocated memory pointed to by
.IR ptr ,
a pointer to a block of memory allocated by
.BR vmem_malloc ()
or a related function. If
.I ptr
is NULL, 0 is returned.
.SH MANAGING LIBRARY BEHAVIOR
.PP
The library entry points described in this section are less
commonly used than the previous section.
These entry points expose library information or alter
the default library behavior.
.PP
.nf
.BI "const char *vmem_check_version("
.BI "           unsigned " major_required ,
.BI "           unsigned " minor_required );
.fi
.IP
The
.BR vmem_check_version ()
function is used to see if the installed
.B libvmem
supports the version of the library API required by an application.
The easiest way to do this is for the application to supply the
compile-time version information, supplied by defines in
.BR <libvmem.h> ,
like this:
.IP
.nf
reason = vmem_check_version(VMEM_MAJOR_VERSION,
                            VMEM_MINOR_VERSION);
if (reason != NULL) {
    /*  version check failed, reason string tells you why */
}
.fi
.IP
Any mismatch in the major version number is considered a failure,
but a library with a newer minor version number will pass this
check since increasing minor versions imply backwards compatibility.
.IP
An application can also check specifically for the existence of
an interface by checking for the version where that interface was
introduced.  These versions are documented in this man page as follows:
unless otherwise specified, all interfaces described here are available
in version 1.0 of the library.  Interfaces added after version 1.0
will contain the text
.I introduced in version x.y
in the section of this manual describing the feature.
.IP
When the version check performed by
.BR vmem_check_version ()
is successful, the return value is NULL.  Otherwise the return value
is a static string describing the reason for failing the version check.
The string returned by
.BR vmem_check_version ()
must not be modified or freed.
.PP
.nf
.BI "void vmem_set_funcs("
.BI "           void *(*" malloc_func ")(size_t " size ),
.BI "           void (*" free_func ")(void *" ptr ),
.BI "           void *(*" realloc_func ")(void *" ptr ", size_t " size ),
.BI "           char *(*" strdup_func ")(const char *" s ),
.BI "           void (*" print_func ")(const char *" s ));
.fi
.IP
The
.BR vmem_set_funcs ()
function allows an application to override some
interfaces used internally by
.BR libvmem .
Passing in NULL for any of the handlers will cause the
.B libvmem
default function to be used.
The library does not make heavy use of the system malloc functions, but
it does allocate approximately 4-8 kilobytes for each memory pool in use.
The only functions in the malloc family used by the library are represented
by the first four arguments to
.BR vmem_set_funcs ().
The
.I print_func
function is called by
.B libvmem
when the
.BR vmem_stats_print ()
entry point is used, or when additional tracing is enabled
in the debug version of the library as described in the
.B DEBUGGING AND ERROR HANDLING
section below.
The default
.I print_func
used by the library prints to
the file specified by the
.B VMEM_LOG_FILE
environment variable, or to
.B stderr
if that variable is not set.
.SH DEBUGGING AND ERROR HANDLING
.PP
Two versions of
.B libvmem
are typically available on a development system.
The normal version, accessed when a program is
linked using the
.B -lvmem
option, is optimized for performance.  That version skips checks
that impact performance and never logs any trace information or performs
any run-time assertions.  If an error is detected during the call to
.B libvmem
function, an application may retrieve an error message describing the
reason of failure using the following function:
.PP
.BI "const char *vmem_errormsg(void);
.IP
The
.BR vmem_errormsg ()
function returns a pointer to a static buffer containing the last error
message logged for current thread.  The error message may include
description of the corresponding error code (if errno was set), as returned by
.BR strerror (3).
The error message buffer is thread-local; errors encountered in one thread
do not affect its value in other threads.
The buffer is never cleared by any library function; its content is
significant only when the return value of the immediately preceding call to
.B libvmem
function indicated an error, or if errno was set.
The application must not modify or free the error message string,
but it may be modified by subsequent calls to other library functions.
.PP
A second version of
.BR libvmem ,
accessed when a program uses the libraries under
.BR /usr/lib/nvml_debug ,
contains run-time assertions and trace points.
The typical way to access the debug version is to set the environment variable
.B LD_LIBRARY_PATH
to
.B /usr/lib/nvml_debug
or
.B /usr/lib64/nvml_debug
depending on where the debug libraries are installed on the system.
The trace points in the debug version of the library
are enabled using the environment variable
.BR VMEM_LOG_LEVEL ,
which can be set to the following values:
.IP 0
This is the default level when
.B VMEM_LOG_LEVEL
is not set.
Only statistics are logged, and then only in response to a call to
.BR vmem_stats_print ().
.IP 1
Additional details on any errors detected are logged (in addition
to returning the errno-based errors as usual).  The same information
may be retrieved using
.BR vmem_errormsg ().
.IP 2
A trace of basic operations including allocations and deallocations
is logged.
.IP 3
This level enables a very verbose amount of function call tracing
in the library.
.IP 4
This level enables voluminous and fairly obscure tracing information
that is likely only useful to the
.B libvmem
developers.
.PP
The environment variable
.B VMEM_LOG_FILE
specifies a file name where all logging information should be written.
If the last character in the name is "-", the PID of the current process
will be appended to the file name when the log file is created.  If
.B VMEM_LOG_FILE
is not set, output goes to stderr.
All prints are done using the
.I print_func
function in
.B libvmem
(see
.BR vmem_set_funcs ()
above for details on how to override that function).
.PP
Setting the environment variable
.B VMEM_LOG_LEVEL
has no effect on the non-debug version of
.BR libvmem .
.SH EXAMPLE
.PP
The following example creates a memory pool, allocates some memory to contain
the string "hello, world", and then frees that memory.
.IP
.nf
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <libvmem.h>
	
main()
{
    VMEM *vmp;
    char *ptr;
	
    /* create minimum size pool of memory */
    if ((vmp = vmem_create("/pmem-fs",
                                VMEM_MIN_POOL)) == NULL) {
        perror("vmem_create");
        exit(1);
    }
	
    if ((ptr = vmem_malloc(vmp, 100)) == NULL) {
        perror("vmem_malloc");
        exit(1);
    }
	
    strcpy(ptr, "hello, world");
	
    /* give the memory back */
    vmem_free(vmp, ptr);
	
    /* ... */
}
.fi
.PP
See http://pmem.io/nvml/libvmem for more examples
using the
.B libvmem
API.
.SH BUGS
Unlike the normal
.BR malloc (),
which asks the system for additional memory when it runs out,
.B libvmem
allocates the size it is told to and never attempts to grow or shrink
that memory pool.
.SH ACKNOWLEDGEMENTS
.B libvmem
depends on jemalloc, written by Jason Evans, to do the heavy lifting
of managing dynamic memory allocation.  See:
.IP
http://www.canonware.com/jemalloc/
.PP
.B libvmem
builds on the persistent memory programming model
recommended by the SNIA NVM Programming Technical Work Group:
.IP
http://snia.org/nvmp
.SH "SEE ALSO"
.BR malloc (3),
.BR posix_memalign (3),
.BR strdup (3),
.BR mmap (2),
.BR strerror (3),
.BR jemalloc (3),
.BR libpmem (3).
