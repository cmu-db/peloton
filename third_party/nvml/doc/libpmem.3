.\"
.\" Copyright (c) 2014-2015, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of Intel Corporation nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\"
.\" libpmem.3 -- man page for libpmem
.\"
.\" Format this man page with:
.\"	man -l libpmem.3
.\" or
.\"	groff -man -Tascii libpmem.3
.\"
.TH libpmem 3 "pmem API version 0.8.5" "NVM Library"
.SH NAME
libpmem \- persistent memory support library
.SH SYNOPSIS
.nf
.B #include <libpmem.h>
.sp
.B cc ... -lpmem
.sp
.B Most commonly used functions:
.sp
.BI "int pmem_is_pmem(void *" addr ", size_t " len );
.BI "void pmem_persist(void *" addr ", size_t " len );
.BI "int pmem_msync(void *" addr ", size_t " len );
.BI "void *pmem_map(int " fd );
.BI "int pmem_unmap(void *" addr ", size_t " len );
.sp
.B Partial flushing operations:
.sp
.BI "void pmem_flush(void *" addr ", size_t " len );
.BI "void pmem_drain(void);"
.BI "int pmem_has_hw_drain(void);"
.sp
.B Copying to persistent memory:
.sp
.BI "void *pmem_memmove_persist(void *" pmemdest ", const void *" src ", size_t " len );
.BI "void *pmem_memcpy_persist(void *" pmemdest ", const void *" src ", size_t " len );
.BI "void *pmem_memset_persist(void *" pmemdest ", int " c ", size_t " len );
.BI "void *pmem_memmove_nodrain(void *" pmemdest ", const void *" src ", size_t " len );
.BI "void *pmem_memcpy_nodrain(void *" pmemdest ", const void *" src ", size_t " len );
.BI "void *pmem_memset_nodrain(void *" pmemdest ", int " c ", size_t " len );
.sp
.B Library API versioning:
.sp
.BI "const char *pmem_check_version("
.BI "    unsigned " major_required ,
.BI "    unsigned " minor_required );
.fi
.sp
.B Error handling:
.sp
.BI "const char *pmem_errormsg(void);
.fi
.sp
.SH DESCRIPTION
.PP
.B libpmem
provides low-level
.I persistent memory
(pmem) support for applications
using direct access storage (DAX),
which is storage that supports load/store access without
paging blocks from a block storage device.
Some types of
.I non-volatile memory DIMMs
(NVDIMMs)
provide this type of byte addressable access to storage.
A
.I persistent memory aware file system
is typically used to expose the direct access to applications.
Memory mapping a file from this type of file system
results in the load/store, non-paged access to pmem.
.PP
This library is for applications that use persistent
memory directly, without the help of any library-supplied
transactions or memory allocation.  Higher-level libraries
that build on
.B libpmem
are available and are recommended for most applications, see:
.IP
.BR libpmemobj (3),
a general use persistent memory API,
providing memory allocation and transactional
operations on variable-sized objects.
.IP
.BR libpmemblk (3),
providing pmem-resident arrays of fixed-sized blocks with atomic updates.
.IP
.BR libpmemlog (3),
providing a pmem-resident log file.
.PP
Under normal usage,
.B libpmem
will never print messages or intentionally cause the process to exit.
The only exception to this is the debugging information, when enabled, as
described under
.B "DEBUGGING AND ERROR HANDLING"
below.
.SH MOST COMMONLY USED FUNCTIONS
.PP
Most pmem-aware applications will take advantage
of higher level libraries that alleviate the application from calling
into
.B libpmem
directly.
Application developers that wish to
access raw memory mapped persistence directly (via
.BR mmap (2))
and that wish to take on the responsibility for flushing stores to
persistence will find the functions described in this section
to be the most commonly used.
.PP
.BI "int pmem_is_pmem(void *" addr ", size_t " len );
.IP
The
.BR pmem_is_pmem ()
function returns true only if the entire range
.IR "" [ addr ", " addr + len )
consists of persistent memory.  A true return from
.BR pmem_is_pmem ()
means it is safe to use
.BR pmem_persist ()
and the related functions below to make changes durable for that
memory range.
.IP
The implementation of
.BR pmem_is_pmem ()
requires a non-trivial amount of work to determine if the given range
is entirely persistent memory.  For this reason, it is better to call
.BR pmem_is_pmem ()
once when a range of memory is first encountered, save the result, and
use the saved result to determine whether
.BR pmem_persist ()
or
.BR msync (2)
is appropriate for flushing changes to persistence.  Calling
.BR pmem_is_pmem ()
each time changes are flushed to persistence will not perform well.
.IP
WARNING: Using
.BR pmem_persist ()
on a range where
.BR pmem_is_pmem ()
returns false may not do anything useful -- use
.BR msync (2)
instead.
.PP
.BI "void pmem_persist(void *" addr ", size_t " len );
.IP
Force any changes in the range
.IR "" [ addr ", " addr + len )
to be stored
durably in persistent memory.  This is equivalent to calling
.BR msync (2)
but may be more optimal and will
avoid calling into the kernel if possible.
There are no alignment restrictions on
the range described by
.I addr
and
.IR len ,
but
.BR pmem_persist ()
may expand the range as necessary
to meet platform alignment requirements.
.IP
WARNING: Like
.BR msync (2),
there is nothing
atomic or transactional about this call.  Any
unwritten stores in the given range will be written,
but some stores may have already been written by
virtue of normal cache eviction/replacement policies.
Correctly written code must not depend on stores
waiting until
.BR pmem_persist ()
is called to become
persistent -- they can become persistent at any time
before
.BR pmem_persist ()
is called.
.PP
.BI "int pmem_msync(void *" addr ", size_t " len );
.IP
The function
.BR pmem_msync ()
is like
.BR pmem_persist ()
in that it forces any changes in the range
.IR "" [ addr ", " addr + len )
to be stored
durably.  Since it calls
.BR msync (),
this function works on either persistent memory or a
memory mapped file on traditional storage.
.BR pmem_msync ()
takes steps to ensure the alignment of addresses and lengths
passed to
.BR msync ()
meet the requirements of that system call.
It calls
.BR msync ()
with the
.I MS_SYNC
flag as described in
.BR msync (2).
Typically the application only checks for the existence of
persistent memory once, and then uses that result throughout
the program, for example:
.IP
.nf
    /* do this call once, after the pmem is memory mapped */
    int is_pmem = pmem_is_pmem(rangeaddr, rangelen);

    /* ... make changes to a range of pmem ... */

    /* make the changes durable */
    if (is_pmem)
        pmem_persist(subrangeaddr, subrangelen);
    else
        pmem_msync(subrangeaddr, subrangelen);

    /* ... */
.fi
.IP
The return value of
.BR pmem_msync ()
is the return value of
.BR msync (),
which can return -1 and set errno to indicate an error.
.PP
.BI "void *pmem_map(int " fd );
.IP
The
.BR pmem_map ()
function creates a new read/write mapping for the entire file
referred by to file descriptor
.IR fd ,
where
.I fd
must be a file descriptor for a file opened for both reading
and writing.
.BR pmem_map ()
will map the file using
.BR mmap (2),
but it also takes extra steps to make large page mappings more
likely.  On success,
.BR pmem_map ()
returns a pointer to mapped area.  On error, NULL is returned, and
errno is set appropriately.  To delete mappings created with
.BR pmem_map (),
use
.BR pmem_unmap ().
.PP
.BI "int pmem_unmap(void *" addr ", size_t " len );
.IP
The
.BR pmem_unmap ()
function deletes all the mappings for the specified address range, and
causes further references to addresses within the range to generate
invalid memory references. It will use the address specified by the
parameter
.IR addr ,
where
.I addr
must be a previously mapped region.
.BR pmem_unmap ()
will delete the mappings using the
.BR munmap (2),
On success,
.BR pmem_unmap ()
returns zero.  On error, -1 is returned, and
errno is set appropriately.
.SH PARTIAL FLUSHING OPERATIONS
.PP
The functions in this section provide access to the stages
of flushing to persistence, for the less common cases where
an application needs more control of the flushing operations
than the
.BR pmem_persist ()
function described above.
.PP
.BI "void pmem_flush(void *" addr ", size_t " len );
.br
.BI "void pmem_drain(void);"
.IP
These functions provide partial versions of the
.BR pmem_persist ()
function described above.
.BR pmem_persist ()
can be thought of as this:
.IP
.nf
void
pmem_persist(void *addr, size_t len)
{
    /* flush the processor caches */
    pmem_flush(addr, len);
	
    /* wait for any pmem stores to drain from HW buffers */
    pmem_drain();
}
.fi
.IP
These functions allow advanced programs to create their
own variations of
.BR pmem_persist ().
For example, a program
that needs to flush several discontiguous ranges can call
.BR pmem_flush ()
for each range and then follow up by
calling
.BR pmem_drain ()
once.
.IP
NOTE: Some software is designed for custom platforms that obviate the
need for using PCOMMIT (perhaps the platform issues PCOMMIT on shutdown
or something similar).  Even in such cases, it is recommended that
applications using
.B libpmem
do not skip the step of calling
.BR pmem_drain (),
either directly or by using
.BR pmem_persist ().
The recommended way to inhibit use of the PCOMMIT instruction is
by setting the
.B PMEM_NO_PCOMMIT
environment variable as described in the
.B ENVIRONMENT VARIABLES
section.
.PP
.BI "int pmem_has_hw_drain(void);"
.IP
The
.BR pmem_has_hw_drain ()
function returns true if the machine supports the
.I hardware drain
function for persistent memory, such as that provided by the
.B PCOMMIT
instruction on Intel processors.  If support for hardware drain
is not found, or cannot be detected by the library,
.BR pmem_has_hw_drain ()
will return false.  Although it is typically an administrative task
to provide the correct platform configuration for persistent memory,
this function is provided for the less common cases where an application
needs to ensure this feature is available.  Note that the lack of this
feature means that calling
.BR pmem_persist ()
may not fully ensure stores are durable, without additional platform
features such as Asynchronous DRAM Refresh (ADR) or something similar.
.SH COPYING TO PERSISTENT MEMORY
.PP
The functions in this section provide optimized copying to
persistent memory.
.PP
.BI "void *pmem_memmove_persist(void *" pmemdest ", const void *" src ,
.br
.BI "    size_t " len );
.br
.BI "void *pmem_memcpy_persist(void *" pmemdest ", const void *" src ", size_t " len );
.br
.BI "void *pmem_memset_persist(void *" pmemdest ", int " c ", size_t " len );
.IP
The
.BR pmem_memmove_persist (),
.BR pmem_memcpy_persist (),
and
.BR pmem_memset_persist (),
functions provide the same memory copying as their namesakes
.BR memmove (3)
.BR memcpy (3),
and
.BR memset (3),
and ensure that the result has been flushed to persistence before
returning.  For example, the following code is functionally equivalent to
.BR pmem_memmove_persist ():
.IP
.nf
void *
pmem_memmove_persist(void *pmemdest, const void *src, size_t len)
{
    void *retval = memmove(pmemdest, src, len);

    pmem_persist(pmemdest, len);

    return retval;
}
.fi
.IP
Calling
.BR pmem_memmove_persist ()
may out-perform the above code, however, since the
.B libpmem
implementation may take advantage of the fact that
.I pmemdest
is persistent memory and use instructions such as
.I non-temporal
stores to avoid the need to flush processor caches.
.IP
WARNING: Using these functions where
.BR pmem_is_pmem ()
returns false may not do anything useful.
Use the normal libc functions in that case.
.PP
.BI "void *pmem_memmove_nodrain(void *" pmemdest ", const void *" src ,
.br
.BI "    size_t " len );
.br
.BI "void *pmem_memcpy_nodrain(void *" pmemdest ", const void *" src ", size_t " len );
.br
.BI "void *pmem_memset_nodrain(void *" pmemdest ", int " c ", size_t " len );
.IP
The
.BR pmem_memmove_nodrain (),
.BR pmem_memcpy_nodrain ()
and
.BR pmem_memset_nodrain ()
functions are similar to
.BR pmem_memmove_persist (),
.BR pmem_memcpy_persist (),
and
.BR pmem_memset_persist ()
described above, except they skip the final
.BR pmem_drain ()
step.  This allows applications to optimize
cases where several ranges are being copied to persistent
memory, followed by a single call to
.BR pmem_drain ().
The following example illustrates how these functions
might be used to avoid multiple calls to
.BR pmem_drain ()
when copying several ranges of memory to pmem:
.IP
.nf
    /* ... write several ranges to pmem ... */
    pmem_memcpy_nodrain(pmemdest1, src1, len1);
    pmem_memcpy_nodrain(pmemdest2, src2, len2);

    /* ... */

    /* wait for any pmem stores to drain from HW buffers */
    pmem_drain();
.fi
.IP
WARNING: Using
.BR pmem_memmove_nodrain (),
.BR pmem_memcpy_nodrain ()
or
.BR pmem_memset_nodrain ()
on a destination where
.BR pmem_is_pmem ()
returns false may not do anything useful.
.SH LIBRARY API VERSIONING
.PP
This section describes how the library API is versioned,
allowing applications to work with an evolving API.
.PP
.BI "const char *pmem_check_version("
.br
.BI "           unsigned " major_required ,
.br
.BI "           unsigned " minor_required );
.IP
The
.BR pmem_check_version ()
function is used to see if the installed
.B libpmem
supports the version of the library API required by an application.
The easiest way to do this is for the application to supply the
compile-time version information, supplied by defines in
.BR <libpmem.h> ,
like this:
.IP
.nf
reason = pmem_check_version(PMEM_MAJOR_VERSION,
                            PMEM_MINOR_VERSION);
if (reason != NULL) {
    /*  version check failed, reason string tells you why */
}
.fi
.IP
Any mismatch in the major version number is considered a failure,
but a library with a newer minor version number will pass this
check since increasing minor versions imply backwards compatibility.
.IP
An application can also check specifically for the existence of
an interface by checking for the version where that interface was
introduced.  These versions are documented in this man page as follows:
unless otherwise specified, all interfaces described here are available
in version 1.0 of the library.  Interfaces added after version 1.0
will contain the text
.I introduced in version x.y
in the section of this manual describing the feature.
.IP
When the version check performed by
.BR pmem_check_version ()
is successful, the return value is NULL.  Otherwise the return value
is a static string describing the reason for failing the version check.
The string returned by
.BR pmem_check_version ()
must not be modified or freed.
.SH DEBUGGING AND ERROR HANDLING
.PP
Two versions of
.B libpmem
are typically available on a development system.
The normal version, accessed when a program is
linked using the
.B -lpmem
option, is optimized for performance.  That version skips checks
that impact performance and never logs any trace information or performs
any run-time assertions.  If an error is detected during the call to
.B libpmem
function, an application may retrieve an error message describing the
reason of failure using the following function:
.PP
.BI "const char *pmem_errormsg(void);
.IP
The
.BR pmem_errormsg ()
function returns a pointer to a static buffer containing the last error
message logged for current thread.  The error message may include
description of the corresponding error code (if errno was set), as returned by
.BR strerror (3).
The error message buffer is thread-local; errors encountered in one thread
do not affect its value in other threads.
The buffer is never cleared by any library function; its content is
significant only when the return value of the immediately preceding call to
.B libpmem
function indicated an error, or if errno was set.
The application must not modify or free the error message string,
but it may be modified by subsequent calls to other library functions.
.PP
A second version of
.BR libpmem ,
accessed when a program uses the libraries under
.BR /usr/lib/nvml_debug ,
contains run-time assertions and trace points.
The typical way to access the debug version is to set the environment variable
.B LD_LIBRARY_PATH
to
.B /usr/lib/nvml_debug
or
.B /usr/lib64/nvml_debug
depending on where the debug libraries are installed on the system.
The trace points in the debug version of the library
are enabled using the environment variable
.BR PMEM_LOG_LEVEL ,
which can be set to the following values:
.IP 0
This is the default level when
.B PMEM_LOG_LEVEL
is not set.  No log messages are emitted at this level.
.IP 1
Additional details on any errors detected are logged (in addition
to returning the errno-based errors as usual).  The same information
may be retrieved using
.BR pmem_errormsg ().
.IP 2
A trace of basic operations is logged.
.IP 3
This level enables a very verbose amount of function call tracing
in the library.
.IP 4
This level enables voluminous and fairly obscure tracing information
that is likely only useful to the
.B libpmem
developers.
.PP
The environment variable
.B PMEM_LOG_FILE
specifies a file name where all logging information should be written.
If the last character in the name is "-", the PID of the current process
will be appended to the file name when the log file is created.  If
.B PMEM_LOG_FILE
is not set, the logging output goes to stderr.
.PP
Setting the environment variable
.B PMEM_LOG_LEVEL
has no effect on the non-debug version of
.BR libpmem .
.SH ENVIRONMENT VARIABLES
.PP
.B libpmem
can change its default behavior based on the following environment variables.
These are largely intended for testing and are not normally required.
.PP
.BI PMEM_IS_PMEM_FORCE= val
.IP
If
.I val
is 0 (zero), then
.BR pmem_is_pmem ()
will always return false.  Setting
.I val
to 1 causes
.BR pmem_is_pmem ()
to always return true.  This variable is mostly used for testing
but can be used to force pmem behavior on a system where a range
of pmem is not detectable as pmem for some reason.
.PP
.B PMEM_NO_PCOMMIT=1
.IP
Setting this environment variable to 1 forces
.B libpmem
to never issue the Intel PCOMMIT instruction.  This can be used on
platforms where the hardware drain function
is performed some other way, like automatic flushing during a power failure.
.IP
WARNING: Using this environment variable incorrectly
may impact program correctness.
.PP
.B PMEM_NO_CLWB=1
.IP
Setting this environment variable to 1 forces
.B libpmem
to never issue the
.B CLWB
instruction on Intel hardware, falling back to other
cache flush instructions instead
.RB ( CLFLUSHOPT
or
.B CLFLUSH
on Intel hardware).
Without this environment variable,
.B libpmem
will always use the
.B CLWB
instruction for flushing processor caches on platforms that
support the instruction.  This variable is intended for use
during library testing but may be required for some rare cases
where using
.B CLWB
has a negative impact on performance.
.PP
.B PMEM_NO_CLFLUSHOPT=1
.IP
Setting this environment variable to 1 forces
.B libpmem
to never issue the
.B CLFLUSHOPT
instruction on Intel hardware, falling back to the
.B CLFLUSH
instructions instead.
Without this environment variable,
.B libpmem
will always use the
.B CLFLUSHOPT
instruction for flushing processor caches on platforms that
support the instruction, but where
.B CLWB
is not available.
This variable is intended for use
during library testing.
.PP
.B PMEM_NO_MOVNT=1
.IP
Setting this environment variable to 1 forces
.B libpmem
to never use the
.I non-temporal
move instructions on Intel hardware.
Without this environment variable,
.B libpmem
will use the non-temporal
instructions for copying larger ranges to
persistent memory on platforms that
support the instructions.
This variable is intended for use
during library testing.
.PP
.BI PMEM_MOVNT_THRESHOLD= val
.IP
This environment variable allows overriding the minimal length of
.BR pmem_memcpy_* (),
.BR pmem_memmove_* ()
or
.BR pmem_memset_* ()
operations, for which
.B libpmem
uses
.I non-temporal
move instructions.
Setting this environment variable to 0 forces
.B libpmem
to always use the
.I non-temporal
move instructions if available.
It has no effect if
.B PMEM_NO_MOVNT
variable is set to 1.
This variable is intended for use during library testing.
.PP
.BI PMEM_MMAP_HINT= val
This environment variable allows overriding the hint address used by
.BR pmem_map ().
If set, it also disables mapping address randomization.
This variable is intended for use during library testing and debugging.
Setting it to some fairly large value (i.e. 0x10000000000) will very likely
result in mapping the file at the specified address (if not used) or at the
first unused region above given address, without adding any random offset.
When debugging, this makes it easier to calculate the actual address
of the persistent memory block, based on its offset in the file.  In case of
.B libpmemobj
it simplifies conversion of a persistent object identifier (OID) into a direct
pointer to the object.
.B NOTE: Setting this environment variable affects all the NVM libraries,
disabling mapping address randomization and causing the specified address
to be used as a hint about where to place the mapping.
.SH EXAMPLES
.PP
The following example uses
.B libpmem
to flush changes made to raw, memory-mapped persistent memory.
.PP
WARNING: there is nothing transactional about the
.BR pmem_persist ()
or
.BR pmem_msync ()
calls in this example.  Interrupting the program may result in
a partial write to pmem.  Use a transactional library such as
.BR libpmemobj (3)
to avoid torn updates.
.IP
.\" run source through expand -4 before inserting...
.nf
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <errno.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <libpmem.h>

/* using 4k of pmem for this example */
#define PMEM_LEN 4096

int
main(int argc, char *argv[])
{
    int fd;
    char *pmemaddr;
    int is_pmem;

    /* create a pmem file */
    if ((fd = open("/pmem-fs/myfile",
                         O_CREAT|O_RDWR, 0666)) < 0) {
        perror("open");
        exit(1);
    }

    /* allocate the pmem */
    if ((errno = posix_fallocate(fd, 0, PMEM_LEN)) != 0) {
        perror("posix_fallocate");
        exit(1);
    }

    /* memory map it */
    if ((pmemaddr = pmem_map(fd)) == NULL) {
        perror("pmem_map");
        exit(1);
    }
    close(fd);

    /* determine if range is true pmem */
    is_pmem = pmem_is_pmem(pmemaddr, PMEM_LEN);

    /* store a string to the persistent memory */
    strcpy(pmemaddr, "hello, persistent memory");

    /* flush above strcpy to persistence */
    if (is_pmem)
        pmem_persist(pmemaddr, PMEM_LEN);
    else
        pmem_msync(pmemaddr, PMEM_LEN);

    /*
     * Delete the mappings. The region is also
     * automatically unmapped when the process is
     * terminated.
     */
    pmem_unmap(pmemaddr, PMEM_LEN);
}
.fi
.PP
See http://pmem.io/nvml/libpmem for more examples
using the
.B libpmem
API.
.SH ACKNOWLEDGEMENTS
.PP
.B libpmem
builds on the persistent memory programming model
recommended by the SNIA NVM Programming Technical Work Group:
.IP
http://snia.org/nvmp
.SH "SEE ALSO"
.BR mmap (2),
.BR munmap (2),
.BR msync (2),
.BR strerror (3),
.BR libpmemobj (3),
.BR libpmemblk (3),
.BR libpmemlog (3),
.BR libvmem (3)
and
.BR http://pmem.io .
