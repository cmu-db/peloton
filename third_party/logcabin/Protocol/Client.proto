// Copyright (c) 2011-2012 Stanford University
// Copyright (c) 2015 Diego Ongaro
//
// Permission to use, copy, modify, and distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR(S) DISCLAIM ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL AUTHORS BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

package LogCabin.Protocol.Client;

/**
 * \file
 * This file contains the formats for RPCs between clients and servers.
 */

/**
 * Identifies which RPC is being executed.
 */
enum OpCode {
    STATE_MACHINE_QUERY = 1;
    STATE_MACHINE_COMMAND = 2;
    VERIFY_RECIPIENT = 3;
    GET_CONFIGURATION = 4;
    SET_CONFIGURATION = 5;
    GET_SERVER_STATS = 6;
    GET_SERVER_INFO = 7;
};

/**
 * The type of "service-specific error" replies that this service returns.
 */
message Error {
    enum Code {
        /**
         * This must be the first value in the enum and is never assigned
         * explicitly. If new values are added, old code will see them as set
         * and equal to this value (though they will still serialize to the
         * correct value).
         */
        UNKNOWN = 0;
        /**
         * The server is not the current cluster leader. The client should look
         * elsewhere for the cluster leader. The server MAY provide a hint as
         * to who the leader is (see leader_hint field).
         */
        NOT_LEADER = 1;
    };
    optional Code error_code = 1;
    /**
     * If error_code is NOT_LEADER and this field is set, the client should try
     * the server found at this address, which is likely to be the current
     * leader.
     */
    optional string leader_hint = 2;
}

/**
 * This is included in some RPCs to prevent processing of duplicated RPCs.
 */
message ExactlyOnceRPCInfo {
    /**
     * A session ID returned from the OpenSession RPC.
     * Valid client IDs will always be strictly greater than 0.
     */
    required uint64 client_id = 1;
    /**
     * The lowest numbered RPC for which the client has not yet received a
     * response. The server may discard all copies of responses for RPCs with
     * smaller numbers.
     */
    required uint64 first_outstanding_rpc = 2;
    /**
     * A strictly increasing sequence number for the RPC.
     */
    required uint64 rpc_number = 3;
}

/**
 * VerifyRecipient RPC: Make sure we're talking to the intended recipient (to
 * avoid disastrous confusion). This is called automatically by
 * Client::SessionManager when creating new sessions.
 */
message VerifyRecipient {
    message Request {
        /**
         * The cluster UUID that the recipient must match, if any.
         */
        optional string cluster_uuid = 1;
        /**
         * The server ID of the recipient, if any.
         */
        optional uint64 server_id = 2;
    }
    message Response {
        /**
         * The recipient's cluster UUID.
         */
        optional string cluster_uuid = 1;
        /**
         * The recipient's server ID.
         */
        optional uint64 server_id = 2;
        /**
         * Set to true if everything matched successfully.
         */
        optional bool ok = 3;
        /**
         * If there was an error, a message describing why.
         */
        optional string error = 4;
    }
}

/**
 * OpenSession state machine command: Open a new session with the cluster.
 * Sessions are necessary for some RPCs to provide exactly-once semantics.
 */
message OpenSession {
    message Request {
    }
    message Response {
        /**
         * The ID assigned to the client.
         */
        required uint64 client_id = 1;
    }
}

/**
 * CloseSession state machine command: Terminate a session with the cluster.
 * This cleans up any state that the session held; future RPCs on this session
 * will have errors.
 * \since
 *      This command was introduced in state machine version 2. State machines
 *      running version 1 will ignore this command; they only expire sessions
 *      based on timeouts.
 */
message CloseSession {
    message Request {
        /**
         * The ID assigned to the client as previously returned by OpenSession.
         */
        required uint64 client_id = 1;
    }
    message Response {
    }
}

/**
 * A server in a configuration. Used in the GetConfiguration and
 * SetConfiguration RPCs.
 */
message Server {
    /**
     * The ID of the server.
     */
    required uint64 server_id = 1;
    /**
     * The network address(es) of the server (comma-delimited).
     */
    required string addresses = 2;
}

/**
 * GetConfiguration RPC: Get the current cluster configuration.
 * This will only return stable configurations; the client will be asked to
 * retry otherwise.
 */
message GetConfiguration {
    message Request {
    }
    message Response {
        /**
         * Identifies the configuration. Pass this to SetConfiguration later.
         */
        required uint64 id = 1;
        /**
         * The list of servers in the configuration.
         */
        repeated Server servers = 2;
    }
}

/**
 * SetConfiguration RPC: Change the cluster's configuration.
 */
message SetConfiguration {
    message Request {
        /**
         * The ID of the cluster's current configuration.
         */
        required uint64 old_id = 1;
        /**
         * The list of servers in the new configuration.
         */
        repeated Server new_servers = 2;
    }
    message Response {
        // The following are mutually exclusive.
        message OK {
        }
        message ConfigurationChanged {
            optional string error = 1;
        }
        message ConfigurationBad {
            /**
             * The servers that were unavailable to join the cluster.
             */
            repeated Server bad_servers = 1;
        }
        /**
         * Set if the operation succeeded.
         */
        optional OK ok = 1;
        /**
         * Set if the supplied 'old_id' is no longer current.
         * Call GetConfiguration, re-apply your changes, and try again.
         */
        optional ConfigurationChanged configuration_changed = 2;
        /**
         * Set if the reconfiguration was aborted because some servers are
         * unavailable or too slow.
         */
        optional ConfigurationBad configuration_bad = 3;
    }
}

/**
 * The status code returned from Tree operations.
 * For now, this should be the exact same as Client::Status and Tree::Status.
 */
enum Status {
    /**
     * This must be the first value in the enum and is never assigned
     * explicitly. If new values are added, old code will see them as set
     * and equal to this value (though they will still serialize to the
     * correct value).
     */
    UNKNOWN = 10;

    OK = 0;
    INVALID_ARGUMENT = 1;
    LOOKUP_ERROR = 2;
    TYPE_ERROR = 3;
    CONDITION_NOT_MET = 4;
    /**
     * This is only used internally in the client library; it is never sent
     * over the network.
     */
    TIMEOUT = 5;
    /**
     * This session is no longer valid. Its state has been discarded on the
     * server. The client should treat this as a fatal error.
     */
    SESSION_EXPIRED = 6;
};

/**
 * A predicate on Tree operations.
 * If set, operations will return CONDITION_NOT_MET and have no effect unless
 * the file at 'path' has the contents 'contents'.
 */
message TreeCondition {
    /**
     * The absolute path to the file that must have the contents specified in
     * 'contents'.
     */
    required string path = 1;
    /**
     * The contents that the file specified by 'path' must have for the
     * operation to succeed.
     */
    required bytes contents = 2;
};

/**
 * Read-only Tree state machine query: retrieves information from the
 * hierarchical key-value store.
 */
message ReadOnlyTree {
    message Request {
        optional TreeCondition condition = 11;
        // The following are mutually exclusive.
        message ListDirectory {
            required string path = 1;
        }
        optional ListDirectory list_directory = 2;
        message Read {
            required string path = 1;
        }
        optional Read read = 5;
    }
    message Response {
        optional Status status = 1;
        // The following are mutually exclusive.
        optional string error = 2;
        message ListDirectory {
            repeated string child = 1;
        }
        optional ListDirectory list_directory = 3;
        message Read {
            required bytes contents = 1;
        }
        optional Read read = 4;
    }
}

/**
 * Read-write Tree state machine command: modifies the hierarchical key-value
 * store and retrieves information from it.
 */
message ReadWriteTree {
    message Request {
        /// See ExactlyOnceRPCInfo.
        required ExactlyOnceRPCInfo exactly_once = 10;
        optional TreeCondition condition = 11;
        // The following are mutually exclusive.
        message MakeDirectory {
            required string path = 1;
        }
        optional MakeDirectory make_directory = 1;
        message RemoveDirectory {
            required string path = 1;
        }
        optional RemoveDirectory remove_directory = 3;
        message Write {
            required string path = 1;
            required bytes contents = 2;
        }
        optional Write write = 4;
        message RemoveFile {
            required string path = 1;
        }
        optional RemoveFile remove_file = 6;

    }
    message Response {
        optional Status status = 1;
        // The following are mutually exclusive.
        optional string error = 2;
    }
}

/**
 * GetServerInfo RPC: Retrieve basic information from the given server used for
 * reconfiguration.
 */
message GetServerInfo {
    message Request {
    }
    message Response {
        /**
         * Server ID, listening addresses.
         */
        required Server server_info = 1;
    }
}


/**
 * AdvanceStateMachineVersion state machine command: changes state machine
 * behavior to the given version, if and only if the requested_version is
 * greater than the state machine's current version. This is currently only
 * used internally by the Raft servers. It is not currently sent by the client
 * library, rather it is appended by the Raft leader automatically as needed.
 */
message AdvanceStateMachineVersion {
    message Request {
        required uint32 requested_version = 1;
    }
    message Response {
        /**
         * The version of the state machine behavior that the replicated state
         * machine is running after applying this command (this will be at
         * least the requested version, but may be higher if the state machine
         * was already running a higher version).
         */
        required uint32 running_version = 1;
    }
}

/**
 * StateMachineCommand RPC from clients that is processed by the replicated
 * state machine.
 */
message StateMachineCommand {
    /**
     * This is what the state machine takes in from the replicated log.
     * These are read-write: they may modify the state machine state.
     */
    message Request {
        // The following are mutually exclusive.
        optional OpenSession.Request open_session = 1;
        optional CloseSession.Request close_session = 4;
        optional ReadWriteTree.Request tree = 2;
        optional AdvanceStateMachineVersion.Request advance_version = 3;
    }
    /**
     * This is what the state machine outputs for read-write commands from the
     * log.
     */
    message Response {
        // The following are mutually exclusive.
        optional OpenSession.Response open_session = 1;
        optional CloseSession.Response close_session = 4;
        optional ReadWriteTree.Response tree = 2;
        optional AdvanceStateMachineVersion.Response advance_version = 3;
    }
}

/**
 * StateMachineQuery RPC from clients that is processed by the replicated state
 * machine.
 */
message StateMachineQuery {
    /**
     * These are read-only queries that (in the current implementation) are not
     * written to the replicated log (but behave as if they were from the
     * client's perspective). These are read-only: they may not modify the
     * state machine state.
     */
    message Request {
        // The following are mutually exclusive.
        optional ReadOnlyTree.Request tree = 1;
    }
    /**
     * This is what the state machine outputs for read-only queries.
     */
    message Response {
        // The following are mutually exclusive.
        optional ReadOnlyTree.Response tree = 1;
    }
}
